# coding: utf-8

"""
    Yodlee Core APIs

    This file describes the Yodlee Platform APIs using the swagger notation. You can use this swagger file to generate client side SDKs to the Yodlee Platform APIs for many different programming languages. Yodlee API v1.1 - Overview</a>.<br><br>You will have to set the header before making the API call. The following headers apply to all the APIs:<ul><li>Authorization: This header holds the access token</li> <li> Api-Version: 1.1</li></ul><b>Note</b>: If there are any API-specific headers, they are mentioned explicitly in the respective API's description.  # noqa: E501

    The version of the OpenAPI document: 1.1.0
    Contact: developer@yodlee.com
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from yodlee.configuration import Configuration


class TransactionCategory(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'high_level_category_name': 'str',
        'default_high_level_category_name': 'str',
        'high_level_category_id': 'int',
        'detail_category': 'list[DetailCategory]',
        'id': 'int',
        'source': 'str',
        'category': 'str',
        'classification': 'str',
        'type': 'str',
        'default_category_name': 'str'
    }

    attribute_map = {
        'high_level_category_name': 'highLevelCategoryName',
        'default_high_level_category_name': 'defaultHighLevelCategoryName',
        'high_level_category_id': 'highLevelCategoryId',
        'detail_category': 'detailCategory',
        'id': 'id',
        'source': 'source',
        'category': 'category',
        'classification': 'classification',
        'type': 'type',
        'default_category_name': 'defaultCategoryName'
    }

    def __init__(self, high_level_category_name=None, default_high_level_category_name=None, high_level_category_id=None, detail_category=None, id=None, source=None, category=None, classification=None, type=None, default_category_name=None, local_vars_configuration=None):  # noqa: E501
        """TransactionCategory - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._high_level_category_name = None
        self._default_high_level_category_name = None
        self._high_level_category_id = None
        self._detail_category = None
        self._id = None
        self._source = None
        self._category = None
        self._classification = None
        self._type = None
        self._default_category_name = None
        self.discriminator = None

        if high_level_category_name is not None:
            self.high_level_category_name = high_level_category_name
        if default_high_level_category_name is not None:
            self.default_high_level_category_name = default_high_level_category_name
        if high_level_category_id is not None:
            self.high_level_category_id = high_level_category_id
        if detail_category is not None:
            self.detail_category = detail_category
        if id is not None:
            self.id = id
        if source is not None:
            self.source = source
        if category is not None:
            self.category = category
        if classification is not None:
            self.classification = classification
        if type is not None:
            self.type = type
        if default_category_name is not None:
            self.default_category_name = default_category_name

    @property
    def high_level_category_name(self):
        """Gets the high_level_category_name of this TransactionCategory.  # noqa: E501

        The name of the high level category. A group of similar transaction categories are clubbed together to form a high-level category.<br><br><b>Applicable containers</b>: creditCard, investment, insurance, loan<br>  # noqa: E501

        :return: The high_level_category_name of this TransactionCategory.  # noqa: E501
        :rtype: str
        """
        return self._high_level_category_name

    @high_level_category_name.setter
    def high_level_category_name(self, high_level_category_name):
        """Sets the high_level_category_name of this TransactionCategory.

        The name of the high level category. A group of similar transaction categories are clubbed together to form a high-level category.<br><br><b>Applicable containers</b>: creditCard, investment, insurance, loan<br>  # noqa: E501

        :param high_level_category_name: The high_level_category_name of this TransactionCategory.  # noqa: E501
        :type high_level_category_name: str
        """

        self._high_level_category_name = high_level_category_name

    @property
    def default_high_level_category_name(self):
        """Gets the default_high_level_category_name of this TransactionCategory.  # noqa: E501

        A attribute which will always hold the first value(initial name) of Yodlee defined highLevelCategoryName attribute.<br><br><b>Applicable containers</b>: creditCard, investment, insurance, loan<br>  # noqa: E501

        :return: The default_high_level_category_name of this TransactionCategory.  # noqa: E501
        :rtype: str
        """
        return self._default_high_level_category_name

    @default_high_level_category_name.setter
    def default_high_level_category_name(self, default_high_level_category_name):
        """Sets the default_high_level_category_name of this TransactionCategory.

        A attribute which will always hold the first value(initial name) of Yodlee defined highLevelCategoryName attribute.<br><br><b>Applicable containers</b>: creditCard, investment, insurance, loan<br>  # noqa: E501

        :param default_high_level_category_name: The default_high_level_category_name of this TransactionCategory.  # noqa: E501
        :type default_high_level_category_name: str
        """

        self._default_high_level_category_name = default_high_level_category_name

    @property
    def high_level_category_id(self):
        """Gets the high_level_category_id of this TransactionCategory.  # noqa: E501

        The unique identifier of the high level category.<br><br><b>Applicable containers</b>: creditCard, investment, insurance, loan<br>  # noqa: E501

        :return: The high_level_category_id of this TransactionCategory.  # noqa: E501
        :rtype: int
        """
        return self._high_level_category_id

    @high_level_category_id.setter
    def high_level_category_id(self, high_level_category_id):
        """Sets the high_level_category_id of this TransactionCategory.

        The unique identifier of the high level category.<br><br><b>Applicable containers</b>: creditCard, investment, insurance, loan<br>  # noqa: E501

        :param high_level_category_id: The high_level_category_id of this TransactionCategory.  # noqa: E501
        :type high_level_category_id: int
        """

        self._high_level_category_id = high_level_category_id

    @property
    def detail_category(self):
        """Gets the detail_category of this TransactionCategory.  # noqa: E501

        Entity that provides detail category attributes<br><br><b>Applicable containers</b>: creditCard, investment, insurance, loan<br>  # noqa: E501

        :return: The detail_category of this TransactionCategory.  # noqa: E501
        :rtype: list[DetailCategory]
        """
        return self._detail_category

    @detail_category.setter
    def detail_category(self, detail_category):
        """Sets the detail_category of this TransactionCategory.

        Entity that provides detail category attributes<br><br><b>Applicable containers</b>: creditCard, investment, insurance, loan<br>  # noqa: E501

        :param detail_category: The detail_category of this TransactionCategory.  # noqa: E501
        :type detail_category: list[DetailCategory]
        """

        self._detail_category = detail_category

    @property
    def id(self):
        """Gets the id of this TransactionCategory.  # noqa: E501

        Unique identifier of the category.<br><br><b>Applicable containers</b>: creditCard, investment, insurance, loan<br>  # noqa: E501

        :return: The id of this TransactionCategory.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this TransactionCategory.

        Unique identifier of the category.<br><br><b>Applicable containers</b>: creditCard, investment, insurance, loan<br>  # noqa: E501

        :param id: The id of this TransactionCategory.  # noqa: E501
        :type id: int
        """

        self._id = id

    @property
    def source(self):
        """Gets the source of this TransactionCategory.  # noqa: E501

        Source used to identify whether the transaction category is user defined category or system created category.<br><br><b>Applicable containers</b>: creditCard, investment, insurance, loan<br><b>Applicable Values</b><br>  # noqa: E501

        :return: The source of this TransactionCategory.  # noqa: E501
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this TransactionCategory.

        Source used to identify whether the transaction category is user defined category or system created category.<br><br><b>Applicable containers</b>: creditCard, investment, insurance, loan<br><b>Applicable Values</b><br>  # noqa: E501

        :param source: The source of this TransactionCategory.  # noqa: E501
        :type source: str
        """
        allowed_values = ["SYSTEM", "USER"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and source not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `source` ({0}), must be one of {1}"  # noqa: E501
                .format(source, allowed_values)
            )

        self._source = source

    @property
    def category(self):
        """Gets the category of this TransactionCategory.  # noqa: E501

        The name of the category.<br><b>Note</b>: Transaction categorization is one of the core features offered by Yodlee and the categories are assigned to the transactions by the system. Transactions can be clubbed together by the category that is assigned to them.  <br><br><b>Applicable containers</b>: creditCard, investment, insurance, loan<br>  # noqa: E501

        :return: The category of this TransactionCategory.  # noqa: E501
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this TransactionCategory.

        The name of the category.<br><b>Note</b>: Transaction categorization is one of the core features offered by Yodlee and the categories are assigned to the transactions by the system. Transactions can be clubbed together by the category that is assigned to them.  <br><br><b>Applicable containers</b>: creditCard, investment, insurance, loan<br>  # noqa: E501

        :param category: The category of this TransactionCategory.  # noqa: E501
        :type category: str
        """

        self._category = category

    @property
    def classification(self):
        """Gets the classification of this TransactionCategory.  # noqa: E501

        Category Classification.<br><br><b>Applicable containers</b>: creditCard, investment, insurance, loan<br><b>Applicable Values</b><br>  # noqa: E501

        :return: The classification of this TransactionCategory.  # noqa: E501
        :rtype: str
        """
        return self._classification

    @classification.setter
    def classification(self, classification):
        """Sets the classification of this TransactionCategory.

        Category Classification.<br><br><b>Applicable containers</b>: creditCard, investment, insurance, loan<br><b>Applicable Values</b><br>  # noqa: E501

        :param classification: The classification of this TransactionCategory.  # noqa: E501
        :type classification: str
        """
        allowed_values = ["PERSONAL", "BUSINESS"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and classification not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `classification` ({0}), must be one of {1}"  # noqa: E501
                .format(classification, allowed_values)
            )

        self._classification = classification

    @property
    def type(self):
        """Gets the type of this TransactionCategory.  # noqa: E501

        Transaction categories and high-level categories are further mapped to five transaction category types. Customers, based on their needs can either use the transaction categories, the high-level categories, or the transaction category types. <br><br><b>Applicable containers</b>: creditCard, investment, insurance, loan<br><b>Applicable Values</b><br>  # noqa: E501

        :return: The type of this TransactionCategory.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this TransactionCategory.

        Transaction categories and high-level categories are further mapped to five transaction category types. Customers, based on their needs can either use the transaction categories, the high-level categories, or the transaction category types. <br><br><b>Applicable containers</b>: creditCard, investment, insurance, loan<br><b>Applicable Values</b><br>  # noqa: E501

        :param type: The type of this TransactionCategory.  # noqa: E501
        :type type: str
        """
        allowed_values = ["TRANSFER", "DEFERRED_COMPENSATION", "UNCATEGORIZE", "INCOME", "EXPENSE"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and type not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def default_category_name(self):
        """Gets the default_category_name of this TransactionCategory.  # noqa: E501

        A attribute which will always hold the first value(initial name) of Yodlee defined category attribute.<br><br><b>Applicable containers</b>: creditCard, investment, insurance, loan<br>  # noqa: E501

        :return: The default_category_name of this TransactionCategory.  # noqa: E501
        :rtype: str
        """
        return self._default_category_name

    @default_category_name.setter
    def default_category_name(self, default_category_name):
        """Sets the default_category_name of this TransactionCategory.

        A attribute which will always hold the first value(initial name) of Yodlee defined category attribute.<br><br><b>Applicable containers</b>: creditCard, investment, insurance, loan<br>  # noqa: E501

        :param default_category_name: The default_category_name of this TransactionCategory.  # noqa: E501
        :type default_category_name: str
        """

        self._default_category_name = default_category_name

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TransactionCategory):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, TransactionCategory):
            return True

        return self.to_dict() != other.to_dict()
