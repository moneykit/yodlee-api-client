# coding: utf-8

"""
    Yodlee Core APIs

    This file describes the Yodlee Platform APIs using the swagger notation. You can use this swagger file to generate client side SDKs to the Yodlee Platform APIs for many different programming languages. Yodlee API v1.1 - Overview</a>.<br><br>You will have to set the header before making the API call. The following headers apply to all the APIs:<ul><li>Authorization: This header holds the access token</li> <li> Api-Version: 1.1</li></ul><b>Note</b>: If there are any API-specific headers, they are mentioned explicitly in the respective API's description.  # noqa: E501

    The version of the OpenAPI document: 1.1.0
    Contact: developer@yodlee.com
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from yodlee.configuration import Configuration


class DerivedNetworthHistoricalBalance(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'date': 'str',
        'account_id': 'int',
        'is_asset': 'bool',
        'balance': 'Money',
        'as_of_date': 'str',
        'data_source_type': 'str'
    }

    attribute_map = {
        'date': 'date',
        'account_id': 'accountId',
        'is_asset': 'isAsset',
        'balance': 'balance',
        'as_of_date': 'asOfDate',
        'data_source_type': 'dataSourceType'
    }

    def __init__(self, date=None, account_id=None, is_asset=None, balance=None, as_of_date=None, data_source_type=None, local_vars_configuration=None):  # noqa: E501
        """DerivedNetworthHistoricalBalance - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._date = None
        self._account_id = None
        self._is_asset = None
        self._balance = None
        self._as_of_date = None
        self._data_source_type = None
        self.discriminator = None

        if date is not None:
            self.date = date
        if account_id is not None:
            self.account_id = account_id
        if is_asset is not None:
            self.is_asset = is_asset
        if balance is not None:
            self.balance = balance
        if as_of_date is not None:
            self.as_of_date = as_of_date
        if data_source_type is not None:
            self.data_source_type = data_source_type

    @property
    def date(self):
        """Gets the date of this DerivedNetworthHistoricalBalance.  # noqa: E501

        Date for which the account balance was provided.  This balance could be a carryforward, calculated or a scraped balance. AdditIonal Details: scraped: Balance shown in the provider site. This balance gets stored in Yodlee system during system/user account updates. carryForward : Balance carried forward from the scraped balance to the days for which the balance was not available in the system. Balance may not be available for all the days in the system due to MFA information required, error in the site, credential changes, etc. calculated: Balances that gets calculated for the days that are prior to the account added date.<br><br><b>Account Type</b>: Aggregated and Manual<br><b>Applicable containers</b>: bank, creditCard, investment, insurance, realEstate, loan<br><b>Endpoints</b>:<ul><li>GET accounts/historicalBalances</li><li>GET derived/networth</li></ul>  # noqa: E501

        :return: The date of this DerivedNetworthHistoricalBalance.  # noqa: E501
        :rtype: str
        """
        return self._date

    @date.setter
    def date(self, date):
        """Sets the date of this DerivedNetworthHistoricalBalance.

        Date for which the account balance was provided.  This balance could be a carryforward, calculated or a scraped balance. AdditIonal Details: scraped: Balance shown in the provider site. This balance gets stored in Yodlee system during system/user account updates. carryForward : Balance carried forward from the scraped balance to the days for which the balance was not available in the system. Balance may not be available for all the days in the system due to MFA information required, error in the site, credential changes, etc. calculated: Balances that gets calculated for the days that are prior to the account added date.<br><br><b>Account Type</b>: Aggregated and Manual<br><b>Applicable containers</b>: bank, creditCard, investment, insurance, realEstate, loan<br><b>Endpoints</b>:<ul><li>GET accounts/historicalBalances</li><li>GET derived/networth</li></ul>  # noqa: E501

        :param date: The date of this DerivedNetworthHistoricalBalance.  # noqa: E501
        :type date: str
        """

        self._date = date

    @property
    def account_id(self):
        """Gets the account_id of this DerivedNetworthHistoricalBalance.  # noqa: E501


        :return: The account_id of this DerivedNetworthHistoricalBalance.  # noqa: E501
        :rtype: int
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this DerivedNetworthHistoricalBalance.


        :param account_id: The account_id of this DerivedNetworthHistoricalBalance.  # noqa: E501
        :type account_id: int
        """

        self._account_id = account_id

    @property
    def is_asset(self):
        """Gets the is_asset of this DerivedNetworthHistoricalBalance.  # noqa: E501

        Indicates whether the balance is an asset or liability.<br><br><b>Account Type</b>: Aggregated and Manual<br><b>Applicable containers</b>: bank, creditCard, investment, insurance, realEstate, loan<br><b>Endpoints</b>:<ul><li>GET accounts/historicalBalances</li></ul>  # noqa: E501

        :return: The is_asset of this DerivedNetworthHistoricalBalance.  # noqa: E501
        :rtype: bool
        """
        return self._is_asset

    @is_asset.setter
    def is_asset(self, is_asset):
        """Sets the is_asset of this DerivedNetworthHistoricalBalance.

        Indicates whether the balance is an asset or liability.<br><br><b>Account Type</b>: Aggregated and Manual<br><b>Applicable containers</b>: bank, creditCard, investment, insurance, realEstate, loan<br><b>Endpoints</b>:<ul><li>GET accounts/historicalBalances</li></ul>  # noqa: E501

        :param is_asset: The is_asset of this DerivedNetworthHistoricalBalance.  # noqa: E501
        :type is_asset: bool
        """

        self._is_asset = is_asset

    @property
    def balance(self):
        """Gets the balance of this DerivedNetworthHistoricalBalance.  # noqa: E501


        :return: The balance of this DerivedNetworthHistoricalBalance.  # noqa: E501
        :rtype: Money
        """
        return self._balance

    @balance.setter
    def balance(self, balance):
        """Sets the balance of this DerivedNetworthHistoricalBalance.


        :param balance: The balance of this DerivedNetworthHistoricalBalance.  # noqa: E501
        :type balance: Money
        """

        self._balance = balance

    @property
    def as_of_date(self):
        """Gets the as_of_date of this DerivedNetworthHistoricalBalance.  # noqa: E501

        Date as of when the balance is last  updated due to the auto account updates or user triggered updates. This balance will be carry forward for the days where there is no balance available in the system. <br><br><b>Account Type</b>: Aggregated and Manual<br><b>Applicable containers</b>: bank, creditCard, investment, insurance, realEstate, loan<br><b>Endpoints</b>:<ul><li>GET accounts/historicalBalances</li></ul>  # noqa: E501

        :return: The as_of_date of this DerivedNetworthHistoricalBalance.  # noqa: E501
        :rtype: str
        """
        return self._as_of_date

    @as_of_date.setter
    def as_of_date(self, as_of_date):
        """Sets the as_of_date of this DerivedNetworthHistoricalBalance.

        Date as of when the balance is last  updated due to the auto account updates or user triggered updates. This balance will be carry forward for the days where there is no balance available in the system. <br><br><b>Account Type</b>: Aggregated and Manual<br><b>Applicable containers</b>: bank, creditCard, investment, insurance, realEstate, loan<br><b>Endpoints</b>:<ul><li>GET accounts/historicalBalances</li></ul>  # noqa: E501

        :param as_of_date: The as_of_date of this DerivedNetworthHistoricalBalance.  # noqa: E501
        :type as_of_date: str
        """

        self._as_of_date = as_of_date

    @property
    def data_source_type(self):
        """Gets the data_source_type of this DerivedNetworthHistoricalBalance.  # noqa: E501

        The source of balance information.<br><br><b>Account Type</b>: Aggregated and Manual<br><b>Applicable containers</b>: bank, creditCard, investment, insurance, realEstate, loan<br><b>Endpoints</b>:<ul><li>GET accounts/historicalBalances</li></ul><b>Applicable Values</b><br>  # noqa: E501

        :return: The data_source_type of this DerivedNetworthHistoricalBalance.  # noqa: E501
        :rtype: str
        """
        return self._data_source_type

    @data_source_type.setter
    def data_source_type(self, data_source_type):
        """Sets the data_source_type of this DerivedNetworthHistoricalBalance.

        The source of balance information.<br><br><b>Account Type</b>: Aggregated and Manual<br><b>Applicable containers</b>: bank, creditCard, investment, insurance, realEstate, loan<br><b>Endpoints</b>:<ul><li>GET accounts/historicalBalances</li></ul><b>Applicable Values</b><br>  # noqa: E501

        :param data_source_type: The data_source_type of this DerivedNetworthHistoricalBalance.  # noqa: E501
        :type data_source_type: str
        """
        allowed_values = ["S", "C", "CF"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and data_source_type not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `data_source_type` ({0}), must be one of {1}"  # noqa: E501
                .format(data_source_type, allowed_values)
            )

        self._data_source_type = data_source_type

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DerivedNetworthHistoricalBalance):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DerivedNetworthHistoricalBalance):
            return True

        return self.to_dict() != other.to_dict()
