# coding: utf-8

"""
    Yodlee Core APIs

    This file describes the Yodlee Platform APIs using the swagger notation. You can use this swagger file to generate client side SDKs to the Yodlee Platform APIs for many different programming languages. Yodlee API v1.1 - Overview</a>.<br><br>You will have to set the header before making the API call. The following headers apply to all the APIs:<ul><li>Authorization: This header holds the access token</li> <li> Api-Version: 1.1</li></ul><b>Note</b>: If there are any API-specific headers, they are mentioned explicitly in the respective API's description.  # noqa: E501

    The version of the OpenAPI document: 1.1.0
    Contact: developer@yodlee.com
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from yodlee.configuration import Configuration


class TransactionDays(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'full_account_number_fields': 'list[str]',
        'number_of_transaction_days': 'int'
    }

    attribute_map = {
        'full_account_number_fields': 'fullAccountNumberFields',
        'number_of_transaction_days': 'numberOfTransactionDays'
    }

    def __init__(self, full_account_number_fields=None, number_of_transaction_days=None, local_vars_configuration=None):  # noqa: E501
        """TransactionDays - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._full_account_number_fields = None
        self._number_of_transaction_days = None
        self.discriminator = None

        if full_account_number_fields is not None:
            self.full_account_number_fields = full_account_number_fields
        if number_of_transaction_days is not None:
            self.number_of_transaction_days = number_of_transaction_days

    @property
    def full_account_number_fields(self):
        """Gets the full_account_number_fields of this TransactionDays.  # noqa: E501


        :return: The full_account_number_fields of this TransactionDays.  # noqa: E501
        :rtype: list[str]
        """
        return self._full_account_number_fields

    @full_account_number_fields.setter
    def full_account_number_fields(self, full_account_number_fields):
        """Sets the full_account_number_fields of this TransactionDays.


        :param full_account_number_fields: The full_account_number_fields of this TransactionDays.  # noqa: E501
        :type full_account_number_fields: list[str]
        """
        allowed_values = ["paymentAccountNumber", "unmaskedAccountNumber"]  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                not set(full_account_number_fields).issubset(set(allowed_values))):  # noqa: E501
            raise ValueError(
                "Invalid values for `full_account_number_fields` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(full_account_number_fields) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._full_account_number_fields = full_account_number_fields

    @property
    def number_of_transaction_days(self):
        """Gets the number_of_transaction_days of this TransactionDays.  # noqa: E501


        :return: The number_of_transaction_days of this TransactionDays.  # noqa: E501
        :rtype: int
        """
        return self._number_of_transaction_days

    @number_of_transaction_days.setter
    def number_of_transaction_days(self, number_of_transaction_days):
        """Sets the number_of_transaction_days of this TransactionDays.


        :param number_of_transaction_days: The number_of_transaction_days of this TransactionDays.  # noqa: E501
        :type number_of_transaction_days: int
        """

        self._number_of_transaction_days = number_of_transaction_days

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TransactionDays):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, TransactionDays):
            return True

        return self.to_dict() != other.to_dict()
