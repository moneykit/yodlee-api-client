# coding: utf-8

"""
    Yodlee Core APIs

    This file describes the Yodlee Platform APIs using the swagger notation. You can use this swagger file to generate client side SDKs to the Yodlee Platform APIs for many different programming languages. Yodlee API v1.1 - Overview</a>.<br><br>You will have to set the header before making the API call. The following headers apply to all the APIs:<ul><li>Authorization: This header holds the access token</li> <li> Api-Version: 1.1</li></ul><b>Note</b>: If there are any API-specific headers, they are mentioned explicitly in the respective API's description.  # noqa: E501

    The version of the OpenAPI document: 1.1.0
    Contact: developer@yodlee.com
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from yodlee.configuration import Configuration


class ClassificationSummaryAccountSummary(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'account_id': 'int',
        'last_updated': 'str',
        'site': 'str',
        'account_name': 'str',
        'account_type': 'str',
        'account_open_date': 'str',
        'transaction_summary': 'ClassificationSummaryTransactionSummary',
        'available_balance': 'Money'
    }

    attribute_map = {
        'account_id': 'accountId',
        'last_updated': 'lastUpdated',
        'site': 'site',
        'account_name': 'accountName',
        'account_type': 'accountType',
        'account_open_date': 'accountOpenDate',
        'transaction_summary': 'transactionSummary',
        'available_balance': 'availableBalance'
    }

    def __init__(self, account_id=None, last_updated=None, site=None, account_name=None, account_type=None, account_open_date=None, transaction_summary=None, available_balance=None, local_vars_configuration=None):  # noqa: E501
        """ClassificationSummaryAccountSummary - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._account_id = None
        self._last_updated = None
        self._site = None
        self._account_name = None
        self._account_type = None
        self._account_open_date = None
        self._transaction_summary = None
        self._available_balance = None
        self.discriminator = None

        if account_id is not None:
            self.account_id = account_id
        if last_updated is not None:
            self.last_updated = last_updated
        if site is not None:
            self.site = site
        if account_name is not None:
            self.account_name = account_name
        if account_type is not None:
            self.account_type = account_type
        if account_open_date is not None:
            self.account_open_date = account_open_date
        if transaction_summary is not None:
            self.transaction_summary = transaction_summary
        if available_balance is not None:
            self.available_balance = available_balance

    @property
    def account_id(self):
        """Gets the account_id of this ClassificationSummaryAccountSummary.  # noqa: E501

        The primary key of the account resource and the unique identifier for the account.<br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: bank  # noqa: E501

        :return: The account_id of this ClassificationSummaryAccountSummary.  # noqa: E501
        :rtype: int
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this ClassificationSummaryAccountSummary.

        The primary key of the account resource and the unique identifier for the account.<br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: bank  # noqa: E501

        :param account_id: The account_id of this ClassificationSummaryAccountSummary.  # noqa: E501
        :type account_id: int
        """

        self._account_id = account_id

    @property
    def last_updated(self):
        """Gets the last_updated of this ClassificationSummaryAccountSummary.  # noqa: E501

        The date-time the account information was last retrieved from the provider site and updated in the Yodlee system  # noqa: E501

        :return: The last_updated of this ClassificationSummaryAccountSummary.  # noqa: E501
        :rtype: str
        """
        return self._last_updated

    @last_updated.setter
    def last_updated(self, last_updated):
        """Sets the last_updated of this ClassificationSummaryAccountSummary.

        The date-time the account information was last retrieved from the provider site and updated in the Yodlee system  # noqa: E501

        :param last_updated: The last_updated of this ClassificationSummaryAccountSummary.  # noqa: E501
        :type last_updated: str
        """

        self._last_updated = last_updated

    @property
    def site(self):
        """Gets the site of this ClassificationSummaryAccountSummary.  # noqa: E501

        The name of the provider site  # noqa: E501

        :return: The site of this ClassificationSummaryAccountSummary.  # noqa: E501
        :rtype: str
        """
        return self._site

    @site.setter
    def site(self, site):
        """Sets the site of this ClassificationSummaryAccountSummary.

        The name of the provider site  # noqa: E501

        :param site: The site of this ClassificationSummaryAccountSummary.  # noqa: E501
        :type site: str
        """

        self._site = site

    @property
    def account_name(self):
        """Gets the account_name of this ClassificationSummaryAccountSummary.  # noqa: E501

        The account name as it appears at the site  # noqa: E501

        :return: The account_name of this ClassificationSummaryAccountSummary.  # noqa: E501
        :rtype: str
        """
        return self._account_name

    @account_name.setter
    def account_name(self, account_name):
        """Sets the account_name of this ClassificationSummaryAccountSummary.

        The account name as it appears at the site  # noqa: E501

        :param account_name: The account_name of this ClassificationSummaryAccountSummary.  # noqa: E501
        :type account_name: str
        """

        self._account_name = account_name

    @property
    def account_type(self):
        """Gets the account_type of this ClassificationSummaryAccountSummary.  # noqa: E501

        The type of account that is aggregated such as savings, checking, etc. The account type is derived based on the attributes of the account.  # noqa: E501

        :return: The account_type of this ClassificationSummaryAccountSummary.  # noqa: E501
        :rtype: str
        """
        return self._account_type

    @account_type.setter
    def account_type(self, account_type):
        """Sets the account_type of this ClassificationSummaryAccountSummary.

        The type of account that is aggregated such as savings, checking, etc. The account type is derived based on the attributes of the account.  # noqa: E501

        :param account_type: The account_type of this ClassificationSummaryAccountSummary.  # noqa: E501
        :type account_type: str
        """

        self._account_type = account_type

    @property
    def account_open_date(self):
        """Gets the account_open_date of this ClassificationSummaryAccountSummary.  # noqa: E501

        The date on which the user opened the account at the provider site  # noqa: E501

        :return: The account_open_date of this ClassificationSummaryAccountSummary.  # noqa: E501
        :rtype: str
        """
        return self._account_open_date

    @account_open_date.setter
    def account_open_date(self, account_open_date):
        """Sets the account_open_date of this ClassificationSummaryAccountSummary.

        The date on which the user opened the account at the provider site  # noqa: E501

        :param account_open_date: The account_open_date of this ClassificationSummaryAccountSummary.  # noqa: E501
        :type account_open_date: str
        """

        self._account_open_date = account_open_date

    @property
    def transaction_summary(self):
        """Gets the transaction_summary of this ClassificationSummaryAccountSummary.  # noqa: E501


        :return: The transaction_summary of this ClassificationSummaryAccountSummary.  # noqa: E501
        :rtype: ClassificationSummaryTransactionSummary
        """
        return self._transaction_summary

    @transaction_summary.setter
    def transaction_summary(self, transaction_summary):
        """Sets the transaction_summary of this ClassificationSummaryAccountSummary.


        :param transaction_summary: The transaction_summary of this ClassificationSummaryAccountSummary.  # noqa: E501
        :type transaction_summary: ClassificationSummaryTransactionSummary
        """

        self._transaction_summary = transaction_summary

    @property
    def available_balance(self):
        """Gets the available_balance of this ClassificationSummaryAccountSummary.  # noqa: E501


        :return: The available_balance of this ClassificationSummaryAccountSummary.  # noqa: E501
        :rtype: Money
        """
        return self._available_balance

    @available_balance.setter
    def available_balance(self, available_balance):
        """Sets the available_balance of this ClassificationSummaryAccountSummary.


        :param available_balance: The available_balance of this ClassificationSummaryAccountSummary.  # noqa: E501
        :type available_balance: Money
        """

        self._available_balance = available_balance

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ClassificationSummaryAccountSummary):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ClassificationSummaryAccountSummary):
            return True

        return self.to_dict() != other.to_dict()
