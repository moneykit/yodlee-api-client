# coding: utf-8

"""
    Yodlee Core APIs

    This file describes the Yodlee Platform APIs using the swagger notation. You can use this swagger file to generate client side SDKs to the Yodlee Platform APIs for many different programming languages. Yodlee API v1.1 - Overview</a>.<br><br>You will have to set the header before making the API call. The following headers apply to all the APIs:<ul><li>Authorization: This header holds the access token</li> <li> Api-Version: 1.1</li></ul><b>Note</b>: If there are any API-specific headers, they are mentioned explicitly in the respective API's description.  # noqa: E501

    The version of the OpenAPI document: 1.1.0
    Contact: developer@yodlee.com
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from yodlee.configuration import Configuration


class VerifyTransactionCriteria(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'date': 'str',
        'amount': 'float',
        'verified_transaction': 'list[Transaction]',
        'matched': 'str',
        'keyword': 'str',
        'date_variance': 'str',
        'base_type': 'str'
    }

    attribute_map = {
        'date': 'date',
        'amount': 'amount',
        'verified_transaction': 'verifiedTransaction',
        'matched': 'matched',
        'keyword': 'keyword',
        'date_variance': 'dateVariance',
        'base_type': 'baseType'
    }

    def __init__(self, date=None, amount=None, verified_transaction=None, matched=None, keyword=None, date_variance=None, base_type=None, local_vars_configuration=None):  # noqa: E501
        """VerifyTransactionCriteria - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._date = None
        self._amount = None
        self._verified_transaction = None
        self._matched = None
        self._keyword = None
        self._date_variance = None
        self._base_type = None
        self.discriminator = None

        self.date = date
        self.amount = amount
        if verified_transaction is not None:
            self.verified_transaction = verified_transaction
        if matched is not None:
            self.matched = matched
        if keyword is not None:
            self.keyword = keyword
        if date_variance is not None:
            self.date_variance = date_variance
        if base_type is not None:
            self.base_type = base_type

    @property
    def date(self):
        """Gets the date of this VerifyTransactionCriteria.  # noqa: E501


        :return: The date of this VerifyTransactionCriteria.  # noqa: E501
        :rtype: str
        """
        return self._date

    @date.setter
    def date(self, date):
        """Sets the date of this VerifyTransactionCriteria.


        :param date: The date of this VerifyTransactionCriteria.  # noqa: E501
        :type date: str
        """
        if self.local_vars_configuration.client_side_validation and date is None:  # noqa: E501
            raise ValueError("Invalid value for `date`, must not be `None`")  # noqa: E501

        self._date = date

    @property
    def amount(self):
        """Gets the amount of this VerifyTransactionCriteria.  # noqa: E501


        :return: The amount of this VerifyTransactionCriteria.  # noqa: E501
        :rtype: float
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this VerifyTransactionCriteria.


        :param amount: The amount of this VerifyTransactionCriteria.  # noqa: E501
        :type amount: float
        """
        if self.local_vars_configuration.client_side_validation and amount is None:  # noqa: E501
            raise ValueError("Invalid value for `amount`, must not be `None`")  # noqa: E501

        self._amount = amount

    @property
    def verified_transaction(self):
        """Gets the verified_transaction of this VerifyTransactionCriteria.  # noqa: E501


        :return: The verified_transaction of this VerifyTransactionCriteria.  # noqa: E501
        :rtype: list[Transaction]
        """
        return self._verified_transaction

    @verified_transaction.setter
    def verified_transaction(self, verified_transaction):
        """Sets the verified_transaction of this VerifyTransactionCriteria.


        :param verified_transaction: The verified_transaction of this VerifyTransactionCriteria.  # noqa: E501
        :type verified_transaction: list[Transaction]
        """

        self._verified_transaction = verified_transaction

    @property
    def matched(self):
        """Gets the matched of this VerifyTransactionCriteria.  # noqa: E501

        Indicates if the criteria is matched or not. <br><b>Applicable Values</b><br>  # noqa: E501

        :return: The matched of this VerifyTransactionCriteria.  # noqa: E501
        :rtype: str
        """
        return self._matched

    @matched.setter
    def matched(self, matched):
        """Sets the matched of this VerifyTransactionCriteria.

        Indicates if the criteria is matched or not. <br><b>Applicable Values</b><br>  # noqa: E501

        :param matched: The matched of this VerifyTransactionCriteria.  # noqa: E501
        :type matched: str
        """
        allowed_values = ["COMPLETE", "NONE"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and matched not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `matched` ({0}), must be one of {1}"  # noqa: E501
                .format(matched, allowed_values)
            )

        self._matched = matched

    @property
    def keyword(self):
        """Gets the keyword of this VerifyTransactionCriteria.  # noqa: E501


        :return: The keyword of this VerifyTransactionCriteria.  # noqa: E501
        :rtype: str
        """
        return self._keyword

    @keyword.setter
    def keyword(self, keyword):
        """Sets the keyword of this VerifyTransactionCriteria.


        :param keyword: The keyword of this VerifyTransactionCriteria.  # noqa: E501
        :type keyword: str
        """

        self._keyword = keyword

    @property
    def date_variance(self):
        """Gets the date_variance of this VerifyTransactionCriteria.  # noqa: E501


        :return: The date_variance of this VerifyTransactionCriteria.  # noqa: E501
        :rtype: str
        """
        return self._date_variance

    @date_variance.setter
    def date_variance(self, date_variance):
        """Sets the date_variance of this VerifyTransactionCriteria.


        :param date_variance: The date_variance of this VerifyTransactionCriteria.  # noqa: E501
        :type date_variance: str
        """

        self._date_variance = date_variance

    @property
    def base_type(self):
        """Gets the base_type of this VerifyTransactionCriteria.  # noqa: E501

        Indicates if the transaction appears as a debit or a credit transaction in the account. <br><br><b>Applicable containers</b>: bank,creditCard,investment,insurance,loan<br><b>Applicable Values</b><br>  # noqa: E501

        :return: The base_type of this VerifyTransactionCriteria.  # noqa: E501
        :rtype: str
        """
        return self._base_type

    @base_type.setter
    def base_type(self, base_type):
        """Sets the base_type of this VerifyTransactionCriteria.

        Indicates if the transaction appears as a debit or a credit transaction in the account. <br><br><b>Applicable containers</b>: bank,creditCard,investment,insurance,loan<br><b>Applicable Values</b><br>  # noqa: E501

        :param base_type: The base_type of this VerifyTransactionCriteria.  # noqa: E501
        :type base_type: str
        """
        allowed_values = ["CREDIT", "DEBIT"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and base_type not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `base_type` ({0}), must be one of {1}"  # noqa: E501
                .format(base_type, allowed_values)
            )

        self._base_type = base_type

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, VerifyTransactionCriteria):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, VerifyTransactionCriteria):
            return True

        return self.to_dict() != other.to_dict()
