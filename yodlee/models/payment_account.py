# coding: utf-8

"""
    Yodlee Core APIs

    This file describes the Yodlee Platform APIs using the swagger notation. You can use this swagger file to generate client side SDKs to the Yodlee Platform APIs for many different programming languages. Yodlee API v1.1 - Overview</a>.<br><br>You will have to set the header before making the API call. The following headers apply to all the APIs:<ul><li>Authorization: This header holds the access token</li> <li> Api-Version: 1.1</li></ul><b>Note</b>: If there are any API-specific headers, they are mentioned explicitly in the respective API's description.  # noqa: E501

    The version of the OpenAPI document: 1.1.0
    Contact: developer@yodlee.com
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from yodlee.configuration import Configuration


class PaymentAccount(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'account_status': 'str',
        'last_updated': 'str',
        'account_name': 'str',
        'account_type': 'str',
        'current_balance': 'Money',
        'id': 'int',
        'bank_transfer_code': 'list[PaymentBankTransferCodeData]',
        'available_balance': 'Money',
        'full_account_number_list': 'FullAccountNumbers'
    }

    attribute_map = {
        'account_status': 'accountStatus',
        'last_updated': 'lastUpdated',
        'account_name': 'accountName',
        'account_type': 'accountType',
        'current_balance': 'currentBalance',
        'id': 'id',
        'bank_transfer_code': 'bankTransferCode',
        'available_balance': 'availableBalance',
        'full_account_number_list': 'fullAccountNumberList'
    }

    def __init__(self, account_status=None, last_updated=None, account_name=None, account_type=None, current_balance=None, id=None, bank_transfer_code=None, available_balance=None, full_account_number_list=None, local_vars_configuration=None):  # noqa: E501
        """PaymentAccount - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._account_status = None
        self._last_updated = None
        self._account_name = None
        self._account_type = None
        self._current_balance = None
        self._id = None
        self._bank_transfer_code = None
        self._available_balance = None
        self._full_account_number_list = None
        self.discriminator = None

        if account_status is not None:
            self.account_status = account_status
        if last_updated is not None:
            self.last_updated = last_updated
        if account_name is not None:
            self.account_name = account_name
        if account_type is not None:
            self.account_type = account_type
        if current_balance is not None:
            self.current_balance = current_balance
        if id is not None:
            self.id = id
        if bank_transfer_code is not None:
            self.bank_transfer_code = bank_transfer_code
        if available_balance is not None:
            self.available_balance = available_balance
        if full_account_number_list is not None:
            self.full_account_number_list = full_account_number_list

    @property
    def account_status(self):
        """Gets the account_status of this PaymentAccount.  # noqa: E501

        The status of the account that is updated by the user through an application or an API.</li><ul><li><b>ACTIVE:</b> All the added aggregated accounts status will be made \"ACTIVE\" by default.</li><li><b>TO_BE_CLOSED:</b> If the aggregated accounts are not found or closed in the data provider site, Yodlee system marks the status as TO_BE_CLOSED.</li><li><b>INACTIVE:</b> Users can update the status as INACTIVE to stop updating and to stop considering the account in other services.</li><li><b>CLOSED:</b> Users can update the status as CLOSED, if the account is closed with the provider.</li></ul><b>Endpoints</b>:<ul><li>GET /partner/paymentProcessor/account</li><li>GET /partner/paymentProcessor/account/balance</li><li>GET /partner/paymentProcessor/account/holder</li></ul>  # noqa: E501

        :return: The account_status of this PaymentAccount.  # noqa: E501
        :rtype: str
        """
        return self._account_status

    @account_status.setter
    def account_status(self, account_status):
        """Sets the account_status of this PaymentAccount.

        The status of the account that is updated by the user through an application or an API.</li><ul><li><b>ACTIVE:</b> All the added aggregated accounts status will be made \"ACTIVE\" by default.</li><li><b>TO_BE_CLOSED:</b> If the aggregated accounts are not found or closed in the data provider site, Yodlee system marks the status as TO_BE_CLOSED.</li><li><b>INACTIVE:</b> Users can update the status as INACTIVE to stop updating and to stop considering the account in other services.</li><li><b>CLOSED:</b> Users can update the status as CLOSED, if the account is closed with the provider.</li></ul><b>Endpoints</b>:<ul><li>GET /partner/paymentProcessor/account</li><li>GET /partner/paymentProcessor/account/balance</li><li>GET /partner/paymentProcessor/account/holder</li></ul>  # noqa: E501

        :param account_status: The account_status of this PaymentAccount.  # noqa: E501
        :type account_status: str
        """
        allowed_values = ["ACTIVE", "INACTIVE", "TO_BE_CLOSED", "CLOSED", "DELETED"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and account_status not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `account_status` ({0}), must be one of {1}"  # noqa: E501
                .format(account_status, allowed_values)
            )

        self._account_status = account_status

    @property
    def last_updated(self):
        """Gets the last_updated of this PaymentAccount.  # noqa: E501

        The date time the account information was last retrieved from the provider site and updated in the Yodlee system.<br><b>Endpoints</b>:<ul><li>GET /partner/paymentProcessor/account</li><li>GET /partner/paymentProcessor/account/balance</li><li>GET /partner/paymentProcessor/account/holder</li></ul>  # noqa: E501

        :return: The last_updated of this PaymentAccount.  # noqa: E501
        :rtype: str
        """
        return self._last_updated

    @last_updated.setter
    def last_updated(self, last_updated):
        """Sets the last_updated of this PaymentAccount.

        The date time the account information was last retrieved from the provider site and updated in the Yodlee system.<br><b>Endpoints</b>:<ul><li>GET /partner/paymentProcessor/account</li><li>GET /partner/paymentProcessor/account/balance</li><li>GET /partner/paymentProcessor/account/holder</li></ul>  # noqa: E501

        :param last_updated: The last_updated of this PaymentAccount.  # noqa: E501
        :type last_updated: str
        """

        self._last_updated = last_updated

    @property
    def account_name(self):
        """Gets the account_name of this PaymentAccount.  # noqa: E501

        The account name as it appears at the site.<br><b>Endpoints</b>:<ul><li>GET /partner/paymentProcessor/account</li><li>GET /partner/paymentProcessor/account/balance</li><li>GET /partner/paymentProcessor/account/holder</li></ul>  # noqa: E501

        :return: The account_name of this PaymentAccount.  # noqa: E501
        :rtype: str
        """
        return self._account_name

    @account_name.setter
    def account_name(self, account_name):
        """Sets the account_name of this PaymentAccount.

        The account name as it appears at the site.<br><b>Endpoints</b>:<ul><li>GET /partner/paymentProcessor/account</li><li>GET /partner/paymentProcessor/account/balance</li><li>GET /partner/paymentProcessor/account/holder</li></ul>  # noqa: E501

        :param account_name: The account_name of this PaymentAccount.  # noqa: E501
        :type account_name: str
        """

        self._account_name = account_name

    @property
    def account_type(self):
        """Gets the account_type of this PaymentAccount.  # noqa: E501

        The type of account that is aggregated, i.e., savings, checking, charge, etc. The account type is derived based on the attributes of the account. <br><b>Endpoints</b>:<ul><li>GET /partner/paymentProcessor/account</li><li>GET /partner/paymentProcessor/account/balance</li><li>GET /partner/paymentProcessor/account/holder</li></ul>  # noqa: E501

        :return: The account_type of this PaymentAccount.  # noqa: E501
        :rtype: str
        """
        return self._account_type

    @account_type.setter
    def account_type(self, account_type):
        """Sets the account_type of this PaymentAccount.

        The type of account that is aggregated, i.e., savings, checking, charge, etc. The account type is derived based on the attributes of the account. <br><b>Endpoints</b>:<ul><li>GET /partner/paymentProcessor/account</li><li>GET /partner/paymentProcessor/account/balance</li><li>GET /partner/paymentProcessor/account/holder</li></ul>  # noqa: E501

        :param account_type: The account_type of this PaymentAccount.  # noqa: E501
        :type account_type: str
        """

        self._account_type = account_type

    @property
    def current_balance(self):
        """Gets the current_balance of this PaymentAccount.  # noqa: E501


        :return: The current_balance of this PaymentAccount.  # noqa: E501
        :rtype: Money
        """
        return self._current_balance

    @current_balance.setter
    def current_balance(self, current_balance):
        """Sets the current_balance of this PaymentAccount.


        :param current_balance: The current_balance of this PaymentAccount.  # noqa: E501
        :type current_balance: Money
        """

        self._current_balance = current_balance

    @property
    def id(self):
        """Gets the id of this PaymentAccount.  # noqa: E501

        The primary key of the account resource and the unique identifier for the account.<br><br><b>Endpoints</b>:<ul><li>GET /partner/paymentProcessor/account</li><li>GET /partner/paymentProcessor/account/balance</li><li>GET /partner/paymentProcessor/account/holder</li></ul>  # noqa: E501

        :return: The id of this PaymentAccount.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this PaymentAccount.

        The primary key of the account resource and the unique identifier for the account.<br><br><b>Endpoints</b>:<ul><li>GET /partner/paymentProcessor/account</li><li>GET /partner/paymentProcessor/account/balance</li><li>GET /partner/paymentProcessor/account/holder</li></ul>  # noqa: E501

        :param id: The id of this PaymentAccount.  # noqa: E501
        :type id: int
        """

        self._id = id

    @property
    def bank_transfer_code(self):
        """Gets the bank_transfer_code of this PaymentAccount.  # noqa: E501

        Bank and branch identification information.<br><br><b>Endpoints</b>:<ul><li>GET /partner/paymentProcessor/account</li></ul>  # noqa: E501

        :return: The bank_transfer_code of this PaymentAccount.  # noqa: E501
        :rtype: list[PaymentBankTransferCodeData]
        """
        return self._bank_transfer_code

    @bank_transfer_code.setter
    def bank_transfer_code(self, bank_transfer_code):
        """Sets the bank_transfer_code of this PaymentAccount.

        Bank and branch identification information.<br><br><b>Endpoints</b>:<ul><li>GET /partner/paymentProcessor/account</li></ul>  # noqa: E501

        :param bank_transfer_code: The bank_transfer_code of this PaymentAccount.  # noqa: E501
        :type bank_transfer_code: list[PaymentBankTransferCodeData]
        """

        self._bank_transfer_code = bank_transfer_code

    @property
    def available_balance(self):
        """Gets the available_balance of this PaymentAccount.  # noqa: E501


        :return: The available_balance of this PaymentAccount.  # noqa: E501
        :rtype: Money
        """
        return self._available_balance

    @available_balance.setter
    def available_balance(self, available_balance):
        """Sets the available_balance of this PaymentAccount.


        :param available_balance: The available_balance of this PaymentAccount.  # noqa: E501
        :type available_balance: Money
        """

        self._available_balance = available_balance

    @property
    def full_account_number_list(self):
        """Gets the full_account_number_list of this PaymentAccount.  # noqa: E501


        :return: The full_account_number_list of this PaymentAccount.  # noqa: E501
        :rtype: FullAccountNumbers
        """
        return self._full_account_number_list

    @full_account_number_list.setter
    def full_account_number_list(self, full_account_number_list):
        """Sets the full_account_number_list of this PaymentAccount.


        :param full_account_number_list: The full_account_number_list of this PaymentAccount.  # noqa: E501
        :type full_account_number_list: FullAccountNumbers
        """

        self._full_account_number_list = full_account_number_list

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PaymentAccount):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, PaymentAccount):
            return True

        return self.to_dict() != other.to_dict()
