# coding: utf-8

"""
    Yodlee Core APIs

    This file describes the Yodlee Platform APIs using the swagger notation. You can use this swagger file to generate client side SDKs to the Yodlee Platform APIs for many different programming languages. Yodlee API v1.1 - Overview</a>.<br><br>You will have to set the header before making the API call. The following headers apply to all the APIs:<ul><li>Authorization: This header holds the access token</li> <li> Api-Version: 1.1</li></ul><b>Note</b>: If there are any API-specific headers, they are mentioned explicitly in the respective API's description.  # noqa: E501

    The version of the OpenAPI document: 1.1.0
    Contact: developer@yodlee.com
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from yodlee.configuration import Configuration


class ContainerAttributes(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'bank': 'TransactionDays',
        'loan': 'TransactionDays',
        'creditcard': 'TransactionDays',
        'investment': 'TransactionDays',
        'insurance': 'TransactionDays'
    }

    attribute_map = {
        'bank': 'BANK',
        'loan': 'LOAN',
        'creditcard': 'CREDITCARD',
        'investment': 'INVESTMENT',
        'insurance': 'INSURANCE'
    }

    def __init__(self, bank=None, loan=None, creditcard=None, investment=None, insurance=None, local_vars_configuration=None):  # noqa: E501
        """ContainerAttributes - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._bank = None
        self._loan = None
        self._creditcard = None
        self._investment = None
        self._insurance = None
        self.discriminator = None

        if bank is not None:
            self.bank = bank
        if loan is not None:
            self.loan = loan
        if creditcard is not None:
            self.creditcard = creditcard
        if investment is not None:
            self.investment = investment
        if insurance is not None:
            self.insurance = insurance

    @property
    def bank(self):
        """Gets the bank of this ContainerAttributes.  # noqa: E501


        :return: The bank of this ContainerAttributes.  # noqa: E501
        :rtype: TransactionDays
        """
        return self._bank

    @bank.setter
    def bank(self, bank):
        """Sets the bank of this ContainerAttributes.


        :param bank: The bank of this ContainerAttributes.  # noqa: E501
        :type bank: TransactionDays
        """

        self._bank = bank

    @property
    def loan(self):
        """Gets the loan of this ContainerAttributes.  # noqa: E501


        :return: The loan of this ContainerAttributes.  # noqa: E501
        :rtype: TransactionDays
        """
        return self._loan

    @loan.setter
    def loan(self, loan):
        """Sets the loan of this ContainerAttributes.


        :param loan: The loan of this ContainerAttributes.  # noqa: E501
        :type loan: TransactionDays
        """

        self._loan = loan

    @property
    def creditcard(self):
        """Gets the creditcard of this ContainerAttributes.  # noqa: E501


        :return: The creditcard of this ContainerAttributes.  # noqa: E501
        :rtype: TransactionDays
        """
        return self._creditcard

    @creditcard.setter
    def creditcard(self, creditcard):
        """Sets the creditcard of this ContainerAttributes.


        :param creditcard: The creditcard of this ContainerAttributes.  # noqa: E501
        :type creditcard: TransactionDays
        """

        self._creditcard = creditcard

    @property
    def investment(self):
        """Gets the investment of this ContainerAttributes.  # noqa: E501


        :return: The investment of this ContainerAttributes.  # noqa: E501
        :rtype: TransactionDays
        """
        return self._investment

    @investment.setter
    def investment(self, investment):
        """Sets the investment of this ContainerAttributes.


        :param investment: The investment of this ContainerAttributes.  # noqa: E501
        :type investment: TransactionDays
        """

        self._investment = investment

    @property
    def insurance(self):
        """Gets the insurance of this ContainerAttributes.  # noqa: E501


        :return: The insurance of this ContainerAttributes.  # noqa: E501
        :rtype: TransactionDays
        """
        return self._insurance

    @insurance.setter
    def insurance(self, insurance):
        """Sets the insurance of this ContainerAttributes.


        :param insurance: The insurance of this ContainerAttributes.  # noqa: E501
        :type insurance: TransactionDays
        """

        self._insurance = insurance

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ContainerAttributes):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ContainerAttributes):
            return True

        return self.to_dict() != other.to_dict()
