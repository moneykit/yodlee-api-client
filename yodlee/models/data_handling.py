# coding: utf-8

"""
    Yodlee Core APIs

    This file describes the Yodlee Platform APIs using the swagger notation. You can use this swagger file to generate client side SDKs to the Yodlee Platform APIs for many different programming languages. Yodlee API v1.1 - Overview</a>.<br><br>You will have to set the header before making the API call. The following headers apply to all the APIs:<ul><li>Authorization: This header holds the access token</li> <li> Api-Version: 1.1</li></ul><b>Note</b>: If there are any API-specific headers, they are mentioned explicitly in the respective API's description.  # noqa: E501

    The version of the OpenAPI document: 1.1.0
    Contact: developer@yodlee.com
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from yodlee.configuration import Configuration


class DataHandling(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'data_list': 'list[str]',
        'header_description': 'str'
    }

    attribute_map = {
        'data_list': 'dataList',
        'header_description': 'headerDescription'
    }

    def __init__(self, data_list=None, header_description=None, local_vars_configuration=None):  # noqa: E501
        """DataHandling - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._data_list = None
        self._header_description = None
        self.discriminator = None

        self.data_list = data_list
        self.header_description = header_description

    @property
    def data_list(self):
        """Gets the data_list of this DataHandling.  # noqa: E501

        We will apply the CDR de-identificatiion process. <br/> De-identificatied data will be used without further consent.<br/> De-identification of CDR data means your data cannot be associated with your identity after de-identification process takes place.  # noqa: E501

        :return: The data_list of this DataHandling.  # noqa: E501
        :rtype: list[str]
        """
        return self._data_list

    @data_list.setter
    def data_list(self, data_list):
        """Sets the data_list of this DataHandling.

        We will apply the CDR de-identificatiion process. <br/> De-identificatied data will be used without further consent.<br/> De-identification of CDR data means your data cannot be associated with your identity after de-identification process takes place.  # noqa: E501

        :param data_list: The data_list of this DataHandling.  # noqa: E501
        :type data_list: list[str]
        """
        if self.local_vars_configuration.client_side_validation and data_list is None:  # noqa: E501
            raise ValueError("Invalid value for `data_list`, must not be `None`")  # noqa: E501

        self._data_list = data_list

    @property
    def header_description(self):
        """Gets the header_description of this DataHandling.  # noqa: E501

        De-identification of data  # noqa: E501

        :return: The header_description of this DataHandling.  # noqa: E501
        :rtype: str
        """
        return self._header_description

    @header_description.setter
    def header_description(self, header_description):
        """Sets the header_description of this DataHandling.

        De-identification of data  # noqa: E501

        :param header_description: The header_description of this DataHandling.  # noqa: E501
        :type header_description: str
        """
        if self.local_vars_configuration.client_side_validation and header_description is None:  # noqa: E501
            raise ValueError("Invalid value for `header_description`, must not be `None`")  # noqa: E501

        self._header_description = header_description

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DataHandling):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DataHandling):
            return True

        return self.to_dict() != other.to_dict()
