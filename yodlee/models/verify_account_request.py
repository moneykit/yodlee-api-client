# coding: utf-8

"""
    Yodlee Core APIs

    This file describes the Yodlee Platform APIs using the swagger notation. You can use this swagger file to generate client side SDKs to the Yodlee Platform APIs for many different programming languages. Yodlee API v1.1 - Overview</a>.<br><br>You will have to set the header before making the API call. The following headers apply to all the APIs:<ul><li>Authorization: This header holds the access token</li> <li> Api-Version: 1.1</li></ul><b>Note</b>: If there are any API-specific headers, they are mentioned explicitly in the respective API's description.  # noqa: E501

    The version of the OpenAPI document: 1.1.0
    Contact: developer@yodlee.com
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from yodlee.configuration import Configuration


class VerifyAccountRequest(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'container': 'str',
        'account_id': 'int',
        'transaction_criteria': 'list[VerifyTransactionCriteria]'
    }

    attribute_map = {
        'container': 'container',
        'account_id': 'accountId',
        'transaction_criteria': 'transactionCriteria'
    }

    def __init__(self, container=None, account_id=None, transaction_criteria=None, local_vars_configuration=None):  # noqa: E501
        """VerifyAccountRequest - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._container = None
        self._account_id = None
        self._transaction_criteria = None
        self.discriminator = None

        if container is not None:
            self.container = container
        if account_id is not None:
            self.account_id = account_id
        self.transaction_criteria = transaction_criteria

    @property
    def container(self):
        """Gets the container of this VerifyAccountRequest.  # noqa: E501


        :return: The container of this VerifyAccountRequest.  # noqa: E501
        :rtype: str
        """
        return self._container

    @container.setter
    def container(self, container):
        """Sets the container of this VerifyAccountRequest.


        :param container: The container of this VerifyAccountRequest.  # noqa: E501
        :type container: str
        """
        allowed_values = ["bank", "creditCard", "investment", "insurance", "loan", "reward", "bill", "realEstate", "otherAssets", "otherLiabilities"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and container not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `container` ({0}), must be one of {1}"  # noqa: E501
                .format(container, allowed_values)
            )

        self._container = container

    @property
    def account_id(self):
        """Gets the account_id of this VerifyAccountRequest.  # noqa: E501


        :return: The account_id of this VerifyAccountRequest.  # noqa: E501
        :rtype: int
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this VerifyAccountRequest.


        :param account_id: The account_id of this VerifyAccountRequest.  # noqa: E501
        :type account_id: int
        """

        self._account_id = account_id

    @property
    def transaction_criteria(self):
        """Gets the transaction_criteria of this VerifyAccountRequest.  # noqa: E501


        :return: The transaction_criteria of this VerifyAccountRequest.  # noqa: E501
        :rtype: list[VerifyTransactionCriteria]
        """
        return self._transaction_criteria

    @transaction_criteria.setter
    def transaction_criteria(self, transaction_criteria):
        """Sets the transaction_criteria of this VerifyAccountRequest.


        :param transaction_criteria: The transaction_criteria of this VerifyAccountRequest.  # noqa: E501
        :type transaction_criteria: list[VerifyTransactionCriteria]
        """
        if self.local_vars_configuration.client_side_validation and transaction_criteria is None:  # noqa: E501
            raise ValueError("Invalid value for `transaction_criteria`, must not be `None`")  # noqa: E501

        self._transaction_criteria = transaction_criteria

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, VerifyAccountRequest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, VerifyAccountRequest):
            return True

        return self.to_dict() != other.to_dict()
