# coding: utf-8

"""
    Yodlee Core APIs

    This file describes the Yodlee Platform APIs using the swagger notation. You can use this swagger file to generate client side SDKs to the Yodlee Platform APIs for many different programming languages. Yodlee API v1.1 - Overview</a>.<br><br>You will have to set the header before making the API call. The following headers apply to all the APIs:<ul><li>Authorization: This header holds the access token</li> <li> Api-Version: 1.1</li></ul><b>Note</b>: If there are any API-specific headers, they are mentioned explicitly in the respective API's description.  # noqa: E501

    The version of the OpenAPI document: 1.1.0
    Contact: developer@yodlee.com
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from yodlee.configuration import Configuration


class UserDetail(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'preferences': 'UserResponsePreferences',
        'address': 'UserAddress',
        'phone_number': 'str',
        'login_name': 'str',
        'name': 'Name',
        'id': 'int',
        'role_type': 'str',
        'email': 'str',
        'segment_name': 'str'
    }

    attribute_map = {
        'preferences': 'preferences',
        'address': 'address',
        'phone_number': 'phoneNumber',
        'login_name': 'loginName',
        'name': 'name',
        'id': 'id',
        'role_type': 'roleType',
        'email': 'email',
        'segment_name': 'segmentName'
    }

    def __init__(self, preferences=None, address=None, phone_number=None, login_name=None, name=None, id=None, role_type=None, email=None, segment_name=None, local_vars_configuration=None):  # noqa: E501
        """UserDetail - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._preferences = None
        self._address = None
        self._phone_number = None
        self._login_name = None
        self._name = None
        self._id = None
        self._role_type = None
        self._email = None
        self._segment_name = None
        self.discriminator = None

        if preferences is not None:
            self.preferences = preferences
        if address is not None:
            self.address = address
        if phone_number is not None:
            self.phone_number = phone_number
        if login_name is not None:
            self.login_name = login_name
        if name is not None:
            self.name = name
        if id is not None:
            self.id = id
        if role_type is not None:
            self.role_type = role_type
        if email is not None:
            self.email = email
        if segment_name is not None:
            self.segment_name = segment_name

    @property
    def preferences(self):
        """Gets the preferences of this UserDetail.  # noqa: E501


        :return: The preferences of this UserDetail.  # noqa: E501
        :rtype: UserResponsePreferences
        """
        return self._preferences

    @preferences.setter
    def preferences(self, preferences):
        """Sets the preferences of this UserDetail.


        :param preferences: The preferences of this UserDetail.  # noqa: E501
        :type preferences: UserResponsePreferences
        """

        self._preferences = preferences

    @property
    def address(self):
        """Gets the address of this UserDetail.  # noqa: E501


        :return: The address of this UserDetail.  # noqa: E501
        :rtype: UserAddress
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this UserDetail.


        :param address: The address of this UserDetail.  # noqa: E501
        :type address: UserAddress
        """

        self._address = address

    @property
    def phone_number(self):
        """Gets the phone_number of this UserDetail.  # noqa: E501


        :return: The phone_number of this UserDetail.  # noqa: E501
        :rtype: str
        """
        return self._phone_number

    @phone_number.setter
    def phone_number(self, phone_number):
        """Sets the phone_number of this UserDetail.


        :param phone_number: The phone_number of this UserDetail.  # noqa: E501
        :type phone_number: str
        """

        self._phone_number = phone_number

    @property
    def login_name(self):
        """Gets the login_name of this UserDetail.  # noqa: E501

        The login name of the user used for authentication.<br><br><b>Endpoints</b>:<ul><li>POST user/register</li><li>GET user</li></ul>  # noqa: E501

        :return: The login_name of this UserDetail.  # noqa: E501
        :rtype: str
        """
        return self._login_name

    @login_name.setter
    def login_name(self, login_name):
        """Sets the login_name of this UserDetail.

        The login name of the user used for authentication.<br><br><b>Endpoints</b>:<ul><li>POST user/register</li><li>GET user</li></ul>  # noqa: E501

        :param login_name: The login_name of this UserDetail.  # noqa: E501
        :type login_name: str
        """

        self._login_name = login_name

    @property
    def name(self):
        """Gets the name of this UserDetail.  # noqa: E501


        :return: The name of this UserDetail.  # noqa: E501
        :rtype: Name
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this UserDetail.


        :param name: The name of this UserDetail.  # noqa: E501
        :type name: Name
        """

        self._name = name

    @property
    def id(self):
        """Gets the id of this UserDetail.  # noqa: E501

        The unique identifier of a consumer/user in Yodlee system for whom the API services would be accessed for.<br><br><b>Endpoints</b>:<ul><li>POST user/samlLogin</li><li>POST user/register</li><li>GET user</li></ul>  # noqa: E501

        :return: The id of this UserDetail.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this UserDetail.

        The unique identifier of a consumer/user in Yodlee system for whom the API services would be accessed for.<br><br><b>Endpoints</b>:<ul><li>POST user/samlLogin</li><li>POST user/register</li><li>GET user</li></ul>  # noqa: E501

        :param id: The id of this UserDetail.  # noqa: E501
        :type id: int
        """

        self._id = id

    @property
    def role_type(self):
        """Gets the role_type of this UserDetail.  # noqa: E501


        :return: The role_type of this UserDetail.  # noqa: E501
        :rtype: str
        """
        return self._role_type

    @role_type.setter
    def role_type(self, role_type):
        """Sets the role_type of this UserDetail.


        :param role_type: The role_type of this UserDetail.  # noqa: E501
        :type role_type: str
        """
        allowed_values = ["INDIVIDUAL"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and role_type not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `role_type` ({0}), must be one of {1}"  # noqa: E501
                .format(role_type, allowed_values)
            )

        self._role_type = role_type

    @property
    def email(self):
        """Gets the email of this UserDetail.  # noqa: E501

        The email address of the user.<br><br><b>Endpoints</b>:<ul><li>GET user</li></ul>  # noqa: E501

        :return: The email of this UserDetail.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this UserDetail.

        The email address of the user.<br><br><b>Endpoints</b>:<ul><li>GET user</li></ul>  # noqa: E501

        :param email: The email of this UserDetail.  # noqa: E501
        :type email: str
        """

        self._email = email

    @property
    def segment_name(self):
        """Gets the segment_name of this UserDetail.  # noqa: E501


        :return: The segment_name of this UserDetail.  # noqa: E501
        :rtype: str
        """
        return self._segment_name

    @segment_name.setter
    def segment_name(self, segment_name):
        """Sets the segment_name of this UserDetail.


        :param segment_name: The segment_name of this UserDetail.  # noqa: E501
        :type segment_name: str
        """

        self._segment_name = segment_name

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UserDetail):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, UserDetail):
            return True

        return self.to_dict() != other.to_dict()
