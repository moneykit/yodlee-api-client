# coding: utf-8

"""
    Yodlee Core APIs

    This file describes the Yodlee Platform APIs using the swagger notation. You can use this swagger file to generate client side SDKs to the Yodlee Platform APIs for many different programming languages. Yodlee API v1.1 - Overview</a>.<br><br>You will have to set the header before making the API call. The following headers apply to all the APIs:<ul><li>Authorization: This header holds the access token</li> <li> Api-Version: 1.1</li></ul><b>Note</b>: If there are any API-specific headers, they are mentioned explicitly in the respective API's description.  # noqa: E501

    The version of the OpenAPI document: 1.1.0
    Contact: developer@yodlee.com
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from yodlee.configuration import Configuration


class Money(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'amount': 'float',
        'converted_amount': 'float',
        'currency': 'str',
        'converted_currency': 'str'
    }

    attribute_map = {
        'amount': 'amount',
        'converted_amount': 'convertedAmount',
        'currency': 'currency',
        'converted_currency': 'convertedCurrency'
    }

    def __init__(self, amount=None, converted_amount=None, currency=None, converted_currency=None, local_vars_configuration=None):  # noqa: E501
        """Money - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._amount = None
        self._converted_amount = None
        self._currency = None
        self._converted_currency = None
        self.discriminator = None

        self.amount = amount
        if converted_amount is not None:
            self.converted_amount = converted_amount
        if currency is not None:
            self.currency = currency
        if converted_currency is not None:
            self.converted_currency = converted_currency

    @property
    def amount(self):
        """Gets the amount of this Money.  # noqa: E501


        :return: The amount of this Money.  # noqa: E501
        :rtype: float
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this Money.


        :param amount: The amount of this Money.  # noqa: E501
        :type amount: float
        """
        if self.local_vars_configuration.client_side_validation and amount is None:  # noqa: E501
            raise ValueError("Invalid value for `amount`, must not be `None`")  # noqa: E501

        self._amount = amount

    @property
    def converted_amount(self):
        """Gets the converted_amount of this Money.  # noqa: E501


        :return: The converted_amount of this Money.  # noqa: E501
        :rtype: float
        """
        return self._converted_amount

    @converted_amount.setter
    def converted_amount(self, converted_amount):
        """Sets the converted_amount of this Money.


        :param converted_amount: The converted_amount of this Money.  # noqa: E501
        :type converted_amount: float
        """

        self._converted_amount = converted_amount

    @property
    def currency(self):
        """Gets the currency of this Money.  # noqa: E501


        :return: The currency of this Money.  # noqa: E501
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this Money.


        :param currency: The currency of this Money.  # noqa: E501
        :type currency: str
        """
        allowed_values = ["USD", "AUD", "BRL", "CAD", "EUR", "GBP", "HKD", "IDR", "INR", "JPY", "NZD", "SGD", "ZAR", "CNY", "VND", "MYR", "CHF", "AED", "AFA", "ALL", "AMD", "ANG", "AOA", "ARS", "AWG", "AZM", "BAM", "BBD", "BDT", "BGL", "BHD", "BIF", "BMD", "BND", "BOB", "BSD", "BTN", "BWP", "BYR", "BZD", "CDF", "CLP", "COP", "CRC", "CUP", "CVE", "CYP", "CZK", "DJF", "DKK", "DOP", "DZD", "EEK", "EGP", "ERN", "ETB", "FJD", "FKP", "GEL", "GGP", "GHC", "GIP", "GMD", "GNF", "GTQ", "GYD", "HNL", "HRK", "HTG", "HUF", "ILS", "IMP", "IQD", "IRR", "ISK", "JEP", "JMD", "JOD", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LKR", "LRD", "LSL", "LTL", "LVL", "LYD", "MAD", "MDL", "MGF", "MKD", "MMK", "MNT", "MOP", "MRO", "MTL", "MUR", "MVR", "MWK", "MXN", "MZM", "NAD", "NGN", "NIO", "NOK", "NPR", "OMR", "PAB", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "ROL", "RUR", "RWF", "SAR", "SBD", "SCR", "SDD", "SEK", "SHP", "SIT", "SKK", "SLL", "SOS", "SPL", "SRG", "STD", "SVC", "SYP", "SZL", "THB", "TJR", "TMM", "TND", "TOP", "TRL", "TTD", "TVD", "TWD", "TZS", "UAH", "UGX", "UYU", "UZS", "VEB", "VUV", "WST", "XAF", "XAG", "XAU", "XCD", "XDR", "XOF", "XPD", "XPF", "XPT", "YER", "YUM", "ZMK", "ZWD", "ADP", "ATS", "BEF", "BUK", "CSD", "CSK", "DDM", "DEM", "ECS", "ESP", "FIM", "GRD", "GWP", "IEP", "ITL", "LUF", "MLF", "NLG", "PTE", "SUR", "TPE", "UAK", "XBA", "XBB", "XBC", "XBD", "XEU", "XFO", "XFU", "XGF", "XMK", "XRM", "XTS", "YDD", "YUD", "ZRN", "TJS", "RON", "BGN", "BTC", "XBT", "CNH", "RUB", "TRY", "GHS", "TMT", "ZMW", "VEF", "SSP", "ALK"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and currency not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `currency` ({0}), must be one of {1}"  # noqa: E501
                .format(currency, allowed_values)
            )

        self._currency = currency

    @property
    def converted_currency(self):
        """Gets the converted_currency of this Money.  # noqa: E501


        :return: The converted_currency of this Money.  # noqa: E501
        :rtype: str
        """
        return self._converted_currency

    @converted_currency.setter
    def converted_currency(self, converted_currency):
        """Sets the converted_currency of this Money.


        :param converted_currency: The converted_currency of this Money.  # noqa: E501
        :type converted_currency: str
        """
        allowed_values = ["USD", "AUD", "BRL", "CAD", "EUR", "GBP", "HKD", "IDR", "INR", "JPY", "NZD", "SGD", "ZAR", "CNY", "VND", "MYR", "CHF", "AED", "AFA", "ALL", "AMD", "ANG", "AOA", "ARS", "AWG", "AZM", "BAM", "BBD", "BDT", "BGL", "BHD", "BIF", "BMD", "BND", "BOB", "BSD", "BTN", "BWP", "BYR", "BZD", "CDF", "CLP", "COP", "CRC", "CUP", "CVE", "CYP", "CZK", "DJF", "DKK", "DOP", "DZD", "EEK", "EGP", "ERN", "ETB", "FJD", "FKP", "GEL", "GGP", "GHC", "GIP", "GMD", "GNF", "GTQ", "GYD", "HNL", "HRK", "HTG", "HUF", "ILS", "IMP", "IQD", "IRR", "ISK", "JEP", "JMD", "JOD", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LKR", "LRD", "LSL", "LTL", "LVL", "LYD", "MAD", "MDL", "MGF", "MKD", "MMK", "MNT", "MOP", "MRO", "MTL", "MUR", "MVR", "MWK", "MXN", "MZM", "NAD", "NGN", "NIO", "NOK", "NPR", "OMR", "PAB", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "ROL", "RUR", "RWF", "SAR", "SBD", "SCR", "SDD", "SEK", "SHP", "SIT", "SKK", "SLL", "SOS", "SPL", "SRG", "STD", "SVC", "SYP", "SZL", "THB", "TJR", "TMM", "TND", "TOP", "TRL", "TTD", "TVD", "TWD", "TZS", "UAH", "UGX", "UYU", "UZS", "VEB", "VUV", "WST", "XAF", "XAG", "XAU", "XCD", "XDR", "XOF", "XPD", "XPF", "XPT", "YER", "YUM", "ZMK", "ZWD", "ADP", "ATS", "BEF", "BUK", "CSD", "CSK", "DDM", "DEM", "ECS", "ESP", "FIM", "GRD", "GWP", "IEP", "ITL", "LUF", "MLF", "NLG", "PTE", "SUR", "TPE", "UAK", "XBA", "XBB", "XBC", "XBD", "XEU", "XFO", "XFU", "XGF", "XMK", "XRM", "XTS", "YDD", "YUD", "ZRN", "TJS", "RON", "BGN", "BTC", "XBT", "CNH", "RUB", "TRY", "GHS", "TMT", "ZMW", "VEF", "SSP", "ALK"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and converted_currency not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `converted_currency` ({0}), must be one of {1}"  # noqa: E501
                .format(converted_currency, allowed_values)
            )

        self._converted_currency = converted_currency

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Money):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Money):
            return True

        return self.to_dict() != other.to_dict()
