# coding: utf-8

"""
    Yodlee Core APIs

    This file describes the Yodlee Platform APIs using the swagger notation. You can use this swagger file to generate client side SDKs to the Yodlee Platform APIs for many different programming languages. Yodlee API v1.1 - Overview</a>.<br><br>You will have to set the header before making the API call. The following headers apply to all the APIs:<ul><li>Authorization: This header holds the access token</li> <li> Api-Version: 1.1</li></ul><b>Note</b>: If there are any API-specific headers, they are mentioned explicitly in the respective API's description.  # noqa: E501

    The version of the OpenAPI document: 1.1.0
    Contact: developer@yodlee.com
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from yodlee.configuration import Configuration


class TransactionCategoryRequest(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'parent_category_id': 'int',
        'source': 'str',
        'category_name': 'str'
    }

    attribute_map = {
        'parent_category_id': 'parentCategoryId',
        'source': 'source',
        'category_name': 'categoryName'
    }

    def __init__(self, parent_category_id=None, source=None, category_name=None, local_vars_configuration=None):  # noqa: E501
        """TransactionCategoryRequest - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._parent_category_id = None
        self._source = None
        self._category_name = None
        self.discriminator = None

        self.parent_category_id = parent_category_id
        if source is not None:
            self.source = source
        if category_name is not None:
            self.category_name = category_name

    @property
    def parent_category_id(self):
        """Gets the parent_category_id of this TransactionCategoryRequest.  # noqa: E501


        :return: The parent_category_id of this TransactionCategoryRequest.  # noqa: E501
        :rtype: int
        """
        return self._parent_category_id

    @parent_category_id.setter
    def parent_category_id(self, parent_category_id):
        """Sets the parent_category_id of this TransactionCategoryRequest.


        :param parent_category_id: The parent_category_id of this TransactionCategoryRequest.  # noqa: E501
        :type parent_category_id: int
        """
        if self.local_vars_configuration.client_side_validation and parent_category_id is None:  # noqa: E501
            raise ValueError("Invalid value for `parent_category_id`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                parent_category_id is not None and parent_category_id < 1):  # noqa: E501
            raise ValueError("Invalid value for `parent_category_id`, must be a value greater than or equal to `1`")  # noqa: E501

        self._parent_category_id = parent_category_id

    @property
    def source(self):
        """Gets the source of this TransactionCategoryRequest.  # noqa: E501


        :return: The source of this TransactionCategoryRequest.  # noqa: E501
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this TransactionCategoryRequest.


        :param source: The source of this TransactionCategoryRequest.  # noqa: E501
        :type source: str
        """

        self._source = source

    @property
    def category_name(self):
        """Gets the category_name of this TransactionCategoryRequest.  # noqa: E501


        :return: The category_name of this TransactionCategoryRequest.  # noqa: E501
        :rtype: str
        """
        return self._category_name

    @category_name.setter
    def category_name(self, category_name):
        """Sets the category_name of this TransactionCategoryRequest.


        :param category_name: The category_name of this TransactionCategoryRequest.  # noqa: E501
        :type category_name: str
        """
        if (self.local_vars_configuration.client_side_validation and
                category_name is not None and len(category_name) > 50):
            raise ValueError("Invalid value for `category_name`, length must be less than or equal to `50`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                category_name is not None and len(category_name) < 1):
            raise ValueError("Invalid value for `category_name`, length must be greater than or equal to `1`")  # noqa: E501

        self._category_name = category_name

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TransactionCategoryRequest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, TransactionCategoryRequest):
            return True

        return self.to_dict() != other.to_dict()
