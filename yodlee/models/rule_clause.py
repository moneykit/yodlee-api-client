# coding: utf-8

"""
    Yodlee Core APIs

    This file describes the Yodlee Platform APIs using the swagger notation. You can use this swagger file to generate client side SDKs to the Yodlee Platform APIs for many different programming languages. Yodlee API v1.1 - Overview</a>.<br><br>You will have to set the header before making the API call. The following headers apply to all the APIs:<ul><li>Authorization: This header holds the access token</li> <li> Api-Version: 1.1</li></ul><b>Note</b>: If there are any API-specific headers, they are mentioned explicitly in the respective API's description.  # noqa: E501

    The version of the OpenAPI document: 1.1.0
    Contact: developer@yodlee.com
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from yodlee.configuration import Configuration


class RuleClause(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'field': 'str',
        'user_defined_rule_id': 'int',
        'field_value': 'str',
        'operation': 'str',
        'rule_clause_id': 'int'
    }

    attribute_map = {
        'field': 'field',
        'user_defined_rule_id': 'userDefinedRuleId',
        'field_value': 'fieldValue',
        'operation': 'operation',
        'rule_clause_id': 'ruleClauseId'
    }

    def __init__(self, field=None, user_defined_rule_id=None, field_value=None, operation=None, rule_clause_id=None, local_vars_configuration=None):  # noqa: E501
        """RuleClause - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._field = None
        self._user_defined_rule_id = None
        self._field_value = None
        self._operation = None
        self._rule_clause_id = None
        self.discriminator = None

        if field is not None:
            self.field = field
        if user_defined_rule_id is not None:
            self.user_defined_rule_id = user_defined_rule_id
        if field_value is not None:
            self.field_value = field_value
        if operation is not None:
            self.operation = operation
        if rule_clause_id is not None:
            self.rule_clause_id = rule_clause_id

    @property
    def field(self):
        """Gets the field of this RuleClause.  # noqa: E501

        Field for which the clause is created.<br><br><br><b>Valid Values</b>:amount,description<b>Applicable containers</b>: creditCard, investment, insurance, loan<br>  # noqa: E501

        :return: The field of this RuleClause.  # noqa: E501
        :rtype: str
        """
        return self._field

    @field.setter
    def field(self, field):
        """Sets the field of this RuleClause.

        Field for which the clause is created.<br><br><br><b>Valid Values</b>:amount,description<b>Applicable containers</b>: creditCard, investment, insurance, loan<br>  # noqa: E501

        :param field: The field of this RuleClause.  # noqa: E501
        :type field: str
        """
        allowed_values = ["amount", "description"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and field not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `field` ({0}), must be one of {1}"  # noqa: E501
                .format(field, allowed_values)
            )

        self._field = field

    @property
    def user_defined_rule_id(self):
        """Gets the user_defined_rule_id of this RuleClause.  # noqa: E501

        Unique identifier generated for every rule the user creates.<br><br><b>Applicable containers</b>: creditCard, investment, insurance, loan<br>  # noqa: E501

        :return: The user_defined_rule_id of this RuleClause.  # noqa: E501
        :rtype: int
        """
        return self._user_defined_rule_id

    @user_defined_rule_id.setter
    def user_defined_rule_id(self, user_defined_rule_id):
        """Sets the user_defined_rule_id of this RuleClause.

        Unique identifier generated for every rule the user creates.<br><br><b>Applicable containers</b>: creditCard, investment, insurance, loan<br>  # noqa: E501

        :param user_defined_rule_id: The user_defined_rule_id of this RuleClause.  # noqa: E501
        :type user_defined_rule_id: int
        """

        self._user_defined_rule_id = user_defined_rule_id

    @property
    def field_value(self):
        """Gets the field_value of this RuleClause.  # noqa: E501

        The value would be the amount value in case of amount based rule clause or the string value in case of description based rule clause.<br><br><b>Applicable containers</b>: creditCard, investment, insurance, loan<br>  # noqa: E501

        :return: The field_value of this RuleClause.  # noqa: E501
        :rtype: str
        """
        return self._field_value

    @field_value.setter
    def field_value(self, field_value):
        """Sets the field_value of this RuleClause.

        The value would be the amount value in case of amount based rule clause or the string value in case of description based rule clause.<br><br><b>Applicable containers</b>: creditCard, investment, insurance, loan<br>  # noqa: E501

        :param field_value: The field_value of this RuleClause.  # noqa: E501
        :type field_value: str
        """

        self._field_value = field_value

    @property
    def operation(self):
        """Gets the operation of this RuleClause.  # noqa: E501

        Operation for which the clause is created.<br><br><b>Applicable containers</b>: creditCard, investment, insurance, loan<br>  # noqa: E501

        :return: The operation of this RuleClause.  # noqa: E501
        :rtype: str
        """
        return self._operation

    @operation.setter
    def operation(self, operation):
        """Sets the operation of this RuleClause.

        Operation for which the clause is created.<br><br><b>Applicable containers</b>: creditCard, investment, insurance, loan<br>  # noqa: E501

        :param operation: The operation of this RuleClause.  # noqa: E501
        :type operation: str
        """
        allowed_values = ["numberEquals", "numberLessThan", "numberLessThanEquals", "numberGreaterThan", "numberGreaterThanEquals", "stringEquals", "stringContains"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and operation not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `operation` ({0}), must be one of {1}"  # noqa: E501
                .format(operation, allowed_values)
            )

        self._operation = operation

    @property
    def rule_clause_id(self):
        """Gets the rule_clause_id of this RuleClause.  # noqa: E501

        Unique identifier generated for the rule clause.<br><br><b>Applicable containers</b>: creditCard, investment, insurance, loan<br>  # noqa: E501

        :return: The rule_clause_id of this RuleClause.  # noqa: E501
        :rtype: int
        """
        return self._rule_clause_id

    @rule_clause_id.setter
    def rule_clause_id(self, rule_clause_id):
        """Sets the rule_clause_id of this RuleClause.

        Unique identifier generated for the rule clause.<br><br><b>Applicable containers</b>: creditCard, investment, insurance, loan<br>  # noqa: E501

        :param rule_clause_id: The rule_clause_id of this RuleClause.  # noqa: E501
        :type rule_clause_id: int
        """

        self._rule_clause_id = rule_clause_id

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RuleClause):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, RuleClause):
            return True

        return self.to_dict() != other.to_dict()
