# coding: utf-8

"""
    Yodlee Core APIs

    This file describes the Yodlee Platform APIs using the swagger notation. You can use this swagger file to generate client side SDKs to the Yodlee Platform APIs for many different programming languages. Yodlee API v1.1 - Overview</a>.<br><br>You will have to set the header before making the API call. The following headers apply to all the APIs:<ul><li>Authorization: This header holds the access token</li> <li> Api-Version: 1.1</li></ul><b>Note</b>: If there are any API-specific headers, they are mentioned explicitly in the respective API's description.  # noqa: E501

    The version of the OpenAPI document: 1.1.0
    Contact: developer@yodlee.com
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from yodlee.configuration import Configuration


class PaymentProfile(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'identifier': 'PaymentIdentifier',
        'address': 'list[AccountAddress]',
        'payment_bank_transfer_code': 'PaymentBankTransferCode'
    }

    attribute_map = {
        'identifier': 'identifier',
        'address': 'address',
        'payment_bank_transfer_code': 'paymentBankTransferCode'
    }

    def __init__(self, identifier=None, address=None, payment_bank_transfer_code=None, local_vars_configuration=None):  # noqa: E501
        """PaymentProfile - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._identifier = None
        self._address = None
        self._payment_bank_transfer_code = None
        self.discriminator = None

        if identifier is not None:
            self.identifier = identifier
        if address is not None:
            self.address = address
        if payment_bank_transfer_code is not None:
            self.payment_bank_transfer_code = payment_bank_transfer_code

    @property
    def identifier(self):
        """Gets the identifier of this PaymentProfile.  # noqa: E501


        :return: The identifier of this PaymentProfile.  # noqa: E501
        :rtype: PaymentIdentifier
        """
        return self._identifier

    @identifier.setter
    def identifier(self, identifier):
        """Sets the identifier of this PaymentProfile.


        :param identifier: The identifier of this PaymentProfile.  # noqa: E501
        :type identifier: PaymentIdentifier
        """

        self._identifier = identifier

    @property
    def address(self):
        """Gets the address of this PaymentProfile.  # noqa: E501

        The address of the lender to which the monthly payments or the loan payoff amount should be paid. <br><b>Additional Details:</b>The address field applies only to the student loan account type.<br><b>Account Type</b>: Aggregated<br><b>Applicable containers</b>: loan<br><b>Endpoints</b>:<br><ul><li>GET accounts</li><li>GET accounts/{accountId}</li></ul>  # noqa: E501

        :return: The address of this PaymentProfile.  # noqa: E501
        :rtype: list[AccountAddress]
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this PaymentProfile.

        The address of the lender to which the monthly payments or the loan payoff amount should be paid. <br><b>Additional Details:</b>The address field applies only to the student loan account type.<br><b>Account Type</b>: Aggregated<br><b>Applicable containers</b>: loan<br><b>Endpoints</b>:<br><ul><li>GET accounts</li><li>GET accounts/{accountId}</li></ul>  # noqa: E501

        :param address: The address of this PaymentProfile.  # noqa: E501
        :type address: list[AccountAddress]
        """

        self._address = address

    @property
    def payment_bank_transfer_code(self):
        """Gets the payment_bank_transfer_code of this PaymentProfile.  # noqa: E501


        :return: The payment_bank_transfer_code of this PaymentProfile.  # noqa: E501
        :rtype: PaymentBankTransferCode
        """
        return self._payment_bank_transfer_code

    @payment_bank_transfer_code.setter
    def payment_bank_transfer_code(self, payment_bank_transfer_code):
        """Sets the payment_bank_transfer_code of this PaymentProfile.


        :param payment_bank_transfer_code: The payment_bank_transfer_code of this PaymentProfile.  # noqa: E501
        :type payment_bank_transfer_code: PaymentBankTransferCode
        """

        self._payment_bank_transfer_code = payment_bank_transfer_code

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PaymentProfile):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, PaymentProfile):
            return True

        return self.to_dict() != other.to_dict()
