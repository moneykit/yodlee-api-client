# coding: utf-8

"""
    Yodlee Core APIs

    This file describes the Yodlee Platform APIs using the swagger notation. You can use this swagger file to generate client side SDKs to the Yodlee Platform APIs for many different programming languages. Yodlee API v1.1 - Overview</a>.<br><br>You will have to set the header before making the API call. The following headers apply to all the APIs:<ul><li>Authorization: This header holds the access token</li> <li> Api-Version: 1.1</li></ul><b>Note</b>: If there are any API-specific headers, they are mentioned explicitly in the respective API's description.  # noqa: E501

    The version of the OpenAPI document: 1.1.0
    Contact: developer@yodlee.com
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from yodlee.configuration import Configuration


class ProviderAccount(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'preferences': 'ProviderAccountPreferences',
        'oauth_migration_status': 'str',
        'is_manual': 'bool',
        'is_real_time_mfa': 'bool',
        'last_updated': 'str',
        'consent_id': 'int',
        'created_date': 'str',
        'aggregation_source': 'str',
        'provider_id': 'int',
        'request_id': 'str',
        'id': 'int',
        'dataset': 'list[AccountDataset]',
        'status': 'str'
    }

    attribute_map = {
        'preferences': 'preferences',
        'oauth_migration_status': 'oauthMigrationStatus',
        'is_manual': 'isManual',
        'is_real_time_mfa': 'isRealTimeMFA',
        'last_updated': 'lastUpdated',
        'consent_id': 'consentId',
        'created_date': 'createdDate',
        'aggregation_source': 'aggregationSource',
        'provider_id': 'providerId',
        'request_id': 'requestId',
        'id': 'id',
        'dataset': 'dataset',
        'status': 'status'
    }

    def __init__(self, preferences=None, oauth_migration_status=None, is_manual=None, is_real_time_mfa=None, last_updated=None, consent_id=None, created_date=None, aggregation_source=None, provider_id=None, request_id=None, id=None, dataset=None, status=None, local_vars_configuration=None):  # noqa: E501
        """ProviderAccount - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._preferences = None
        self._oauth_migration_status = None
        self._is_manual = None
        self._is_real_time_mfa = None
        self._last_updated = None
        self._consent_id = None
        self._created_date = None
        self._aggregation_source = None
        self._provider_id = None
        self._request_id = None
        self._id = None
        self._dataset = None
        self._status = None
        self.discriminator = None

        if preferences is not None:
            self.preferences = preferences
        if oauth_migration_status is not None:
            self.oauth_migration_status = oauth_migration_status
        if is_manual is not None:
            self.is_manual = is_manual
        if is_real_time_mfa is not None:
            self.is_real_time_mfa = is_real_time_mfa
        if last_updated is not None:
            self.last_updated = last_updated
        if consent_id is not None:
            self.consent_id = consent_id
        if created_date is not None:
            self.created_date = created_date
        if aggregation_source is not None:
            self.aggregation_source = aggregation_source
        if provider_id is not None:
            self.provider_id = provider_id
        if request_id is not None:
            self.request_id = request_id
        if id is not None:
            self.id = id
        if dataset is not None:
            self.dataset = dataset
        if status is not None:
            self.status = status

    @property
    def preferences(self):
        """Gets the preferences of this ProviderAccount.  # noqa: E501


        :return: The preferences of this ProviderAccount.  # noqa: E501
        :rtype: ProviderAccountPreferences
        """
        return self._preferences

    @preferences.setter
    def preferences(self, preferences):
        """Sets the preferences of this ProviderAccount.


        :param preferences: The preferences of this ProviderAccount.  # noqa: E501
        :type preferences: ProviderAccountPreferences
        """

        self._preferences = preferences

    @property
    def oauth_migration_status(self):
        """Gets the oauth_migration_status of this ProviderAccount.  # noqa: E501

        Indicates the migration status of the provider account from screen-scraping provider to the Open Banking provider. <br><br><b>Endpoints</b>:<ul><li>GET providerAccounts</li><li>GET providerAccounts/{providerAccountId}</li><li>PUT providerAccounts/{providerAccountId}</li><li>GET dataExtracts/userData</li></ul>  # noqa: E501

        :return: The oauth_migration_status of this ProviderAccount.  # noqa: E501
        :rtype: str
        """
        return self._oauth_migration_status

    @oauth_migration_status.setter
    def oauth_migration_status(self, oauth_migration_status):
        """Sets the oauth_migration_status of this ProviderAccount.

        Indicates the migration status of the provider account from screen-scraping provider to the Open Banking provider. <br><br><b>Endpoints</b>:<ul><li>GET providerAccounts</li><li>GET providerAccounts/{providerAccountId}</li><li>PUT providerAccounts/{providerAccountId}</li><li>GET dataExtracts/userData</li></ul>  # noqa: E501

        :param oauth_migration_status: The oauth_migration_status of this ProviderAccount.  # noqa: E501
        :type oauth_migration_status: str
        """
        allowed_values = ["IN_PROGRESS", "TO_BE_MIGRATED", "COMPLETED", "MIGRATED"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and oauth_migration_status not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `oauth_migration_status` ({0}), must be one of {1}"  # noqa: E501
                .format(oauth_migration_status, allowed_values)
            )

        self._oauth_migration_status = oauth_migration_status

    @property
    def is_manual(self):
        """Gets the is_manual of this ProviderAccount.  # noqa: E501

        Indicates whether account is a manual or aggregated provider account.<br><br><b>Endpoints</b>:<ul><li>GET providerAccounts</li><li>POST providerAccounts</li><li>PUT providerAccounts/{providerAccountId}</li><li>GET providerAccounts/{providerAccountId}</li><li>GET dataExtracts/userData</li></ul>  # noqa: E501

        :return: The is_manual of this ProviderAccount.  # noqa: E501
        :rtype: bool
        """
        return self._is_manual

    @is_manual.setter
    def is_manual(self, is_manual):
        """Sets the is_manual of this ProviderAccount.

        Indicates whether account is a manual or aggregated provider account.<br><br><b>Endpoints</b>:<ul><li>GET providerAccounts</li><li>POST providerAccounts</li><li>PUT providerAccounts/{providerAccountId}</li><li>GET providerAccounts/{providerAccountId}</li><li>GET dataExtracts/userData</li></ul>  # noqa: E501

        :param is_manual: The is_manual of this ProviderAccount.  # noqa: E501
        :type is_manual: bool
        """

        self._is_manual = is_manual

    @property
    def is_real_time_mfa(self):
        """Gets the is_real_time_mfa of this ProviderAccount.  # noqa: E501

        Attribute to specify whether the user has to input(credentials/MFA) for refreshing an account<br><br><b>Endpoints</b>:<ul><li>GET providerAccounts</li><li>GET providerAccounts/{providerAccountId}</li>  # noqa: E501

        :return: The is_real_time_mfa of this ProviderAccount.  # noqa: E501
        :rtype: bool
        """
        return self._is_real_time_mfa

    @is_real_time_mfa.setter
    def is_real_time_mfa(self, is_real_time_mfa):
        """Sets the is_real_time_mfa of this ProviderAccount.

        Attribute to specify whether the user has to input(credentials/MFA) for refreshing an account<br><br><b>Endpoints</b>:<ul><li>GET providerAccounts</li><li>GET providerAccounts/{providerAccountId}</li>  # noqa: E501

        :param is_real_time_mfa: The is_real_time_mfa of this ProviderAccount.  # noqa: E501
        :type is_real_time_mfa: bool
        """

        self._is_real_time_mfa = is_real_time_mfa

    @property
    def last_updated(self):
        """Gets the last_updated of this ProviderAccount.  # noqa: E501

        Indicate when the providerAccount is last updated successfully.<br><br><b>Account Type</b>: Aggregated<br><b>Endpoints</b>:<ul><li>GET dataExtracts/userData</li></ul>  # noqa: E501

        :return: The last_updated of this ProviderAccount.  # noqa: E501
        :rtype: str
        """
        return self._last_updated

    @last_updated.setter
    def last_updated(self, last_updated):
        """Sets the last_updated of this ProviderAccount.

        Indicate when the providerAccount is last updated successfully.<br><br><b>Account Type</b>: Aggregated<br><b>Endpoints</b>:<ul><li>GET dataExtracts/userData</li></ul>  # noqa: E501

        :param last_updated: The last_updated of this ProviderAccount.  # noqa: E501
        :type last_updated: str
        """

        self._last_updated = last_updated

    @property
    def consent_id(self):
        """Gets the consent_id of this ProviderAccount.  # noqa: E501

        Consent Id generated through POST Consent.<br><br><b>Endpoints</b>:<ul><li>GET providerAccounts</li><li>POST providerAccounts</li><li>PUT providerAccounts/{providerAccountId}</li><li>GET providerAccounts/{providerAccountId}</li></ul>  # noqa: E501

        :return: The consent_id of this ProviderAccount.  # noqa: E501
        :rtype: int
        """
        return self._consent_id

    @consent_id.setter
    def consent_id(self, consent_id):
        """Sets the consent_id of this ProviderAccount.

        Consent Id generated through POST Consent.<br><br><b>Endpoints</b>:<ul><li>GET providerAccounts</li><li>POST providerAccounts</li><li>PUT providerAccounts/{providerAccountId}</li><li>GET providerAccounts/{providerAccountId}</li></ul>  # noqa: E501

        :param consent_id: The consent_id of this ProviderAccount.  # noqa: E501
        :type consent_id: int
        """

        self._consent_id = consent_id

    @property
    def created_date(self):
        """Gets the created_date of this ProviderAccount.  # noqa: E501

        The date on when the provider account is created in the system.<br><br><b>Endpoints</b>:<ul><li>GET providerAccounts</li><li>POST providerAccounts</li><li>PUT providerAccounts/{providerAccountId}</li><li>GET providerAccounts/{providerAccountId}</li></ul>  # noqa: E501

        :return: The created_date of this ProviderAccount.  # noqa: E501
        :rtype: str
        """
        return self._created_date

    @created_date.setter
    def created_date(self, created_date):
        """Sets the created_date of this ProviderAccount.

        The date on when the provider account is created in the system.<br><br><b>Endpoints</b>:<ul><li>GET providerAccounts</li><li>POST providerAccounts</li><li>PUT providerAccounts/{providerAccountId}</li><li>GET providerAccounts/{providerAccountId}</li></ul>  # noqa: E501

        :param created_date: The created_date of this ProviderAccount.  # noqa: E501
        :type created_date: str
        """

        self._created_date = created_date

    @property
    def aggregation_source(self):
        """Gets the aggregation_source of this ProviderAccount.  # noqa: E501

        The source through which the providerAccount is added in the system.<br><br><b>Endpoints</b>:<ul><li>GET providerAccounts</li><li>POST providerAccounts</li><li>PUT providerAccounts/{providerAccountId}</li><li>GET providerAccounts/{providerAccountId}</li><li>GET dataExtracts/userData</li></ul><b>Applicable Values</b><br>  # noqa: E501

        :return: The aggregation_source of this ProviderAccount.  # noqa: E501
        :rtype: str
        """
        return self._aggregation_source

    @aggregation_source.setter
    def aggregation_source(self, aggregation_source):
        """Sets the aggregation_source of this ProviderAccount.

        The source through which the providerAccount is added in the system.<br><br><b>Endpoints</b>:<ul><li>GET providerAccounts</li><li>POST providerAccounts</li><li>PUT providerAccounts/{providerAccountId}</li><li>GET providerAccounts/{providerAccountId}</li><li>GET dataExtracts/userData</li></ul><b>Applicable Values</b><br>  # noqa: E501

        :param aggregation_source: The aggregation_source of this ProviderAccount.  # noqa: E501
        :type aggregation_source: str
        """
        allowed_values = ["SYSTEM", "USER"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and aggregation_source not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `aggregation_source` ({0}), must be one of {1}"  # noqa: E501
                .format(aggregation_source, allowed_values)
            )

        self._aggregation_source = aggregation_source

    @property
    def provider_id(self):
        """Gets the provider_id of this ProviderAccount.  # noqa: E501

        Unique identifier for the provider resource. This denotes the provider for which the provider account id is generated by the user.<br><br><b>Endpoints</b>:<ul><li>GET providerAccounts</li><li>POST providerAccounts</li><li>PUT providerAccounts/{providerAccountId}</li><li>GET providerAccounts/{providerAccountId}</li><li>GET dataExtracts/userData</li></ul>  # noqa: E501

        :return: The provider_id of this ProviderAccount.  # noqa: E501
        :rtype: int
        """
        return self._provider_id

    @provider_id.setter
    def provider_id(self, provider_id):
        """Sets the provider_id of this ProviderAccount.

        Unique identifier for the provider resource. This denotes the provider for which the provider account id is generated by the user.<br><br><b>Endpoints</b>:<ul><li>GET providerAccounts</li><li>POST providerAccounts</li><li>PUT providerAccounts/{providerAccountId}</li><li>GET providerAccounts/{providerAccountId}</li><li>GET dataExtracts/userData</li></ul>  # noqa: E501

        :param provider_id: The provider_id of this ProviderAccount.  # noqa: E501
        :type provider_id: int
        """

        self._provider_id = provider_id

    @property
    def request_id(self):
        """Gets the request_id of this ProviderAccount.  # noqa: E501

        Unique id generated to indicate the request.<br><br><b>Endpoints</b>:<ul><li>GET providerAccounts</li><li>POST providerAccounts</li><li>PUT providerAccounts/{providerAccountId}</li><li>GET providerAccounts/{providerAccountId}</li></ul>  # noqa: E501

        :return: The request_id of this ProviderAccount.  # noqa: E501
        :rtype: str
        """
        return self._request_id

    @request_id.setter
    def request_id(self, request_id):
        """Sets the request_id of this ProviderAccount.

        Unique id generated to indicate the request.<br><br><b>Endpoints</b>:<ul><li>GET providerAccounts</li><li>POST providerAccounts</li><li>PUT providerAccounts/{providerAccountId}</li><li>GET providerAccounts/{providerAccountId}</li></ul>  # noqa: E501

        :param request_id: The request_id of this ProviderAccount.  # noqa: E501
        :type request_id: str
        """

        self._request_id = request_id

    @property
    def id(self):
        """Gets the id of this ProviderAccount.  # noqa: E501

        Unique identifier for the provider account resource. This is created during account addition.<br><br><b>Endpoints</b>:<ul><li>GET providerAccounts</li><li>POST providerAccounts</li><li>PUT providerAccounts/{providerAccountId}</li><li>GET providerAccounts/{providerAccountId}</li><li>GET dataExtracts/userData</li></ul>  # noqa: E501

        :return: The id of this ProviderAccount.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ProviderAccount.

        Unique identifier for the provider account resource. This is created during account addition.<br><br><b>Endpoints</b>:<ul><li>GET providerAccounts</li><li>POST providerAccounts</li><li>PUT providerAccounts/{providerAccountId}</li><li>GET providerAccounts/{providerAccountId}</li><li>GET dataExtracts/userData</li></ul>  # noqa: E501

        :param id: The id of this ProviderAccount.  # noqa: E501
        :type id: int
        """

        self._id = id

    @property
    def dataset(self):
        """Gets the dataset of this ProviderAccount.  # noqa: E501

        Logical grouping of dataset attributes into datasets such as Basic Aggregation Data, Account Profile and Documents.<br><br><b>Endpoints</b>:<ul><li>GET providerAccounts</li><li>POST providerAccounts</li><li>PUT providerAccounts/{providerAccountId}</li><li>GET providerAccounts/{providerAccountId}</li><li>GET dataExtracts/userData</li></ul>  # noqa: E501

        :return: The dataset of this ProviderAccount.  # noqa: E501
        :rtype: list[AccountDataset]
        """
        return self._dataset

    @dataset.setter
    def dataset(self, dataset):
        """Sets the dataset of this ProviderAccount.

        Logical grouping of dataset attributes into datasets such as Basic Aggregation Data, Account Profile and Documents.<br><br><b>Endpoints</b>:<ul><li>GET providerAccounts</li><li>POST providerAccounts</li><li>PUT providerAccounts/{providerAccountId}</li><li>GET providerAccounts/{providerAccountId}</li><li>GET dataExtracts/userData</li></ul>  # noqa: E501

        :param dataset: The dataset of this ProviderAccount.  # noqa: E501
        :type dataset: list[AccountDataset]
        """

        self._dataset = dataset

    @property
    def status(self):
        """Gets the status of this ProviderAccount.  # noqa: E501

        The status of last update attempted for the account. <br><br><b>Endpoints</b>:<ul><li>GET providerAccounts</li><li>POST providerAccounts</li><li>PUT providerAccounts/{providerAccountId}</li><li>GET providerAccounts/{providerAccountId}</li><li>GET dataExtracts/userData</li></ul><b>Applicable Values</b><br>  # noqa: E501

        :return: The status of this ProviderAccount.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ProviderAccount.

        The status of last update attempted for the account. <br><br><b>Endpoints</b>:<ul><li>GET providerAccounts</li><li>POST providerAccounts</li><li>PUT providerAccounts/{providerAccountId}</li><li>GET providerAccounts/{providerAccountId}</li><li>GET dataExtracts/userData</li></ul><b>Applicable Values</b><br>  # noqa: E501

        :param status: The status of this ProviderAccount.  # noqa: E501
        :type status: str
        """
        allowed_values = ["LOGIN_IN_PROGRESS", "USER_INPUT_REQUIRED", "IN_PROGRESS", "PARTIAL_SUCCESS", "SUCCESS", "FAILED", "MIGRATION_IN_PROGRESS", "DATA_RETRIEVAL_FAILED"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and status not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ProviderAccount):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ProviderAccount):
            return True

        return self.to_dict() != other.to_dict()
