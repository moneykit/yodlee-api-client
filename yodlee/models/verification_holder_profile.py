# coding: utf-8

"""
    Yodlee Core APIs

    This file describes the Yodlee Platform APIs using the swagger notation. You can use this swagger file to generate client side SDKs to the Yodlee Platform APIs for many different programming languages. Yodlee API v1.1 - Overview</a>.<br><br>You will have to set the header before making the API call. The following headers apply to all the APIs:<ul><li>Authorization: This header holds the access token</li> <li> Api-Version: 1.1</li></ul><b>Note</b>: If there are any API-specific headers, they are mentioned explicitly in the respective API's description.  # noqa: E501

    The version of the OpenAPI document: 1.1.0
    Contact: developer@yodlee.com
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from yodlee.configuration import Configuration


class VerificationHolderProfile(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'account_id': 'int',
        'address': 'list[AbstractAddress]',
        'phone_number': 'list[PhoneNumber]',
        'provider_account_id': 'int',
        'holder': 'list[VerificationHolder]',
        'email': 'list[Email]'
    }

    attribute_map = {
        'account_id': 'accountId',
        'address': 'address',
        'phone_number': 'phoneNumber',
        'provider_account_id': 'providerAccountId',
        'holder': 'holder',
        'email': 'email'
    }

    def __init__(self, account_id=None, address=None, phone_number=None, provider_account_id=None, holder=None, email=None, local_vars_configuration=None):  # noqa: E501
        """VerificationHolderProfile - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._account_id = None
        self._address = None
        self._phone_number = None
        self._provider_account_id = None
        self._holder = None
        self._email = None
        self.discriminator = None

        if account_id is not None:
            self.account_id = account_id
        if address is not None:
            self.address = address
        if phone_number is not None:
            self.phone_number = phone_number
        if provider_account_id is not None:
            self.provider_account_id = provider_account_id
        if holder is not None:
            self.holder = holder
        if email is not None:
            self.email = email

    @property
    def account_id(self):
        """Gets the account_id of this VerificationHolderProfile.  # noqa: E501

        The primary key of the account resource and the unique identifier for the account  # noqa: E501

        :return: The account_id of this VerificationHolderProfile.  # noqa: E501
        :rtype: int
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this VerificationHolderProfile.

        The primary key of the account resource and the unique identifier for the account  # noqa: E501

        :param account_id: The account_id of this VerificationHolderProfile.  # noqa: E501
        :type account_id: int
        """

        self._account_id = account_id

    @property
    def address(self):
        """Gets the address of this VerificationHolderProfile.  # noqa: E501

        The account holder's address available at the profile and account levels  # noqa: E501

        :return: The address of this VerificationHolderProfile.  # noqa: E501
        :rtype: list[AbstractAddress]
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this VerificationHolderProfile.

        The account holder's address available at the profile and account levels  # noqa: E501

        :param address: The address of this VerificationHolderProfile.  # noqa: E501
        :type address: list[AbstractAddress]
        """

        self._address = address

    @property
    def phone_number(self):
        """Gets the phone_number of this VerificationHolderProfile.  # noqa: E501

        The account holder's phone number available at the profile and account levels  # noqa: E501

        :return: The phone_number of this VerificationHolderProfile.  # noqa: E501
        :rtype: list[PhoneNumber]
        """
        return self._phone_number

    @phone_number.setter
    def phone_number(self, phone_number):
        """Sets the phone_number of this VerificationHolderProfile.

        The account holder's phone number available at the profile and account levels  # noqa: E501

        :param phone_number: The phone_number of this VerificationHolderProfile.  # noqa: E501
        :type phone_number: list[PhoneNumber]
        """

        self._phone_number = phone_number

    @property
    def provider_account_id(self):
        """Gets the provider_account_id of this VerificationHolderProfile.  # noqa: E501

        The primary key of the provider account resource  # noqa: E501

        :return: The provider_account_id of this VerificationHolderProfile.  # noqa: E501
        :rtype: int
        """
        return self._provider_account_id

    @provider_account_id.setter
    def provider_account_id(self, provider_account_id):
        """Sets the provider_account_id of this VerificationHolderProfile.

        The primary key of the provider account resource  # noqa: E501

        :param provider_account_id: The provider_account_id of this VerificationHolderProfile.  # noqa: E501
        :type provider_account_id: int
        """

        self._provider_account_id = provider_account_id

    @property
    def holder(self):
        """Gets the holder of this VerificationHolderProfile.  # noqa: E501

        The holder entity is account-specific and captures the ownership status and the name details of the user  # noqa: E501

        :return: The holder of this VerificationHolderProfile.  # noqa: E501
        :rtype: list[VerificationHolder]
        """
        return self._holder

    @holder.setter
    def holder(self, holder):
        """Sets the holder of this VerificationHolderProfile.

        The holder entity is account-specific and captures the ownership status and the name details of the user  # noqa: E501

        :param holder: The holder of this VerificationHolderProfile.  # noqa: E501
        :type holder: list[VerificationHolder]
        """

        self._holder = holder

    @property
    def email(self):
        """Gets the email of this VerificationHolderProfile.  # noqa: E501

        The account holder's email ID available at the profile and account levels  # noqa: E501

        :return: The email of this VerificationHolderProfile.  # noqa: E501
        :rtype: list[Email]
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this VerificationHolderProfile.

        The account holder's email ID available at the profile and account levels  # noqa: E501

        :param email: The email of this VerificationHolderProfile.  # noqa: E501
        :type email: list[Email]
        """

        self._email = email

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, VerificationHolderProfile):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, VerificationHolderProfile):
            return True

        return self.to_dict() != other.to_dict()
