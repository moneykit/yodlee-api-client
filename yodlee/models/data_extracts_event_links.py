# coding: utf-8

"""
    Yodlee Core APIs

    This file describes the Yodlee Platform APIs using the swagger notation. You can use this swagger file to generate client side SDKs to the Yodlee Platform APIs for many different programming languages. Yodlee API v1.1 - Overview</a>.<br><br>You will have to set the header before making the API call. The following headers apply to all the APIs:<ul><li>Authorization: This header holds the access token</li> <li> Api-Version: 1.1</li></ul><b>Note</b>: If there are any API-specific headers, they are mentioned explicitly in the respective API's description.  # noqa: E501

    The version of the OpenAPI document: 1.1.0
    Contact: developer@yodlee.com
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from yodlee.configuration import Configuration


class DataExtractsEventLinks(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'method_type': 'str',
        'rel': 'str',
        'href': 'str'
    }

    attribute_map = {
        'method_type': 'methodType',
        'rel': 'rel',
        'href': 'href'
    }

    def __init__(self, method_type=None, rel=None, href=None, local_vars_configuration=None):  # noqa: E501
        """DataExtractsEventLinks - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._method_type = None
        self._rel = None
        self._href = None
        self.discriminator = None

        if method_type is not None:
            self.method_type = method_type
        if rel is not None:
            self.rel = rel
        if href is not None:
            self.href = href

    @property
    def method_type(self):
        """Gets the method_type of this DataExtractsEventLinks.  # noqa: E501


        :return: The method_type of this DataExtractsEventLinks.  # noqa: E501
        :rtype: str
        """
        return self._method_type

    @method_type.setter
    def method_type(self, method_type):
        """Sets the method_type of this DataExtractsEventLinks.


        :param method_type: The method_type of this DataExtractsEventLinks.  # noqa: E501
        :type method_type: str
        """

        self._method_type = method_type

    @property
    def rel(self):
        """Gets the rel of this DataExtractsEventLinks.  # noqa: E501


        :return: The rel of this DataExtractsEventLinks.  # noqa: E501
        :rtype: str
        """
        return self._rel

    @rel.setter
    def rel(self, rel):
        """Sets the rel of this DataExtractsEventLinks.


        :param rel: The rel of this DataExtractsEventLinks.  # noqa: E501
        :type rel: str
        """

        self._rel = rel

    @property
    def href(self):
        """Gets the href of this DataExtractsEventLinks.  # noqa: E501


        :return: The href of this DataExtractsEventLinks.  # noqa: E501
        :rtype: str
        """
        return self._href

    @href.setter
    def href(self, href):
        """Sets the href of this DataExtractsEventLinks.


        :param href: The href of this DataExtractsEventLinks.  # noqa: E501
        :type href: str
        """

        self._href = href

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DataExtractsEventLinks):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DataExtractsEventLinks):
            return True

        return self.to_dict() != other.to_dict()
