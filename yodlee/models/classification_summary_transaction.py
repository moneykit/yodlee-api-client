# coding: utf-8

"""
    Yodlee Core APIs

    This file describes the Yodlee Platform APIs using the swagger notation. You can use this swagger file to generate client side SDKs to the Yodlee Platform APIs for many different programming languages. Yodlee API v1.1 - Overview</a>.<br><br>You will have to set the header before making the API call. The following headers apply to all the APIs:<ul><li>Authorization: This header holds the access token</li> <li> Api-Version: 1.1</li></ul><b>Note</b>: If there are any API-specific headers, they are mentioned explicitly in the respective API's description.  # noqa: E501

    The version of the OpenAPI document: 1.1.0
    Contact: developer@yodlee.com
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from yodlee.configuration import Configuration


class ClassificationSummaryTransaction(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'date': 'str',
        'amount': 'Money',
        'description': 'Description',
        'merchant': 'ClassificationSummaryMerchant',
        'base_type': 'str'
    }

    attribute_map = {
        'date': 'date',
        'amount': 'amount',
        'description': 'description',
        'merchant': 'merchant',
        'base_type': 'baseType'
    }

    def __init__(self, date=None, amount=None, description=None, merchant=None, base_type=None, local_vars_configuration=None):  # noqa: E501
        """ClassificationSummaryTransaction - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._date = None
        self._amount = None
        self._description = None
        self._merchant = None
        self._base_type = None
        self.discriminator = None

        if date is not None:
            self.date = date
        if amount is not None:
            self.amount = amount
        if description is not None:
            self.description = description
        if merchant is not None:
            self.merchant = merchant
        if base_type is not None:
            self.base_type = base_type

    @property
    def date(self):
        """Gets the date of this ClassificationSummaryTransaction.  # noqa: E501

        The date the transaction happens in the account  # noqa: E501

        :return: The date of this ClassificationSummaryTransaction.  # noqa: E501
        :rtype: str
        """
        return self._date

    @date.setter
    def date(self, date):
        """Sets the date of this ClassificationSummaryTransaction.

        The date the transaction happens in the account  # noqa: E501

        :param date: The date of this ClassificationSummaryTransaction.  # noqa: E501
        :type date: str
        """

        self._date = date

    @property
    def amount(self):
        """Gets the amount of this ClassificationSummaryTransaction.  # noqa: E501


        :return: The amount of this ClassificationSummaryTransaction.  # noqa: E501
        :rtype: Money
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this ClassificationSummaryTransaction.


        :param amount: The amount of this ClassificationSummaryTransaction.  # noqa: E501
        :type amount: Money
        """

        self._amount = amount

    @property
    def description(self):
        """Gets the description of this ClassificationSummaryTransaction.  # noqa: E501


        :return: The description of this ClassificationSummaryTransaction.  # noqa: E501
        :rtype: Description
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ClassificationSummaryTransaction.


        :param description: The description of this ClassificationSummaryTransaction.  # noqa: E501
        :type description: Description
        """

        self._description = description

    @property
    def merchant(self):
        """Gets the merchant of this ClassificationSummaryTransaction.  # noqa: E501


        :return: The merchant of this ClassificationSummaryTransaction.  # noqa: E501
        :rtype: ClassificationSummaryMerchant
        """
        return self._merchant

    @merchant.setter
    def merchant(self, merchant):
        """Sets the merchant of this ClassificationSummaryTransaction.


        :param merchant: The merchant of this ClassificationSummaryTransaction.  # noqa: E501
        :type merchant: ClassificationSummaryMerchant
        """

        self._merchant = merchant

    @property
    def base_type(self):
        """Gets the base_type of this ClassificationSummaryTransaction.  # noqa: E501

        Indicates if the transaction appears as a debit or a credit transaction in the account  # noqa: E501

        :return: The base_type of this ClassificationSummaryTransaction.  # noqa: E501
        :rtype: str
        """
        return self._base_type

    @base_type.setter
    def base_type(self, base_type):
        """Sets the base_type of this ClassificationSummaryTransaction.

        Indicates if the transaction appears as a debit or a credit transaction in the account  # noqa: E501

        :param base_type: The base_type of this ClassificationSummaryTransaction.  # noqa: E501
        :type base_type: str
        """
        allowed_values = ["CREDIT", "DEBIT"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and base_type not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `base_type` ({0}), must be one of {1}"  # noqa: E501
                .format(base_type, allowed_values)
            )

        self._base_type = base_type

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ClassificationSummaryTransaction):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ClassificationSummaryTransaction):
            return True

        return self.to_dict() != other.to_dict()
