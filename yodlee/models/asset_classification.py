# coding: utf-8

"""
    Yodlee Core APIs

    This file describes the Yodlee Platform APIs using the swagger notation. You can use this swagger file to generate client side SDKs to the Yodlee Platform APIs for many different programming languages. Yodlee API v1.1 - Overview</a>.<br><br>You will have to set the header before making the API call. The following headers apply to all the APIs:<ul><li>Authorization: This header holds the access token</li> <li> Api-Version: 1.1</li></ul><b>Note</b>: If there are any API-specific headers, they are mentioned explicitly in the respective API's description.  # noqa: E501

    The version of the OpenAPI document: 1.1.0
    Contact: developer@yodlee.com
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from yodlee.configuration import Configuration


class AssetClassification(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'allocation': 'float',
        'classification_type': 'str',
        'classification_value': 'str'
    }

    attribute_map = {
        'allocation': 'allocation',
        'classification_type': 'classificationType',
        'classification_value': 'classificationValue'
    }

    def __init__(self, allocation=None, classification_type=None, classification_value=None, local_vars_configuration=None):  # noqa: E501
        """AssetClassification - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._allocation = None
        self._classification_type = None
        self._classification_value = None
        self.discriminator = None

        if allocation is not None:
            self.allocation = allocation
        if classification_type is not None:
            self.classification_type = classification_type
        if classification_value is not None:
            self.classification_value = classification_value

    @property
    def allocation(self):
        """Gets the allocation of this AssetClassification.  # noqa: E501

        The allocation percentage of the holding.<br><br><b>Required Feature Enablement</b>: Asset classification feature<br><br><b>Applicable containers</b>: investment<br>  # noqa: E501

        :return: The allocation of this AssetClassification.  # noqa: E501
        :rtype: float
        """
        return self._allocation

    @allocation.setter
    def allocation(self, allocation):
        """Sets the allocation of this AssetClassification.

        The allocation percentage of the holding.<br><br><b>Required Feature Enablement</b>: Asset classification feature<br><br><b>Applicable containers</b>: investment<br>  # noqa: E501

        :param allocation: The allocation of this AssetClassification.  # noqa: E501
        :type allocation: float
        """

        self._allocation = allocation

    @property
    def classification_type(self):
        """Gets the classification_type of this AssetClassification.  # noqa: E501

        The type of classification to which the investment belongs (assetClass, country, sector, and style).<br><b>Required Feature Enablement</b>: Asset classification feature<br><br><b>Applicable containers</b>: investment<br>  # noqa: E501

        :return: The classification_type of this AssetClassification.  # noqa: E501
        :rtype: str
        """
        return self._classification_type

    @classification_type.setter
    def classification_type(self, classification_type):
        """Sets the classification_type of this AssetClassification.

        The type of classification to which the investment belongs (assetClass, country, sector, and style).<br><b>Required Feature Enablement</b>: Asset classification feature<br><br><b>Applicable containers</b>: investment<br>  # noqa: E501

        :param classification_type: The classification_type of this AssetClassification.  # noqa: E501
        :type classification_type: str
        """

        self._classification_type = classification_type

    @property
    def classification_value(self):
        """Gets the classification_value of this AssetClassification.  # noqa: E501

        The value for each classificationType.<br><b>Required Feature Enablement</b>: Asset classification feature<br><br><b>Applicable containers</b>: investment<br>  # noqa: E501

        :return: The classification_value of this AssetClassification.  # noqa: E501
        :rtype: str
        """
        return self._classification_value

    @classification_value.setter
    def classification_value(self, classification_value):
        """Sets the classification_value of this AssetClassification.

        The value for each classificationType.<br><b>Required Feature Enablement</b>: Asset classification feature<br><br><b>Applicable containers</b>: investment<br>  # noqa: E501

        :param classification_value: The classification_value of this AssetClassification.  # noqa: E501
        :type classification_value: str
        """

        self._classification_value = classification_value

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AssetClassification):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AssetClassification):
            return True

        return self.to_dict() != other.to_dict()
