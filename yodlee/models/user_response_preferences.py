# coding: utf-8

"""
    Yodlee Core APIs

    This file describes the Yodlee Platform APIs using the swagger notation. You can use this swagger file to generate client side SDKs to the Yodlee Platform APIs for many different programming languages. Yodlee API v1.1 - Overview</a>.<br><br>You will have to set the header before making the API call. The following headers apply to all the APIs:<ul><li>Authorization: This header holds the access token</li> <li> Api-Version: 1.1</li></ul><b>Note</b>: If there are any API-specific headers, they are mentioned explicitly in the respective API's description.  # noqa: E501

    The version of the OpenAPI document: 1.1.0
    Contact: developer@yodlee.com
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from yodlee.configuration import Configuration


class UserResponsePreferences(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'date_format': 'str',
        'time_zone': 'str',
        'currency': 'str',
        'locale': 'str'
    }

    attribute_map = {
        'date_format': 'dateFormat',
        'time_zone': 'timeZone',
        'currency': 'currency',
        'locale': 'locale'
    }

    def __init__(self, date_format=None, time_zone=None, currency=None, locale=None, local_vars_configuration=None):  # noqa: E501
        """UserResponsePreferences - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._date_format = None
        self._time_zone = None
        self._currency = None
        self._locale = None
        self.discriminator = None

        if date_format is not None:
            self.date_format = date_format
        if time_zone is not None:
            self.time_zone = time_zone
        if currency is not None:
            self.currency = currency
        if locale is not None:
            self.locale = locale

    @property
    def date_format(self):
        """Gets the date_format of this UserResponsePreferences.  # noqa: E501

        The dateformat of the user.This attribute is just a place holder and has no impact on any other API services.  # noqa: E501

        :return: The date_format of this UserResponsePreferences.  # noqa: E501
        :rtype: str
        """
        return self._date_format

    @date_format.setter
    def date_format(self, date_format):
        """Sets the date_format of this UserResponsePreferences.

        The dateformat of the user.This attribute is just a place holder and has no impact on any other API services.  # noqa: E501

        :param date_format: The date_format of this UserResponsePreferences.  # noqa: E501
        :type date_format: str
        """
        if (self.local_vars_configuration.client_side_validation and
                date_format is not None and len(date_format) > 2147483647):
            raise ValueError("Invalid value for `date_format`, length must be less than or equal to `2147483647`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                date_format is not None and len(date_format) < 1):
            raise ValueError("Invalid value for `date_format`, length must be greater than or equal to `1`")  # noqa: E501

        self._date_format = date_format

    @property
    def time_zone(self):
        """Gets the time_zone of this UserResponsePreferences.  # noqa: E501

        The timezone of the user. This attribute is just a place holder and has no impact on any other API services.  # noqa: E501

        :return: The time_zone of this UserResponsePreferences.  # noqa: E501
        :rtype: str
        """
        return self._time_zone

    @time_zone.setter
    def time_zone(self, time_zone):
        """Sets the time_zone of this UserResponsePreferences.

        The timezone of the user. This attribute is just a place holder and has no impact on any other API services.  # noqa: E501

        :param time_zone: The time_zone of this UserResponsePreferences.  # noqa: E501
        :type time_zone: str
        """
        if (self.local_vars_configuration.client_side_validation and
                time_zone is not None and len(time_zone) > 2147483647):
            raise ValueError("Invalid value for `time_zone`, length must be less than or equal to `2147483647`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                time_zone is not None and len(time_zone) < 1):
            raise ValueError("Invalid value for `time_zone`, length must be greater than or equal to `1`")  # noqa: E501

        self._time_zone = time_zone

    @property
    def currency(self):
        """Gets the currency of this UserResponsePreferences.  # noqa: E501

        The currency of the user. This currency will be respected while providing the response for derived API services.<br><b>Applicable Values</b><br>  # noqa: E501

        :return: The currency of this UserResponsePreferences.  # noqa: E501
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this UserResponsePreferences.

        The currency of the user. This currency will be respected while providing the response for derived API services.<br><b>Applicable Values</b><br>  # noqa: E501

        :param currency: The currency of this UserResponsePreferences.  # noqa: E501
        :type currency: str
        """
        allowed_values = ["USD", "AUD", "BRL", "CAD", "EUR", "GBP", "HKD", "IDR", "INR", "JPY", "NZD", "SGD", "ZAR", "CNY", "VND", "MYR", "CHF", "AED", "AFA", "ALL", "AMD", "ANG", "AOA", "ARS", "AWG", "AZM", "BAM", "BBD", "BDT", "BGL", "BHD", "BIF", "BMD", "BND", "BOB", "BSD", "BTN", "BWP", "BYR", "BZD", "CDF", "CLP", "COP", "CRC", "CUP", "CVE", "CYP", "CZK", "DJF", "DKK", "DOP", "DZD", "EEK", "EGP", "ERN", "ETB", "FJD", "FKP", "GEL", "GGP", "GHC", "GIP", "GMD", "GNF", "GTQ", "GYD", "HNL", "HRK", "HTG", "HUF", "ILS", "IMP", "IQD", "IRR", "ISK", "JEP", "JMD", "JOD", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LKR", "LRD", "LSL", "LTL", "LVL", "LYD", "MAD", "MDL", "MGF", "MKD", "MMK", "MNT", "MOP", "MRO", "MTL", "MUR", "MVR", "MWK", "MXN", "MZM", "NAD", "NGN", "NIO", "NOK", "NPR", "OMR", "PAB", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "ROL", "RUR", "RWF", "SAR", "SBD", "SCR", "SDD", "SEK", "SHP", "SIT", "SKK", "SLL", "SOS", "SPL", "SRG", "STD", "SVC", "SYP", "SZL", "THB", "TJR", "TMM", "TND", "TOP", "TRL", "TTD", "TVD", "TWD", "TZS", "UAH", "UGX", "UYU", "UZS", "VEB", "VUV", "WST", "XAF", "XAG", "XAU", "XCD", "XDR", "XOF", "XPD", "XPF", "XPT", "YER", "YUM", "ZMK", "ZWD", "ADP", "ATS", "BEF", "BUK", "CSD", "CSK", "DDM", "DEM", "ECS", "ESP", "FIM", "GRD", "GWP", "IEP", "ITL", "LUF", "MLF", "NLG", "PTE", "SUR", "TPE", "UAK", "XBA", "XBB", "XBC", "XBD", "XEU", "XFO", "XFU", "XGF", "XMK", "XRM", "XTS", "YDD", "YUD", "ZRN", "TJS", "RON", "BGN", "BTC", "XBT", "CNH", "RUB", "TRY", "GHS", "TMT", "ZMW", "VEF", "SSP", "ALK"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and currency not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `currency` ({0}), must be one of {1}"  # noqa: E501
                .format(currency, allowed_values)
            )

        self._currency = currency

    @property
    def locale(self):
        """Gets the locale of this UserResponsePreferences.  # noqa: E501

        The locale of the user. This locale will be considered for localization features like providing the provider information in the supported locale or providing category names in the transaction related services.<br><b>Applicable Values</b><br>  # noqa: E501

        :return: The locale of this UserResponsePreferences.  # noqa: E501
        :rtype: str
        """
        return self._locale

    @locale.setter
    def locale(self, locale):
        """Sets the locale of this UserResponsePreferences.

        The locale of the user. This locale will be considered for localization features like providing the provider information in the supported locale or providing category names in the transaction related services.<br><b>Applicable Values</b><br>  # noqa: E501

        :param locale: The locale of this UserResponsePreferences.  # noqa: E501
        :type locale: str
        """
        allowed_values = ["en_US", "en_AN", "en_GB", "en_AU", "en_BE", "zh_CN", "en_IN", "en_CA", "en_ES", "en_NZ", "en_IE", "en_IL", "en_FR", "en_AE", "en_FJ", "en_GU", "en_HK", "en_IT", "en_JP", "en_KH", "en_KP", "en_KR", "en_MY", "en_PG", "en_PH", "en_SB", "en_SG", "en_TH", "en_TO", "en_VN", "en_VU", "en_WS", "es_ES", "fr_CA", "fr_FR", "nl_AN", "en_CH", "en_ZA", "en_CN", "en_FI", "en_AT", "de_AT", "en_DE", "de_DE", "de_RU", "en_ID", "en_MX", "es_MX", "en_PT", "en_SE", "en_GLOBAL", "pt_BR", "en_DK", "en_BR", "en_BM", "en_CK", "en_CO", "en_JE", "en_BG", "en_BW", "en_MW", "en_KE", "en_SZ", "en_ZW", "en_NL", "nl_NL"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and locale not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `locale` ({0}), must be one of {1}"  # noqa: E501
                .format(locale, allowed_values)
            )

        self._locale = locale

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UserResponsePreferences):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, UserResponsePreferences):
            return True

        return self.to_dict() != other.to_dict()
