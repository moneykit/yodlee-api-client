# coding: utf-8

"""
    Yodlee Core APIs

    This file describes the Yodlee Platform APIs using the swagger notation. You can use this swagger file to generate client side SDKs to the Yodlee Platform APIs for many different programming languages. Yodlee API v1.1 - Overview</a>.<br><br>You will have to set the header before making the API call. The following headers apply to all the APIs:<ul><li>Authorization: This header holds the access token</li> <li> Api-Version: 1.1</li></ul><b>Note</b>: If there are any API-specific headers, they are mentioned explicitly in the respective API's description.  # noqa: E501

    The version of the OpenAPI document: 1.1.0
    Contact: developer@yodlee.com
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from yodlee.configuration import Configuration


class DerivedNetworth(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'date': 'str',
        'liability': 'Money',
        'historical_balances': 'list[DerivedNetworthHistoricalBalance]',
        'networth': 'Money',
        'asset': 'Money'
    }

    attribute_map = {
        'date': 'date',
        'liability': 'liability',
        'historical_balances': 'historicalBalances',
        'networth': 'networth',
        'asset': 'asset'
    }

    def __init__(self, date=None, liability=None, historical_balances=None, networth=None, asset=None, local_vars_configuration=None):  # noqa: E501
        """DerivedNetworth - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._date = None
        self._liability = None
        self._historical_balances = None
        self._networth = None
        self._asset = None
        self.discriminator = None

        if date is not None:
            self.date = date
        if liability is not None:
            self.liability = liability
        if historical_balances is not None:
            self.historical_balances = historical_balances
        if networth is not None:
            self.networth = networth
        if asset is not None:
            self.asset = asset

    @property
    def date(self):
        """Gets the date of this DerivedNetworth.  # noqa: E501

        The date as of when the networth information is provided.<br><br><b>Applicable containers</b>: bank, creditcard, investment, insurance, realEstate, loan<br>  # noqa: E501

        :return: The date of this DerivedNetworth.  # noqa: E501
        :rtype: str
        """
        return self._date

    @date.setter
    def date(self, date):
        """Sets the date of this DerivedNetworth.

        The date as of when the networth information is provided.<br><br><b>Applicable containers</b>: bank, creditcard, investment, insurance, realEstate, loan<br>  # noqa: E501

        :param date: The date of this DerivedNetworth.  # noqa: E501
        :type date: str
        """

        self._date = date

    @property
    def liability(self):
        """Gets the liability of this DerivedNetworth.  # noqa: E501


        :return: The liability of this DerivedNetworth.  # noqa: E501
        :rtype: Money
        """
        return self._liability

    @liability.setter
    def liability(self, liability):
        """Sets the liability of this DerivedNetworth.


        :param liability: The liability of this DerivedNetworth.  # noqa: E501
        :type liability: Money
        """

        self._liability = liability

    @property
    def historical_balances(self):
        """Gets the historical_balances of this DerivedNetworth.  # noqa: E501

        Balances of the accounts over the period of time.<br><br><b>Applicable containers</b>: bank, creditcard, investment, insurance, realEstate, loan<br>  # noqa: E501

        :return: The historical_balances of this DerivedNetworth.  # noqa: E501
        :rtype: list[DerivedNetworthHistoricalBalance]
        """
        return self._historical_balances

    @historical_balances.setter
    def historical_balances(self, historical_balances):
        """Sets the historical_balances of this DerivedNetworth.

        Balances of the accounts over the period of time.<br><br><b>Applicable containers</b>: bank, creditcard, investment, insurance, realEstate, loan<br>  # noqa: E501

        :param historical_balances: The historical_balances of this DerivedNetworth.  # noqa: E501
        :type historical_balances: list[DerivedNetworthHistoricalBalance]
        """

        self._historical_balances = historical_balances

    @property
    def networth(self):
        """Gets the networth of this DerivedNetworth.  # noqa: E501


        :return: The networth of this DerivedNetworth.  # noqa: E501
        :rtype: Money
        """
        return self._networth

    @networth.setter
    def networth(self, networth):
        """Sets the networth of this DerivedNetworth.


        :param networth: The networth of this DerivedNetworth.  # noqa: E501
        :type networth: Money
        """

        self._networth = networth

    @property
    def asset(self):
        """Gets the asset of this DerivedNetworth.  # noqa: E501


        :return: The asset of this DerivedNetworth.  # noqa: E501
        :rtype: Money
        """
        return self._asset

    @asset.setter
    def asset(self, asset):
        """Sets the asset of this DerivedNetworth.


        :param asset: The asset of this DerivedNetworth.  # noqa: E501
        :type asset: Money
        """

        self._asset = asset

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DerivedNetworth):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DerivedNetworth):
            return True

        return self.to_dict() != other.to_dict()
