# coding: utf-8

"""
    Yodlee Core APIs

    This file describes the Yodlee Platform APIs using the swagger notation. You can use this swagger file to generate client side SDKs to the Yodlee Platform APIs for many different programming languages. Yodlee API v1.1 - Overview</a>.<br><br>You will have to set the header before making the API call. The following headers apply to all the APIs:<ul><li>Authorization: This header holds the access token</li> <li> Api-Version: 1.1</li></ul><b>Note</b>: If there are any API-specific headers, they are mentioned explicitly in the respective API's description.  # noqa: E501

    The version of the OpenAPI document: 1.1.0
    Contact: developer@yodlee.com
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from yodlee.configuration import Configuration


class DerivedTransactionsSummary(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'category_type': 'str',
        'category_summary': 'list[DerivedCategorySummary]',
        'credit_total': 'Money',
        'links': 'DerivedTransactionsLinks',
        'debit_total': 'Money'
    }

    attribute_map = {
        'category_type': 'categoryType',
        'category_summary': 'categorySummary',
        'credit_total': 'creditTotal',
        'links': 'links',
        'debit_total': 'debitTotal'
    }

    def __init__(self, category_type=None, category_summary=None, credit_total=None, links=None, debit_total=None, local_vars_configuration=None):  # noqa: E501
        """DerivedTransactionsSummary - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._category_type = None
        self._category_summary = None
        self._credit_total = None
        self._links = None
        self._debit_total = None
        self.discriminator = None

        if category_type is not None:
            self.category_type = category_type
        if category_summary is not None:
            self.category_summary = category_summary
        if credit_total is not None:
            self.credit_total = credit_total
        if links is not None:
            self.links = links
        if debit_total is not None:
            self.debit_total = debit_total

    @property
    def category_type(self):
        """Gets the category_type of this DerivedTransactionsSummary.  # noqa: E501

        Type of categories provided by transactions/categories service.<br><br><b>Applicable containers</b>: creditCard, bank, investment<br><b>Applicable Values</b><br>  # noqa: E501

        :return: The category_type of this DerivedTransactionsSummary.  # noqa: E501
        :rtype: str
        """
        return self._category_type

    @category_type.setter
    def category_type(self, category_type):
        """Sets the category_type of this DerivedTransactionsSummary.

        Type of categories provided by transactions/categories service.<br><br><b>Applicable containers</b>: creditCard, bank, investment<br><b>Applicable Values</b><br>  # noqa: E501

        :param category_type: The category_type of this DerivedTransactionsSummary.  # noqa: E501
        :type category_type: str
        """
        allowed_values = ["TRANSFER", "DEFERRED_COMPENSATION", "UNCATEGORIZE", "INCOME", "EXPENSE"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and category_type not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `category_type` ({0}), must be one of {1}"  # noqa: E501
                .format(category_type, allowed_values)
            )

        self._category_type = category_type

    @property
    def category_summary(self):
        """Gets the category_summary of this DerivedTransactionsSummary.  # noqa: E501

        Summary of transaction amouts at category level.<br><br><b>Applicable containers</b>: creditCard, bank, investment<br>  # noqa: E501

        :return: The category_summary of this DerivedTransactionsSummary.  # noqa: E501
        :rtype: list[DerivedCategorySummary]
        """
        return self._category_summary

    @category_summary.setter
    def category_summary(self, category_summary):
        """Sets the category_summary of this DerivedTransactionsSummary.

        Summary of transaction amouts at category level.<br><br><b>Applicable containers</b>: creditCard, bank, investment<br>  # noqa: E501

        :param category_summary: The category_summary of this DerivedTransactionsSummary.  # noqa: E501
        :type category_summary: list[DerivedCategorySummary]
        """

        self._category_summary = category_summary

    @property
    def credit_total(self):
        """Gets the credit_total of this DerivedTransactionsSummary.  # noqa: E501


        :return: The credit_total of this DerivedTransactionsSummary.  # noqa: E501
        :rtype: Money
        """
        return self._credit_total

    @credit_total.setter
    def credit_total(self, credit_total):
        """Sets the credit_total of this DerivedTransactionsSummary.


        :param credit_total: The credit_total of this DerivedTransactionsSummary.  # noqa: E501
        :type credit_total: Money
        """

        self._credit_total = credit_total

    @property
    def links(self):
        """Gets the links of this DerivedTransactionsSummary.  # noqa: E501


        :return: The links of this DerivedTransactionsSummary.  # noqa: E501
        :rtype: DerivedTransactionsLinks
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this DerivedTransactionsSummary.


        :param links: The links of this DerivedTransactionsSummary.  # noqa: E501
        :type links: DerivedTransactionsLinks
        """

        self._links = links

    @property
    def debit_total(self):
        """Gets the debit_total of this DerivedTransactionsSummary.  # noqa: E501


        :return: The debit_total of this DerivedTransactionsSummary.  # noqa: E501
        :rtype: Money
        """
        return self._debit_total

    @debit_total.setter
    def debit_total(self, debit_total):
        """Sets the debit_total of this DerivedTransactionsSummary.


        :param debit_total: The debit_total of this DerivedTransactionsSummary.  # noqa: E501
        :type debit_total: Money
        """

        self._debit_total = debit_total

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DerivedTransactionsSummary):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DerivedTransactionsSummary):
            return True

        return self.to_dict() != other.to_dict()
