# coding: utf-8

"""
    Yodlee Core APIs

    This file describes the Yodlee Platform APIs using the swagger notation. You can use this swagger file to generate client side SDKs to the Yodlee Platform APIs for many different programming languages. Yodlee API v1.1 - Overview</a>.<br><br>You will have to set the header before making the API call. The following headers apply to all the APIs:<ul><li>Authorization: This header holds the access token</li> <li> Api-Version: 1.1</li></ul><b>Note</b>: If there are any API-specific headers, they are mentioned explicitly in the respective API's description.  # noqa: E501

    The version of the OpenAPI document: 1.1.0
    Contact: developer@yodlee.com
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from yodlee.configuration import Configuration


class AccountHolderData(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'identifier': 'list[Identifier]',
        'gender': 'str',
        'ownership': 'str',
        'name': 'Name'
    }

    attribute_map = {
        'identifier': 'identifier',
        'gender': 'gender',
        'ownership': 'ownership',
        'name': 'name'
    }

    def __init__(self, identifier=None, gender=None, ownership=None, name=None, local_vars_configuration=None):  # noqa: E501
        """AccountHolderData - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._identifier = None
        self._gender = None
        self._ownership = None
        self._name = None
        self.discriminator = None

        if identifier is not None:
            self.identifier = identifier
        if gender is not None:
            self.gender = gender
        if ownership is not None:
            self.ownership = ownership
        if name is not None:
            self.name = name

    @property
    def identifier(self):
        """Gets the identifier of this AccountHolderData.  # noqa: E501

        Identifiers of the account holder.<br><b>Endpoints</b>:<li>GET /partner/paymentProcessor/account/holder</li></ul>  # noqa: E501

        :return: The identifier of this AccountHolderData.  # noqa: E501
        :rtype: list[Identifier]
        """
        return self._identifier

    @identifier.setter
    def identifier(self, identifier):
        """Sets the identifier of this AccountHolderData.

        Identifiers of the account holder.<br><b>Endpoints</b>:<li>GET /partner/paymentProcessor/account/holder</li></ul>  # noqa: E501

        :param identifier: The identifier of this AccountHolderData.  # noqa: E501
        :type identifier: list[Identifier]
        """

        self._identifier = identifier

    @property
    def gender(self):
        """Gets the gender of this AccountHolderData.  # noqa: E501

        Identifiers of the account holder.<br><b>Endpoints</b>:<li>GET /partner/paymentProcessor/account/holder</li></ul>  # noqa: E501

        :return: The gender of this AccountHolderData.  # noqa: E501
        :rtype: str
        """
        return self._gender

    @gender.setter
    def gender(self, gender):
        """Sets the gender of this AccountHolderData.

        Identifiers of the account holder.<br><b>Endpoints</b>:<li>GET /partner/paymentProcessor/account/holder</li></ul>  # noqa: E501

        :param gender: The gender of this AccountHolderData.  # noqa: E501
        :type gender: str
        """

        self._gender = gender

    @property
    def ownership(self):
        """Gets the ownership of this AccountHolderData.  # noqa: E501

        Indicates the ownership of the account.<br><b>Endpoints</b>:<li>GET /partner/paymentProcessor/account/holder</li></ul>  # noqa: E501

        :return: The ownership of this AccountHolderData.  # noqa: E501
        :rtype: str
        """
        return self._ownership

    @ownership.setter
    def ownership(self, ownership):
        """Sets the ownership of this AccountHolderData.

        Indicates the ownership of the account.<br><b>Endpoints</b>:<li>GET /partner/paymentProcessor/account/holder</li></ul>  # noqa: E501

        :param ownership: The ownership of this AccountHolderData.  # noqa: E501
        :type ownership: str
        """
        allowed_values = ["PRIMARY", "SECONDARY", "CUSTODIAN", "OTHERS", "POWER_OF_ATTORNEY", "TRUSTEE", "JOINT_OWNER", "BENEFICIARY", "AAS", "BUSINESS", "DBA", "TRUST"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and ownership not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `ownership` ({0}), must be one of {1}"  # noqa: E501
                .format(ownership, allowed_values)
            )

        self._ownership = ownership

    @property
    def name(self):
        """Gets the name of this AccountHolderData.  # noqa: E501


        :return: The name of this AccountHolderData.  # noqa: E501
        :rtype: Name
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this AccountHolderData.


        :param name: The name of this AccountHolderData.  # noqa: E501
        :type name: Name
        """

        self._name = name

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AccountHolderData):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AccountHolderData):
            return True

        return self.to_dict() != other.to_dict()
