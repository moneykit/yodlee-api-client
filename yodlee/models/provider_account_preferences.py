# coding: utf-8

"""
    Yodlee Core APIs

    This file describes the Yodlee Platform APIs using the swagger notation. You can use this swagger file to generate client side SDKs to the Yodlee Platform APIs for many different programming languages. Yodlee API v1.1 - Overview</a>.<br><br>You will have to set the header before making the API call. The following headers apply to all the APIs:<ul><li>Authorization: This header holds the access token</li> <li> Api-Version: 1.1</li></ul><b>Note</b>: If there are any API-specific headers, they are mentioned explicitly in the respective API's description.  # noqa: E501

    The version of the OpenAPI document: 1.1.0
    Contact: developer@yodlee.com
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from yodlee.configuration import Configuration


class ProviderAccountPreferences(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'is_data_extracts_enabled': 'bool',
        'linked_provider_account_id': 'int',
        'is_auto_refresh_enabled': 'bool'
    }

    attribute_map = {
        'is_data_extracts_enabled': 'isDataExtractsEnabled',
        'linked_provider_account_id': 'linkedProviderAccountId',
        'is_auto_refresh_enabled': 'isAutoRefreshEnabled'
    }

    def __init__(self, is_data_extracts_enabled=None, linked_provider_account_id=None, is_auto_refresh_enabled=None, local_vars_configuration=None):  # noqa: E501
        """ProviderAccountPreferences - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._is_data_extracts_enabled = None
        self._linked_provider_account_id = None
        self._is_auto_refresh_enabled = None
        self.discriminator = None

        if is_data_extracts_enabled is not None:
            self.is_data_extracts_enabled = is_data_extracts_enabled
        if linked_provider_account_id is not None:
            self.linked_provider_account_id = linked_provider_account_id
        if is_auto_refresh_enabled is not None:
            self.is_auto_refresh_enabled = is_auto_refresh_enabled

    @property
    def is_data_extracts_enabled(self):
        """Gets the is_data_extracts_enabled of this ProviderAccountPreferences.  # noqa: E501

        Indicates if the updates to the provider account should be part of the data extracts event notification or the data extract data retrieval service.<br><br><b>Endpoints</b>:<ul><li>GET providerAccounts?include=preferences</li><li>GET providerAccounts/{providerAccountId}?include=preferences</li></ul>  # noqa: E501

        :return: The is_data_extracts_enabled of this ProviderAccountPreferences.  # noqa: E501
        :rtype: bool
        """
        return self._is_data_extracts_enabled

    @is_data_extracts_enabled.setter
    def is_data_extracts_enabled(self, is_data_extracts_enabled):
        """Sets the is_data_extracts_enabled of this ProviderAccountPreferences.

        Indicates if the updates to the provider account should be part of the data extracts event notification or the data extract data retrieval service.<br><br><b>Endpoints</b>:<ul><li>GET providerAccounts?include=preferences</li><li>GET providerAccounts/{providerAccountId}?include=preferences</li></ul>  # noqa: E501

        :param is_data_extracts_enabled: The is_data_extracts_enabled of this ProviderAccountPreferences.  # noqa: E501
        :type is_data_extracts_enabled: bool
        """

        self._is_data_extracts_enabled = is_data_extracts_enabled

    @property
    def linked_provider_account_id(self):
        """Gets the linked_provider_account_id of this ProviderAccountPreferences.  # noqa: E501

        LinkedproviderAccountd is a providerAccountId linked by the user to the primary provider account. <br>LinkedProviderAccountId and the providerAccountId belongs to the same institution.<br><br><b>Endpoints</b>:<ul><li>POST Provider Account</li><li>PUT Provider Account</li><li>GET Provider Accounts</li></ul>  # noqa: E501

        :return: The linked_provider_account_id of this ProviderAccountPreferences.  # noqa: E501
        :rtype: int
        """
        return self._linked_provider_account_id

    @linked_provider_account_id.setter
    def linked_provider_account_id(self, linked_provider_account_id):
        """Sets the linked_provider_account_id of this ProviderAccountPreferences.

        LinkedproviderAccountd is a providerAccountId linked by the user to the primary provider account. <br>LinkedProviderAccountId and the providerAccountId belongs to the same institution.<br><br><b>Endpoints</b>:<ul><li>POST Provider Account</li><li>PUT Provider Account</li><li>GET Provider Accounts</li></ul>  # noqa: E501

        :param linked_provider_account_id: The linked_provider_account_id of this ProviderAccountPreferences.  # noqa: E501
        :type linked_provider_account_id: int
        """

        self._linked_provider_account_id = linked_provider_account_id

    @property
    def is_auto_refresh_enabled(self):
        """Gets the is_auto_refresh_enabled of this ProviderAccountPreferences.  # noqa: E501

        Indicates if auto-refreshes have to be triggered for the provider account.<br><br><b>Endpoints</b>:<ul><li>GET providerAccounts?include=preferences</li><li>GET providerAccounts/{providerAccountId}?include=preferences</li></ul>  # noqa: E501

        :return: The is_auto_refresh_enabled of this ProviderAccountPreferences.  # noqa: E501
        :rtype: bool
        """
        return self._is_auto_refresh_enabled

    @is_auto_refresh_enabled.setter
    def is_auto_refresh_enabled(self, is_auto_refresh_enabled):
        """Sets the is_auto_refresh_enabled of this ProviderAccountPreferences.

        Indicates if auto-refreshes have to be triggered for the provider account.<br><br><b>Endpoints</b>:<ul><li>GET providerAccounts?include=preferences</li><li>GET providerAccounts/{providerAccountId}?include=preferences</li></ul>  # noqa: E501

        :param is_auto_refresh_enabled: The is_auto_refresh_enabled of this ProviderAccountPreferences.  # noqa: E501
        :type is_auto_refresh_enabled: bool
        """

        self._is_auto_refresh_enabled = is_auto_refresh_enabled

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ProviderAccountPreferences):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ProviderAccountPreferences):
            return True

        return self.to_dict() != other.to_dict()
