# coding: utf-8

"""
    Yodlee Core APIs

    This file describes the Yodlee Platform APIs using the swagger notation. You can use this swagger file to generate client side SDKs to the Yodlee Platform APIs for many different programming languages. Yodlee API v1.1 - Overview</a>.<br><br>You will have to set the header before making the API call. The following headers apply to all the APIs:<ul><li>Authorization: This header holds the access token</li> <li> Api-Version: 1.1</li></ul><b>Note</b>: If there are any API-specific headers, they are mentioned explicitly in the respective API's description.  # noqa: E501

    The version of the OpenAPI document: 1.1.0
    Contact: developer@yodlee.com
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from yodlee.configuration import Configuration


class Coverage(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'amount': 'list[CoverageAmount]',
        'plan_type': 'str',
        'end_date': 'str',
        'type': 'str',
        'start_date': 'str'
    }

    attribute_map = {
        'amount': 'amount',
        'plan_type': 'planType',
        'end_date': 'endDate',
        'type': 'type',
        'start_date': 'startDate'
    }

    def __init__(self, amount=None, plan_type=None, end_date=None, type=None, start_date=None, local_vars_configuration=None):  # noqa: E501
        """Coverage - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._amount = None
        self._plan_type = None
        self._end_date = None
        self._type = None
        self._start_date = None
        self.discriminator = None

        if amount is not None:
            self.amount = amount
        if plan_type is not None:
            self.plan_type = plan_type
        if end_date is not None:
            self.end_date = end_date
        if type is not None:
            self.type = type
        if start_date is not None:
            self.start_date = start_date

    @property
    def amount(self):
        """Gets the amount of this Coverage.  # noqa: E501

        The coverage amount-related details.<br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: insurance,investment<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li></ul>  # noqa: E501

        :return: The amount of this Coverage.  # noqa: E501
        :rtype: list[CoverageAmount]
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this Coverage.

        The coverage amount-related details.<br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: insurance,investment<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li></ul>  # noqa: E501

        :param amount: The amount of this Coverage.  # noqa: E501
        :type amount: list[CoverageAmount]
        """

        self._amount = amount

    @property
    def plan_type(self):
        """Gets the plan_type of this Coverage.  # noqa: E501

        The plan type for an insurance provided to an individual or an entity.<br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: insurance<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li></ul><b>Applicable Values:</b><br>  # noqa: E501

        :return: The plan_type of this Coverage.  # noqa: E501
        :rtype: str
        """
        return self._plan_type

    @plan_type.setter
    def plan_type(self, plan_type):
        """Sets the plan_type of this Coverage.

        The plan type for an insurance provided to an individual or an entity.<br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: insurance<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li></ul><b>Applicable Values:</b><br>  # noqa: E501

        :param plan_type: The plan_type of this Coverage.  # noqa: E501
        :type plan_type: str
        """
        allowed_values = ["PPO", "HMO", "UNKNOWN"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and plan_type not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `plan_type` ({0}), must be one of {1}"  # noqa: E501
                .format(plan_type, allowed_values)
            )

        self._plan_type = plan_type

    @property
    def end_date(self):
        """Gets the end_date of this Coverage.  # noqa: E501

        The date on which the coverage for the account ends or expires.<br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: insurance,investment<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li></ul>  # noqa: E501

        :return: The end_date of this Coverage.  # noqa: E501
        :rtype: str
        """
        return self._end_date

    @end_date.setter
    def end_date(self, end_date):
        """Sets the end_date of this Coverage.

        The date on which the coverage for the account ends or expires.<br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: insurance,investment<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li></ul>  # noqa: E501

        :param end_date: The end_date of this Coverage.  # noqa: E501
        :type end_date: str
        """

        self._end_date = end_date

    @property
    def type(self):
        """Gets the type of this Coverage.  # noqa: E501

        The type of coverage provided to an individual or an entity.<br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: insurance,investment<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li></ul><b>Applicable Values:</b><br>  # noqa: E501

        :return: The type of this Coverage.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Coverage.

        The type of coverage provided to an individual or an entity.<br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: insurance,investment<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li></ul><b>Applicable Values:</b><br>  # noqa: E501

        :param type: The type of this Coverage.  # noqa: E501
        :type type: str
        """
        allowed_values = ["VISION", "DENTAL", "MEDICAL", "HEALTH", "DEATH_COVER", "TOTAL_PERMANENT_DISABILITY", "ACCIDENTAL_DEATH_COVER", "INCOME_PROTECTION", "DEATH_TOTAL_PERMANENT_DISABILITY", "OTHER"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and type not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def start_date(self):
        """Gets the start_date of this Coverage.  # noqa: E501

        The date on which the coverage for the account starts.<br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: insurance,investment<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li></ul>  # noqa: E501

        :return: The start_date of this Coverage.  # noqa: E501
        :rtype: str
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date):
        """Sets the start_date of this Coverage.

        The date on which the coverage for the account starts.<br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: insurance,investment<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li></ul>  # noqa: E501

        :param start_date: The start_date of this Coverage.  # noqa: E501
        :type start_date: str
        """

        self._start_date = start_date

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Coverage):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Coverage):
            return True

        return self.to_dict() != other.to_dict()
