# coding: utf-8

"""
    Yodlee Core APIs

    This file describes the Yodlee Platform APIs using the swagger notation. You can use this swagger file to generate client side SDKs to the Yodlee Platform APIs for many different programming languages. Yodlee API v1.1 - Overview</a>.<br><br>You will have to set the header before making the API call. The following headers apply to all the APIs:<ul><li>Authorization: This header holds the access token</li> <li> Api-Version: 1.1</li></ul><b>Note</b>: If there are any API-specific headers, they are mentioned explicitly in the respective API's description.  # noqa: E501

    The version of the OpenAPI document: 1.1.0
    Contact: developer@yodlee.com
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from yodlee.configuration import Configuration


class Account(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'available_cash': 'Money',
        'include_in_net_worth': 'bool',
        'money_market_balance': 'Money',
        'enrollment_date': 'str',
        'estimated_date': 'str',
        'memo': 'str',
        'guarantor': 'str',
        'interest_paid_last_year': 'Money',
        'last_updated': 'str',
        'balance': 'Money',
        'home_insurance_type': 'str',
        'id': 'int',
        'cash': 'Money',
        'total_credit_line': 'Money',
        'provider_name': 'str',
        'valuation_type': 'str',
        'margin_balance': 'Money',
        'apr': 'float',
        'available_credit': 'Money',
        'current_balance': 'Money',
        'is_manual': 'bool',
        'profile': 'AccountProfile',
        'escrow_balance': 'Money',
        'next_level': 'str',
        'classification': 'str',
        'loan_payoff_amount': 'Money',
        'interest_rate_type': 'str',
        'loan_pay_by_date': 'str',
        'face_amount': 'Money',
        'policy_from_date': 'str',
        'premium_payment_term': 'str',
        'policy_term': 'str',
        'repayment_plan_type': 'str',
        'aggregated_account_type': 'str',
        'available_balance': 'Money',
        'account_status': 'str',
        'life_insurance_type': 'str',
        'full_account_number': 'str',
        'premium': 'Money',
        'aggregation_source': 'str',
        'over_draft_limit': 'Money',
        'nickname': 'str',
        'term': 'str',
        'interest_rate': 'float',
        'death_benefit': 'Money',
        'address': 'AccountAddress',
        'cash_value': 'Money',
        'holder': 'list[AccountHolder]',
        '_401k_loan': 'Money',
        'home_value': 'Money',
        'account_number': 'str',
        'created_date': 'str',
        'interest_paid_ytd': 'Money',
        'provider_account_id': 'int',
        'collateral': 'str',
        'dataset': 'list[AccountDataset]',
        'running_balance': 'Money',
        'source_id': 'str',
        'due_date': 'str',
        'frequency': 'str',
        'maturity_amount': 'Money',
        'associated_provider_account_id': 'list[int]',
        'is_asset': 'bool',
        'principal_balance': 'Money',
        'total_cash_limit': 'Money',
        'maturity_date': 'str',
        'minimum_amount_due': 'Money',
        'annual_percentage_yield': 'float',
        'account_type': 'str',
        'origination_date': 'str',
        'total_vested_balance': 'Money',
        'reward_balance': 'list[RewardBalance]',
        'source_account_status': 'str',
        'linked_account_ids': 'list[int]',
        'derived_apr': 'float',
        'policy_effective_date': 'str',
        'total_unvested_balance': 'Money',
        'annuity_balance': 'Money',
        'account_name': 'str',
        'total_credit_limit': 'Money',
        'policy_status': 'str',
        'short_balance': 'Money',
        'lender': 'str',
        'last_employee_contribution_amount': 'Money',
        'provider_id': 'str',
        'last_payment_date': 'str',
        'primary_reward_unit': 'str',
        'last_payment_amount': 'Money',
        'remaining_balance': 'Money',
        'user_classification': 'str',
        'bank_transfer_code': 'list[BankTransferCode]',
        'expiration_date': 'str',
        'coverage': 'list[Coverage]',
        'cash_apr': 'float',
        'auto_refresh': 'AutoRefresh',
        'oauth_migration_status': 'str',
        'displayed_name': 'str',
        'full_account_number_list': 'FullAccountNumberList',
        'amount_due': 'Money',
        'current_level': 'str',
        'original_loan_amount': 'Money',
        'policy_to_date': 'str',
        'loan_payoff_details': 'LoanPayoffDetails',
        'payment_profile': 'PaymentProfile',
        'container': 'str',
        'last_employee_contribution_date': 'str',
        'last_payment': 'Money',
        'recurring_payment': 'Money'
    }

    attribute_map = {
        'available_cash': 'availableCash',
        'include_in_net_worth': 'includeInNetWorth',
        'money_market_balance': 'moneyMarketBalance',
        'enrollment_date': 'enrollmentDate',
        'estimated_date': 'estimatedDate',
        'memo': 'memo',
        'guarantor': 'guarantor',
        'interest_paid_last_year': 'interestPaidLastYear',
        'last_updated': 'lastUpdated',
        'balance': 'balance',
        'home_insurance_type': 'homeInsuranceType',
        'id': 'id',
        'cash': 'cash',
        'total_credit_line': 'totalCreditLine',
        'provider_name': 'providerName',
        'valuation_type': 'valuationType',
        'margin_balance': 'marginBalance',
        'apr': 'apr',
        'available_credit': 'availableCredit',
        'current_balance': 'currentBalance',
        'is_manual': 'isManual',
        'profile': 'profile',
        'escrow_balance': 'escrowBalance',
        'next_level': 'nextLevel',
        'classification': 'classification',
        'loan_payoff_amount': 'loanPayoffAmount',
        'interest_rate_type': 'interestRateType',
        'loan_pay_by_date': 'loanPayByDate',
        'face_amount': 'faceAmount',
        'policy_from_date': 'policyFromDate',
        'premium_payment_term': 'premiumPaymentTerm',
        'policy_term': 'policyTerm',
        'repayment_plan_type': 'repaymentPlanType',
        'aggregated_account_type': 'aggregatedAccountType',
        'available_balance': 'availableBalance',
        'account_status': 'accountStatus',
        'life_insurance_type': 'lifeInsuranceType',
        'full_account_number': 'fullAccountNumber',
        'premium': 'premium',
        'aggregation_source': 'aggregationSource',
        'over_draft_limit': 'overDraftLimit',
        'nickname': 'nickname',
        'term': 'term',
        'interest_rate': 'interestRate',
        'death_benefit': 'deathBenefit',
        'address': 'address',
        'cash_value': 'cashValue',
        'holder': 'holder',
        '_401k_loan': '401kLoan',
        'home_value': 'homeValue',
        'account_number': 'accountNumber',
        'created_date': 'createdDate',
        'interest_paid_ytd': 'interestPaidYTD',
        'provider_account_id': 'providerAccountId',
        'collateral': 'collateral',
        'dataset': 'dataset',
        'running_balance': 'runningBalance',
        'source_id': 'sourceId',
        'due_date': 'dueDate',
        'frequency': 'frequency',
        'maturity_amount': 'maturityAmount',
        'associated_provider_account_id': 'associatedProviderAccountId',
        'is_asset': 'isAsset',
        'principal_balance': 'principalBalance',
        'total_cash_limit': 'totalCashLimit',
        'maturity_date': 'maturityDate',
        'minimum_amount_due': 'minimumAmountDue',
        'annual_percentage_yield': 'annualPercentageYield',
        'account_type': 'accountType',
        'origination_date': 'originationDate',
        'total_vested_balance': 'totalVestedBalance',
        'reward_balance': 'rewardBalance',
        'source_account_status': 'sourceAccountStatus',
        'linked_account_ids': 'linkedAccountIds',
        'derived_apr': 'derivedApr',
        'policy_effective_date': 'policyEffectiveDate',
        'total_unvested_balance': 'totalUnvestedBalance',
        'annuity_balance': 'annuityBalance',
        'account_name': 'accountName',
        'total_credit_limit': 'totalCreditLimit',
        'policy_status': 'policyStatus',
        'short_balance': 'shortBalance',
        'lender': 'lender',
        'last_employee_contribution_amount': 'lastEmployeeContributionAmount',
        'provider_id': 'providerId',
        'last_payment_date': 'lastPaymentDate',
        'primary_reward_unit': 'primaryRewardUnit',
        'last_payment_amount': 'lastPaymentAmount',
        'remaining_balance': 'remainingBalance',
        'user_classification': 'userClassification',
        'bank_transfer_code': 'bankTransferCode',
        'expiration_date': 'expirationDate',
        'coverage': 'coverage',
        'cash_apr': 'cashApr',
        'auto_refresh': 'autoRefresh',
        'oauth_migration_status': 'oauthMigrationStatus',
        'displayed_name': 'displayedName',
        'full_account_number_list': 'fullAccountNumberList',
        'amount_due': 'amountDue',
        'current_level': 'currentLevel',
        'original_loan_amount': 'originalLoanAmount',
        'policy_to_date': 'policyToDate',
        'loan_payoff_details': 'loanPayoffDetails',
        'payment_profile': 'paymentProfile',
        'container': 'CONTAINER',
        'last_employee_contribution_date': 'lastEmployeeContributionDate',
        'last_payment': 'lastPayment',
        'recurring_payment': 'recurringPayment'
    }

    def __init__(self, available_cash=None, include_in_net_worth=None, money_market_balance=None, enrollment_date=None, estimated_date=None, memo=None, guarantor=None, interest_paid_last_year=None, last_updated=None, balance=None, home_insurance_type=None, id=None, cash=None, total_credit_line=None, provider_name=None, valuation_type=None, margin_balance=None, apr=None, available_credit=None, current_balance=None, is_manual=None, profile=None, escrow_balance=None, next_level=None, classification=None, loan_payoff_amount=None, interest_rate_type=None, loan_pay_by_date=None, face_amount=None, policy_from_date=None, premium_payment_term=None, policy_term=None, repayment_plan_type=None, aggregated_account_type=None, available_balance=None, account_status=None, life_insurance_type=None, full_account_number=None, premium=None, aggregation_source=None, over_draft_limit=None, nickname=None, term=None, interest_rate=None, death_benefit=None, address=None, cash_value=None, holder=None, _401k_loan=None, home_value=None, account_number=None, created_date=None, interest_paid_ytd=None, provider_account_id=None, collateral=None, dataset=None, running_balance=None, source_id=None, due_date=None, frequency=None, maturity_amount=None, associated_provider_account_id=None, is_asset=None, principal_balance=None, total_cash_limit=None, maturity_date=None, minimum_amount_due=None, annual_percentage_yield=None, account_type=None, origination_date=None, total_vested_balance=None, reward_balance=None, source_account_status=None, linked_account_ids=None, derived_apr=None, policy_effective_date=None, total_unvested_balance=None, annuity_balance=None, account_name=None, total_credit_limit=None, policy_status=None, short_balance=None, lender=None, last_employee_contribution_amount=None, provider_id=None, last_payment_date=None, primary_reward_unit=None, last_payment_amount=None, remaining_balance=None, user_classification=None, bank_transfer_code=None, expiration_date=None, coverage=None, cash_apr=None, auto_refresh=None, oauth_migration_status=None, displayed_name=None, full_account_number_list=None, amount_due=None, current_level=None, original_loan_amount=None, policy_to_date=None, loan_payoff_details=None, payment_profile=None, container=None, last_employee_contribution_date=None, last_payment=None, recurring_payment=None, local_vars_configuration=None):  # noqa: E501
        """Account - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._available_cash = None
        self._include_in_net_worth = None
        self._money_market_balance = None
        self._enrollment_date = None
        self._estimated_date = None
        self._memo = None
        self._guarantor = None
        self._interest_paid_last_year = None
        self._last_updated = None
        self._balance = None
        self._home_insurance_type = None
        self._id = None
        self._cash = None
        self._total_credit_line = None
        self._provider_name = None
        self._valuation_type = None
        self._margin_balance = None
        self._apr = None
        self._available_credit = None
        self._current_balance = None
        self._is_manual = None
        self._profile = None
        self._escrow_balance = None
        self._next_level = None
        self._classification = None
        self._loan_payoff_amount = None
        self._interest_rate_type = None
        self._loan_pay_by_date = None
        self._face_amount = None
        self._policy_from_date = None
        self._premium_payment_term = None
        self._policy_term = None
        self._repayment_plan_type = None
        self._aggregated_account_type = None
        self._available_balance = None
        self._account_status = None
        self._life_insurance_type = None
        self._full_account_number = None
        self._premium = None
        self._aggregation_source = None
        self._over_draft_limit = None
        self._nickname = None
        self._term = None
        self._interest_rate = None
        self._death_benefit = None
        self._address = None
        self._cash_value = None
        self._holder = None
        self.__401k_loan = None
        self._home_value = None
        self._account_number = None
        self._created_date = None
        self._interest_paid_ytd = None
        self._provider_account_id = None
        self._collateral = None
        self._dataset = None
        self._running_balance = None
        self._source_id = None
        self._due_date = None
        self._frequency = None
        self._maturity_amount = None
        self._associated_provider_account_id = None
        self._is_asset = None
        self._principal_balance = None
        self._total_cash_limit = None
        self._maturity_date = None
        self._minimum_amount_due = None
        self._annual_percentage_yield = None
        self._account_type = None
        self._origination_date = None
        self._total_vested_balance = None
        self._reward_balance = None
        self._source_account_status = None
        self._linked_account_ids = None
        self._derived_apr = None
        self._policy_effective_date = None
        self._total_unvested_balance = None
        self._annuity_balance = None
        self._account_name = None
        self._total_credit_limit = None
        self._policy_status = None
        self._short_balance = None
        self._lender = None
        self._last_employee_contribution_amount = None
        self._provider_id = None
        self._last_payment_date = None
        self._primary_reward_unit = None
        self._last_payment_amount = None
        self._remaining_balance = None
        self._user_classification = None
        self._bank_transfer_code = None
        self._expiration_date = None
        self._coverage = None
        self._cash_apr = None
        self._auto_refresh = None
        self._oauth_migration_status = None
        self._displayed_name = None
        self._full_account_number_list = None
        self._amount_due = None
        self._current_level = None
        self._original_loan_amount = None
        self._policy_to_date = None
        self._loan_payoff_details = None
        self._payment_profile = None
        self._container = None
        self._last_employee_contribution_date = None
        self._last_payment = None
        self._recurring_payment = None
        self.discriminator = None

        if available_cash is not None:
            self.available_cash = available_cash
        if include_in_net_worth is not None:
            self.include_in_net_worth = include_in_net_worth
        if money_market_balance is not None:
            self.money_market_balance = money_market_balance
        if enrollment_date is not None:
            self.enrollment_date = enrollment_date
        if estimated_date is not None:
            self.estimated_date = estimated_date
        if memo is not None:
            self.memo = memo
        if guarantor is not None:
            self.guarantor = guarantor
        if interest_paid_last_year is not None:
            self.interest_paid_last_year = interest_paid_last_year
        if last_updated is not None:
            self.last_updated = last_updated
        if balance is not None:
            self.balance = balance
        if home_insurance_type is not None:
            self.home_insurance_type = home_insurance_type
        if id is not None:
            self.id = id
        if cash is not None:
            self.cash = cash
        if total_credit_line is not None:
            self.total_credit_line = total_credit_line
        if provider_name is not None:
            self.provider_name = provider_name
        if valuation_type is not None:
            self.valuation_type = valuation_type
        if margin_balance is not None:
            self.margin_balance = margin_balance
        if apr is not None:
            self.apr = apr
        if available_credit is not None:
            self.available_credit = available_credit
        if current_balance is not None:
            self.current_balance = current_balance
        if is_manual is not None:
            self.is_manual = is_manual
        if profile is not None:
            self.profile = profile
        if escrow_balance is not None:
            self.escrow_balance = escrow_balance
        if next_level is not None:
            self.next_level = next_level
        if classification is not None:
            self.classification = classification
        if loan_payoff_amount is not None:
            self.loan_payoff_amount = loan_payoff_amount
        if interest_rate_type is not None:
            self.interest_rate_type = interest_rate_type
        if loan_pay_by_date is not None:
            self.loan_pay_by_date = loan_pay_by_date
        if face_amount is not None:
            self.face_amount = face_amount
        if policy_from_date is not None:
            self.policy_from_date = policy_from_date
        if premium_payment_term is not None:
            self.premium_payment_term = premium_payment_term
        if policy_term is not None:
            self.policy_term = policy_term
        if repayment_plan_type is not None:
            self.repayment_plan_type = repayment_plan_type
        if aggregated_account_type is not None:
            self.aggregated_account_type = aggregated_account_type
        if available_balance is not None:
            self.available_balance = available_balance
        if account_status is not None:
            self.account_status = account_status
        if life_insurance_type is not None:
            self.life_insurance_type = life_insurance_type
        if full_account_number is not None:
            self.full_account_number = full_account_number
        if premium is not None:
            self.premium = premium
        if aggregation_source is not None:
            self.aggregation_source = aggregation_source
        if over_draft_limit is not None:
            self.over_draft_limit = over_draft_limit
        if nickname is not None:
            self.nickname = nickname
        if term is not None:
            self.term = term
        if interest_rate is not None:
            self.interest_rate = interest_rate
        if death_benefit is not None:
            self.death_benefit = death_benefit
        if address is not None:
            self.address = address
        if cash_value is not None:
            self.cash_value = cash_value
        if holder is not None:
            self.holder = holder
        if _401k_loan is not None:
            self._401k_loan = _401k_loan
        if home_value is not None:
            self.home_value = home_value
        if account_number is not None:
            self.account_number = account_number
        if created_date is not None:
            self.created_date = created_date
        if interest_paid_ytd is not None:
            self.interest_paid_ytd = interest_paid_ytd
        if provider_account_id is not None:
            self.provider_account_id = provider_account_id
        if collateral is not None:
            self.collateral = collateral
        if dataset is not None:
            self.dataset = dataset
        if running_balance is not None:
            self.running_balance = running_balance
        if source_id is not None:
            self.source_id = source_id
        if due_date is not None:
            self.due_date = due_date
        if frequency is not None:
            self.frequency = frequency
        if maturity_amount is not None:
            self.maturity_amount = maturity_amount
        if associated_provider_account_id is not None:
            self.associated_provider_account_id = associated_provider_account_id
        if is_asset is not None:
            self.is_asset = is_asset
        if principal_balance is not None:
            self.principal_balance = principal_balance
        if total_cash_limit is not None:
            self.total_cash_limit = total_cash_limit
        if maturity_date is not None:
            self.maturity_date = maturity_date
        if minimum_amount_due is not None:
            self.minimum_amount_due = minimum_amount_due
        if annual_percentage_yield is not None:
            self.annual_percentage_yield = annual_percentage_yield
        if account_type is not None:
            self.account_type = account_type
        if origination_date is not None:
            self.origination_date = origination_date
        if total_vested_balance is not None:
            self.total_vested_balance = total_vested_balance
        if reward_balance is not None:
            self.reward_balance = reward_balance
        if source_account_status is not None:
            self.source_account_status = source_account_status
        if linked_account_ids is not None:
            self.linked_account_ids = linked_account_ids
        if derived_apr is not None:
            self.derived_apr = derived_apr
        if policy_effective_date is not None:
            self.policy_effective_date = policy_effective_date
        if total_unvested_balance is not None:
            self.total_unvested_balance = total_unvested_balance
        if annuity_balance is not None:
            self.annuity_balance = annuity_balance
        if account_name is not None:
            self.account_name = account_name
        if total_credit_limit is not None:
            self.total_credit_limit = total_credit_limit
        if policy_status is not None:
            self.policy_status = policy_status
        if short_balance is not None:
            self.short_balance = short_balance
        if lender is not None:
            self.lender = lender
        if last_employee_contribution_amount is not None:
            self.last_employee_contribution_amount = last_employee_contribution_amount
        if provider_id is not None:
            self.provider_id = provider_id
        if last_payment_date is not None:
            self.last_payment_date = last_payment_date
        if primary_reward_unit is not None:
            self.primary_reward_unit = primary_reward_unit
        if last_payment_amount is not None:
            self.last_payment_amount = last_payment_amount
        if remaining_balance is not None:
            self.remaining_balance = remaining_balance
        if user_classification is not None:
            self.user_classification = user_classification
        if bank_transfer_code is not None:
            self.bank_transfer_code = bank_transfer_code
        if expiration_date is not None:
            self.expiration_date = expiration_date
        if coverage is not None:
            self.coverage = coverage
        if cash_apr is not None:
            self.cash_apr = cash_apr
        if auto_refresh is not None:
            self.auto_refresh = auto_refresh
        if oauth_migration_status is not None:
            self.oauth_migration_status = oauth_migration_status
        if displayed_name is not None:
            self.displayed_name = displayed_name
        if full_account_number_list is not None:
            self.full_account_number_list = full_account_number_list
        if amount_due is not None:
            self.amount_due = amount_due
        if current_level is not None:
            self.current_level = current_level
        if original_loan_amount is not None:
            self.original_loan_amount = original_loan_amount
        if policy_to_date is not None:
            self.policy_to_date = policy_to_date
        if loan_payoff_details is not None:
            self.loan_payoff_details = loan_payoff_details
        if payment_profile is not None:
            self.payment_profile = payment_profile
        if container is not None:
            self.container = container
        if last_employee_contribution_date is not None:
            self.last_employee_contribution_date = last_employee_contribution_date
        if last_payment is not None:
            self.last_payment = last_payment
        if recurring_payment is not None:
            self.recurring_payment = recurring_payment

    @property
    def available_cash(self):
        """Gets the available_cash of this Account.  # noqa: E501


        :return: The available_cash of this Account.  # noqa: E501
        :rtype: Money
        """
        return self._available_cash

    @available_cash.setter
    def available_cash(self, available_cash):
        """Sets the available_cash of this Account.


        :param available_cash: The available_cash of this Account.  # noqa: E501
        :type available_cash: Money
        """

        self._available_cash = available_cash

    @property
    def include_in_net_worth(self):
        """Gets the include_in_net_worth of this Account.  # noqa: E501

        Used to determine  whether an account to be considered in the networth calculation.<br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: bank,creditCard,loan,investment,insurance,realEstate,otherAssets,otherLiabilities<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>  # noqa: E501

        :return: The include_in_net_worth of this Account.  # noqa: E501
        :rtype: bool
        """
        return self._include_in_net_worth

    @include_in_net_worth.setter
    def include_in_net_worth(self, include_in_net_worth):
        """Sets the include_in_net_worth of this Account.

        Used to determine  whether an account to be considered in the networth calculation.<br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: bank,creditCard,loan,investment,insurance,realEstate,otherAssets,otherLiabilities<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>  # noqa: E501

        :param include_in_net_worth: The include_in_net_worth of this Account.  # noqa: E501
        :type include_in_net_worth: bool
        """

        self._include_in_net_worth = include_in_net_worth

    @property
    def money_market_balance(self):
        """Gets the money_market_balance of this Account.  # noqa: E501


        :return: The money_market_balance of this Account.  # noqa: E501
        :rtype: Money
        """
        return self._money_market_balance

    @money_market_balance.setter
    def money_market_balance(self, money_market_balance):
        """Sets the money_market_balance of this Account.


        :param money_market_balance: The money_market_balance of this Account.  # noqa: E501
        :type money_market_balance: Money
        """

        self._money_market_balance = money_market_balance

    @property
    def enrollment_date(self):
        """Gets the enrollment_date of this Account.  # noqa: E501

        Date on which the user is enrolled on the rewards program.<br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: reward<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>  # noqa: E501

        :return: The enrollment_date of this Account.  # noqa: E501
        :rtype: str
        """
        return self._enrollment_date

    @enrollment_date.setter
    def enrollment_date(self, enrollment_date):
        """Sets the enrollment_date of this Account.

        Date on which the user is enrolled on the rewards program.<br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: reward<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>  # noqa: E501

        :param enrollment_date: The enrollment_date of this Account.  # noqa: E501
        :type enrollment_date: str
        """

        self._enrollment_date = enrollment_date

    @property
    def estimated_date(self):
        """Gets the estimated_date of this Account.  # noqa: E501

        The date on which the home value was estimated.<br><br><b>Aggregated / Manual</b>: Manual<br><b>Applicable containers</b>: realEstate<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>  # noqa: E501

        :return: The estimated_date of this Account.  # noqa: E501
        :rtype: str
        """
        return self._estimated_date

    @estimated_date.setter
    def estimated_date(self, estimated_date):
        """Sets the estimated_date of this Account.

        The date on which the home value was estimated.<br><br><b>Aggregated / Manual</b>: Manual<br><b>Applicable containers</b>: realEstate<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>  # noqa: E501

        :param estimated_date: The estimated_date of this Account.  # noqa: E501
        :type estimated_date: str
        """

        self._estimated_date = estimated_date

    @property
    def memo(self):
        """Gets the memo of this Account.  # noqa: E501

        The additional description or notes given by the user.<br><br><b>Aggregated / Manual</b>: Both <br><b>Applicable containers</b>: All containers<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>  # noqa: E501

        :return: The memo of this Account.  # noqa: E501
        :rtype: str
        """
        return self._memo

    @memo.setter
    def memo(self, memo):
        """Sets the memo of this Account.

        The additional description or notes given by the user.<br><br><b>Aggregated / Manual</b>: Both <br><b>Applicable containers</b>: All containers<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>  # noqa: E501

        :param memo: The memo of this Account.  # noqa: E501
        :type memo: str
        """

        self._memo = memo

    @property
    def guarantor(self):
        """Gets the guarantor of this Account.  # noqa: E501

        A nonprofit or state organization that works with lender, servicer, school, and the Department of Education to help successfully repay Federal Family Education Loan Program (FFELP) loans. If FFELP student loans default, the guarantor takes ownership of them.<br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: loan<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>  # noqa: E501

        :return: The guarantor of this Account.  # noqa: E501
        :rtype: str
        """
        return self._guarantor

    @guarantor.setter
    def guarantor(self, guarantor):
        """Sets the guarantor of this Account.

        A nonprofit or state organization that works with lender, servicer, school, and the Department of Education to help successfully repay Federal Family Education Loan Program (FFELP) loans. If FFELP student loans default, the guarantor takes ownership of them.<br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: loan<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>  # noqa: E501

        :param guarantor: The guarantor of this Account.  # noqa: E501
        :type guarantor: str
        """

        self._guarantor = guarantor

    @property
    def interest_paid_last_year(self):
        """Gets the interest_paid_last_year of this Account.  # noqa: E501


        :return: The interest_paid_last_year of this Account.  # noqa: E501
        :rtype: Money
        """
        return self._interest_paid_last_year

    @interest_paid_last_year.setter
    def interest_paid_last_year(self, interest_paid_last_year):
        """Sets the interest_paid_last_year of this Account.


        :param interest_paid_last_year: The interest_paid_last_year of this Account.  # noqa: E501
        :type interest_paid_last_year: Money
        """

        self._interest_paid_last_year = interest_paid_last_year

    @property
    def last_updated(self):
        """Gets the last_updated of this Account.  # noqa: E501

        The date time the account information was last retrieved from the provider site and updated in the Yodlee system.<br><br><b>Aggregated / Manual</b>: Both <br><b>Applicable containers</b>: All containers<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>  # noqa: E501

        :return: The last_updated of this Account.  # noqa: E501
        :rtype: str
        """
        return self._last_updated

    @last_updated.setter
    def last_updated(self, last_updated):
        """Sets the last_updated of this Account.

        The date time the account information was last retrieved from the provider site and updated in the Yodlee system.<br><br><b>Aggregated / Manual</b>: Both <br><b>Applicable containers</b>: All containers<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>  # noqa: E501

        :param last_updated: The last_updated of this Account.  # noqa: E501
        :type last_updated: str
        """

        self._last_updated = last_updated

    @property
    def balance(self):
        """Gets the balance of this Account.  # noqa: E501


        :return: The balance of this Account.  # noqa: E501
        :rtype: Money
        """
        return self._balance

    @balance.setter
    def balance(self, balance):
        """Sets the balance of this Account.


        :param balance: The balance of this Account.  # noqa: E501
        :type balance: Money
        """

        self._balance = balance

    @property
    def home_insurance_type(self):
        """Gets the home_insurance_type of this Account.  # noqa: E501

        Type of home insurance, like -<ul><li>HOME_OWNER</li><li>RENTAL</li><li>RENTER</li><li>etc..</li></ul><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: insurance<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul><b>Applicable Values</b><br>  # noqa: E501

        :return: The home_insurance_type of this Account.  # noqa: E501
        :rtype: str
        """
        return self._home_insurance_type

    @home_insurance_type.setter
    def home_insurance_type(self, home_insurance_type):
        """Sets the home_insurance_type of this Account.

        Type of home insurance, like -<ul><li>HOME_OWNER</li><li>RENTAL</li><li>RENTER</li><li>etc..</li></ul><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: insurance<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul><b>Applicable Values</b><br>  # noqa: E501

        :param home_insurance_type: The home_insurance_type of this Account.  # noqa: E501
        :type home_insurance_type: str
        """
        allowed_values = ["HOME_OWNER", "RENTAL", "RENTER", "UNKNOWN", "OTHER"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and home_insurance_type not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `home_insurance_type` ({0}), must be one of {1}"  # noqa: E501
                .format(home_insurance_type, allowed_values)
            )

        self._home_insurance_type = home_insurance_type

    @property
    def id(self):
        """Gets the id of this Account.  # noqa: E501

        The primary key of the account resource and the unique identifier for the account.<br><br><b>Aggregated / Manual</b>: Both <br><b>Applicable containers</b>: All containers<br><b>Endpoints</b>:<ul><li>GET accounts </li><li>GET accounts/{accountId}</li><li>GET investmentOptions</li><li>GET accounts/historicalBalances</li><li>POST accounts</li><li>GET dataExtracts/userData</li></ul>  # noqa: E501

        :return: The id of this Account.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Account.

        The primary key of the account resource and the unique identifier for the account.<br><br><b>Aggregated / Manual</b>: Both <br><b>Applicable containers</b>: All containers<br><b>Endpoints</b>:<ul><li>GET accounts </li><li>GET accounts/{accountId}</li><li>GET investmentOptions</li><li>GET accounts/historicalBalances</li><li>POST accounts</li><li>GET dataExtracts/userData</li></ul>  # noqa: E501

        :param id: The id of this Account.  # noqa: E501
        :type id: int
        """

        self._id = id

    @property
    def cash(self):
        """Gets the cash of this Account.  # noqa: E501


        :return: The cash of this Account.  # noqa: E501
        :rtype: Money
        """
        return self._cash

    @cash.setter
    def cash(self, cash):
        """Sets the cash of this Account.


        :param cash: The cash of this Account.  # noqa: E501
        :type cash: Money
        """

        self._cash = cash

    @property
    def total_credit_line(self):
        """Gets the total_credit_line of this Account.  # noqa: E501


        :return: The total_credit_line of this Account.  # noqa: E501
        :rtype: Money
        """
        return self._total_credit_line

    @total_credit_line.setter
    def total_credit_line(self, total_credit_line):
        """Sets the total_credit_line of this Account.


        :param total_credit_line: The total_credit_line of this Account.  # noqa: E501
        :type total_credit_line: Money
        """

        self._total_credit_line = total_credit_line

    @property
    def provider_name(self):
        """Gets the provider_name of this Account.  # noqa: E501

        Service provider or institution name where the account originates. This belongs to the provider resource.<br><br><b>Aggregated / Manual</b>: Both <br><b>Applicable containers</b>: All containers<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>  # noqa: E501

        :return: The provider_name of this Account.  # noqa: E501
        :rtype: str
        """
        return self._provider_name

    @provider_name.setter
    def provider_name(self, provider_name):
        """Sets the provider_name of this Account.

        Service provider or institution name where the account originates. This belongs to the provider resource.<br><br><b>Aggregated / Manual</b>: Both <br><b>Applicable containers</b>: All containers<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>  # noqa: E501

        :param provider_name: The provider_name of this Account.  # noqa: E501
        :type provider_name: str
        """

        self._provider_name = provider_name

    @property
    def valuation_type(self):
        """Gets the valuation_type of this Account.  # noqa: E501

        The valuation type indicates whether the home value is calculated either manually or by Yodlee Partners.<br><br><b>Aggregated / Manual</b>: Manual<br><b>Applicable containers</b>: realEstate<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul><b>Applicable Values</b><br>  # noqa: E501

        :return: The valuation_type of this Account.  # noqa: E501
        :rtype: str
        """
        return self._valuation_type

    @valuation_type.setter
    def valuation_type(self, valuation_type):
        """Sets the valuation_type of this Account.

        The valuation type indicates whether the home value is calculated either manually or by Yodlee Partners.<br><br><b>Aggregated / Manual</b>: Manual<br><b>Applicable containers</b>: realEstate<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul><b>Applicable Values</b><br>  # noqa: E501

        :param valuation_type: The valuation_type of this Account.  # noqa: E501
        :type valuation_type: str
        """
        allowed_values = ["SYSTEM", "MANUAL"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and valuation_type not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `valuation_type` ({0}), must be one of {1}"  # noqa: E501
                .format(valuation_type, allowed_values)
            )

        self._valuation_type = valuation_type

    @property
    def margin_balance(self):
        """Gets the margin_balance of this Account.  # noqa: E501


        :return: The margin_balance of this Account.  # noqa: E501
        :rtype: Money
        """
        return self._margin_balance

    @margin_balance.setter
    def margin_balance(self, margin_balance):
        """Sets the margin_balance of this Account.


        :param margin_balance: The margin_balance of this Account.  # noqa: E501
        :type margin_balance: Money
        """

        self._margin_balance = margin_balance

    @property
    def apr(self):
        """Gets the apr of this Account.  # noqa: E501

        The annual percentage rate (APR) is the yearly rate of interest on the credit card account.<br><b>Additional Details:</b> The yearly percentage rate charged when a balance is held on a credit card. This rate of interest is applied every month on the outstanding credit card balance.<br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: creditCard<br><b>Endpoints</b>:<br><ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>  # noqa: E501

        :return: The apr of this Account.  # noqa: E501
        :rtype: float
        """
        return self._apr

    @apr.setter
    def apr(self, apr):
        """Sets the apr of this Account.

        The annual percentage rate (APR) is the yearly rate of interest on the credit card account.<br><b>Additional Details:</b> The yearly percentage rate charged when a balance is held on a credit card. This rate of interest is applied every month on the outstanding credit card balance.<br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: creditCard<br><b>Endpoints</b>:<br><ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>  # noqa: E501

        :param apr: The apr of this Account.  # noqa: E501
        :type apr: float
        """

        self._apr = apr

    @property
    def available_credit(self):
        """Gets the available_credit of this Account.  # noqa: E501


        :return: The available_credit of this Account.  # noqa: E501
        :rtype: Money
        """
        return self._available_credit

    @available_credit.setter
    def available_credit(self, available_credit):
        """Sets the available_credit of this Account.


        :param available_credit: The available_credit of this Account.  # noqa: E501
        :type available_credit: Money
        """

        self._available_credit = available_credit

    @property
    def current_balance(self):
        """Gets the current_balance of this Account.  # noqa: E501


        :return: The current_balance of this Account.  # noqa: E501
        :rtype: Money
        """
        return self._current_balance

    @current_balance.setter
    def current_balance(self, current_balance):
        """Sets the current_balance of this Account.


        :param current_balance: The current_balance of this Account.  # noqa: E501
        :type current_balance: Money
        """

        self._current_balance = current_balance

    @property
    def is_manual(self):
        """Gets the is_manual of this Account.  # noqa: E501

        Indicates if an account is aggregated from a site or it is a manual account i.e. account information manually provided by the user.<br><b>Aggregated / Manual</b>: Both <br><b>Applicable containers</b>: All containers<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>  # noqa: E501

        :return: The is_manual of this Account.  # noqa: E501
        :rtype: bool
        """
        return self._is_manual

    @is_manual.setter
    def is_manual(self, is_manual):
        """Sets the is_manual of this Account.

        Indicates if an account is aggregated from a site or it is a manual account i.e. account information manually provided by the user.<br><b>Aggregated / Manual</b>: Both <br><b>Applicable containers</b>: All containers<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>  # noqa: E501

        :param is_manual: The is_manual of this Account.  # noqa: E501
        :type is_manual: bool
        """

        self._is_manual = is_manual

    @property
    def profile(self):
        """Gets the profile of this Account.  # noqa: E501


        :return: The profile of this Account.  # noqa: E501
        :rtype: AccountProfile
        """
        return self._profile

    @profile.setter
    def profile(self, profile):
        """Sets the profile of this Account.


        :param profile: The profile of this Account.  # noqa: E501
        :type profile: AccountProfile
        """

        self._profile = profile

    @property
    def escrow_balance(self):
        """Gets the escrow_balance of this Account.  # noqa: E501


        :return: The escrow_balance of this Account.  # noqa: E501
        :rtype: Money
        """
        return self._escrow_balance

    @escrow_balance.setter
    def escrow_balance(self, escrow_balance):
        """Sets the escrow_balance of this Account.


        :param escrow_balance: The escrow_balance of this Account.  # noqa: E501
        :type escrow_balance: Money
        """

        self._escrow_balance = escrow_balance

    @property
    def next_level(self):
        """Gets the next_level of this Account.  # noqa: E501

        The eligible next level of the rewards program.<br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: reward<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>  # noqa: E501

        :return: The next_level of this Account.  # noqa: E501
        :rtype: str
        """
        return self._next_level

    @next_level.setter
    def next_level(self, next_level):
        """Sets the next_level of this Account.

        The eligible next level of the rewards program.<br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: reward<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>  # noqa: E501

        :param next_level: The next_level of this Account.  # noqa: E501
        :type next_level: str
        """

        self._next_level = next_level

    @property
    def classification(self):
        """Gets the classification of this Account.  # noqa: E501

        The classification of the account such as personal, corporate, etc.<br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: bank, creditCard, investment, reward, loan, insurance<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul><b>Applicable Values</b><br>  # noqa: E501

        :return: The classification of this Account.  # noqa: E501
        :rtype: str
        """
        return self._classification

    @classification.setter
    def classification(self, classification):
        """Sets the classification of this Account.

        The classification of the account such as personal, corporate, etc.<br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: bank, creditCard, investment, reward, loan, insurance<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul><b>Applicable Values</b><br>  # noqa: E501

        :param classification: The classification of this Account.  # noqa: E501
        :type classification: str
        """
        allowed_values = ["OTHER", "PERSONAL", "CORPORATE", "SMALL_BUSINESS", "TRUST", "ADD_ON_CARD", "VIRTUAL_CARD"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and classification not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `classification` ({0}), must be one of {1}"  # noqa: E501
                .format(classification, allowed_values)
            )

        self._classification = classification

    @property
    def loan_payoff_amount(self):
        """Gets the loan_payoff_amount of this Account.  # noqa: E501


        :return: The loan_payoff_amount of this Account.  # noqa: E501
        :rtype: Money
        """
        return self._loan_payoff_amount

    @loan_payoff_amount.setter
    def loan_payoff_amount(self, loan_payoff_amount):
        """Sets the loan_payoff_amount of this Account.


        :param loan_payoff_amount: The loan_payoff_amount of this Account.  # noqa: E501
        :type loan_payoff_amount: Money
        """

        self._loan_payoff_amount = loan_payoff_amount

    @property
    def interest_rate_type(self):
        """Gets the interest_rate_type of this Account.  # noqa: E501

        The type of the interest rate, for example, fixed or variable.<br><b>Applicable containers</b>: loan<br><b>Aggregated / Manual</b>: Aggregated<br><b>Endpoints</b>:<br><ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul><b>Applicable Values</b><br>  # noqa: E501

        :return: The interest_rate_type of this Account.  # noqa: E501
        :rtype: str
        """
        return self._interest_rate_type

    @interest_rate_type.setter
    def interest_rate_type(self, interest_rate_type):
        """Sets the interest_rate_type of this Account.

        The type of the interest rate, for example, fixed or variable.<br><b>Applicable containers</b>: loan<br><b>Aggregated / Manual</b>: Aggregated<br><b>Endpoints</b>:<br><ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul><b>Applicable Values</b><br>  # noqa: E501

        :param interest_rate_type: The interest_rate_type of this Account.  # noqa: E501
        :type interest_rate_type: str
        """
        allowed_values = ["FIXED", "VARIABLE", "UNKNOWN", "OTHER"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and interest_rate_type not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `interest_rate_type` ({0}), must be one of {1}"  # noqa: E501
                .format(interest_rate_type, allowed_values)
            )

        self._interest_rate_type = interest_rate_type

    @property
    def loan_pay_by_date(self):
        """Gets the loan_pay_by_date of this Account.  # noqa: E501

        The date by which the payoff amount should be paid.<br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: loan<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>  # noqa: E501

        :return: The loan_pay_by_date of this Account.  # noqa: E501
        :rtype: str
        """
        return self._loan_pay_by_date

    @loan_pay_by_date.setter
    def loan_pay_by_date(self, loan_pay_by_date):
        """Sets the loan_pay_by_date of this Account.

        The date by which the payoff amount should be paid.<br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: loan<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>  # noqa: E501

        :param loan_pay_by_date: The loan_pay_by_date of this Account.  # noqa: E501
        :type loan_pay_by_date: str
        """

        self._loan_pay_by_date = loan_pay_by_date

    @property
    def face_amount(self):
        """Gets the face_amount of this Account.  # noqa: E501


        :return: The face_amount of this Account.  # noqa: E501
        :rtype: Money
        """
        return self._face_amount

    @face_amount.setter
    def face_amount(self, face_amount):
        """Sets the face_amount of this Account.


        :param face_amount: The face_amount of this Account.  # noqa: E501
        :type face_amount: Money
        """

        self._face_amount = face_amount

    @property
    def policy_from_date(self):
        """Gets the policy_from_date of this Account.  # noqa: E501

        The date the insurance policy began.<br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: insurance<br><b>Endpoints</b>:<br><ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>  # noqa: E501

        :return: The policy_from_date of this Account.  # noqa: E501
        :rtype: str
        """
        return self._policy_from_date

    @policy_from_date.setter
    def policy_from_date(self, policy_from_date):
        """Sets the policy_from_date of this Account.

        The date the insurance policy began.<br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: insurance<br><b>Endpoints</b>:<br><ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>  # noqa: E501

        :param policy_from_date: The policy_from_date of this Account.  # noqa: E501
        :type policy_from_date: str
        """

        self._policy_from_date = policy_from_date

    @property
    def premium_payment_term(self):
        """Gets the premium_payment_term of this Account.  # noqa: E501

        The number of years for which premium payments have to be made in a policy.<br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: insurance<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>  # noqa: E501

        :return: The premium_payment_term of this Account.  # noqa: E501
        :rtype: str
        """
        return self._premium_payment_term

    @premium_payment_term.setter
    def premium_payment_term(self, premium_payment_term):
        """Sets the premium_payment_term of this Account.

        The number of years for which premium payments have to be made in a policy.<br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: insurance<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>  # noqa: E501

        :param premium_payment_term: The premium_payment_term of this Account.  # noqa: E501
        :type premium_payment_term: str
        """

        self._premium_payment_term = premium_payment_term

    @property
    def policy_term(self):
        """Gets the policy_term of this Account.  # noqa: E501

        The duration for which the policy is valid or in effect. For example, one year, five years, etc.<br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: insurance<br><b>Endpoints</b>:<br><ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>  # noqa: E501

        :return: The policy_term of this Account.  # noqa: E501
        :rtype: str
        """
        return self._policy_term

    @policy_term.setter
    def policy_term(self, policy_term):
        """Sets the policy_term of this Account.

        The duration for which the policy is valid or in effect. For example, one year, five years, etc.<br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: insurance<br><b>Endpoints</b>:<br><ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>  # noqa: E501

        :param policy_term: The policy_term of this Account.  # noqa: E501
        :type policy_term: str
        """

        self._policy_term = policy_term

    @property
    def repayment_plan_type(self):
        """Gets the repayment_plan_type of this Account.  # noqa: E501

        The type of repayment plan that the borrower prefers to repay the loan. <br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: loan<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul><b>Applicable Values:</b><br>  # noqa: E501

        :return: The repayment_plan_type of this Account.  # noqa: E501
        :rtype: str
        """
        return self._repayment_plan_type

    @repayment_plan_type.setter
    def repayment_plan_type(self, repayment_plan_type):
        """Sets the repayment_plan_type of this Account.

        The type of repayment plan that the borrower prefers to repay the loan. <br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: loan<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul><b>Applicable Values:</b><br>  # noqa: E501

        :param repayment_plan_type: The repayment_plan_type of this Account.  # noqa: E501
        :type repayment_plan_type: str
        """
        allowed_values = ["STANDARD", "GRADUATED", "EXTENDED", "INCOME_BASED", "INCOME_CONTINGENT", "INCOME_SENSITIVE", "PAY_AS_YOU_EARN", "REVISED_PAY_AS_YOU_EARN"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and repayment_plan_type not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `repayment_plan_type` ({0}), must be one of {1}"  # noqa: E501
                .format(repayment_plan_type, allowed_values)
            )

        self._repayment_plan_type = repayment_plan_type

    @property
    def aggregated_account_type(self):
        """Gets the aggregated_account_type of this Account.  # noqa: E501

        The type of account that is aggregated.  # noqa: E501

        :return: The aggregated_account_type of this Account.  # noqa: E501
        :rtype: str
        """
        return self._aggregated_account_type

    @aggregated_account_type.setter
    def aggregated_account_type(self, aggregated_account_type):
        """Sets the aggregated_account_type of this Account.

        The type of account that is aggregated.  # noqa: E501

        :param aggregated_account_type: The aggregated_account_type of this Account.  # noqa: E501
        :type aggregated_account_type: str
        """

        self._aggregated_account_type = aggregated_account_type

    @property
    def available_balance(self):
        """Gets the available_balance of this Account.  # noqa: E501


        :return: The available_balance of this Account.  # noqa: E501
        :rtype: Money
        """
        return self._available_balance

    @available_balance.setter
    def available_balance(self, available_balance):
        """Sets the available_balance of this Account.


        :param available_balance: The available_balance of this Account.  # noqa: E501
        :type available_balance: Money
        """

        self._available_balance = available_balance

    @property
    def account_status(self):
        """Gets the account_status of this Account.  # noqa: E501

        The status of the account that is updated by the consumer through an application or an API. Valid Values: AccountStatus<br><b>Additional Details:</b><br><b>ACTIVE:</b> All the added manual and aggregated accounts status will be made \"ACTIVE\" by default. <br><b>TO_BE_CLOSED:</b> If the aggregated accounts are not found or closed in the data provider site, Yodlee system marks the status as TO_BE_CLOSED<br><b>INACTIVE:</b> Users can update the status as INACTIVE to stop updating and to stop considering the account in other services<br><b>CLOSED:</b> Users can update the status as CLOSED, if the account is closed with the provider. <br><br><b>Aggregated / Manual</b>: Both <br><b>Applicable containers</b>: All containers<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul><b>Applicable Values</b><br>  # noqa: E501

        :return: The account_status of this Account.  # noqa: E501
        :rtype: str
        """
        return self._account_status

    @account_status.setter
    def account_status(self, account_status):
        """Sets the account_status of this Account.

        The status of the account that is updated by the consumer through an application or an API. Valid Values: AccountStatus<br><b>Additional Details:</b><br><b>ACTIVE:</b> All the added manual and aggregated accounts status will be made \"ACTIVE\" by default. <br><b>TO_BE_CLOSED:</b> If the aggregated accounts are not found or closed in the data provider site, Yodlee system marks the status as TO_BE_CLOSED<br><b>INACTIVE:</b> Users can update the status as INACTIVE to stop updating and to stop considering the account in other services<br><b>CLOSED:</b> Users can update the status as CLOSED, if the account is closed with the provider. <br><br><b>Aggregated / Manual</b>: Both <br><b>Applicable containers</b>: All containers<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul><b>Applicable Values</b><br>  # noqa: E501

        :param account_status: The account_status of this Account.  # noqa: E501
        :type account_status: str
        """
        allowed_values = ["ACTIVE", "INACTIVE", "TO_BE_CLOSED", "CLOSED", "DELETED"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and account_status not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `account_status` ({0}), must be one of {1}"  # noqa: E501
                .format(account_status, allowed_values)
            )

        self._account_status = account_status

    @property
    def life_insurance_type(self):
        """Gets the life_insurance_type of this Account.  # noqa: E501

        Type of life insurance.<br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: insurance<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul><b>Applicable Values</b><br>  # noqa: E501

        :return: The life_insurance_type of this Account.  # noqa: E501
        :rtype: str
        """
        return self._life_insurance_type

    @life_insurance_type.setter
    def life_insurance_type(self, life_insurance_type):
        """Sets the life_insurance_type of this Account.

        Type of life insurance.<br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: insurance<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul><b>Applicable Values</b><br>  # noqa: E501

        :param life_insurance_type: The life_insurance_type of this Account.  # noqa: E501
        :type life_insurance_type: str
        """
        allowed_values = ["OTHER", "TERM_LIFE_INSURANCE", "UNIVERSAL_LIFE_INSURANCE", "WHOLE_LIFE_INSURANCE", "VARIABLE_LIFE_INSURANCE", "ULIP", "ENDOWMENT"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and life_insurance_type not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `life_insurance_type` ({0}), must be one of {1}"  # noqa: E501
                .format(life_insurance_type, allowed_values)
            )

        self._life_insurance_type = life_insurance_type

    @property
    def full_account_number(self):
        """Gets the full_account_number of this Account.  # noqa: E501

        Full account number of the account that is included only when include = fullAccountNumber is provided in the request. For student loan account the account number that will be used for ACH or fund transfer<br><br><b>Aggregated / Manual</b>: Both <br><b>Applicable containers</b>: bank, creditCard, investment, insurance, loan, reward, otherAssets, otherLiabilities <br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><b> Note : </b> fullAccountNumber is deprecated and is replaced with fullAccountNumberList in include parameter and response.</ul>  # noqa: E501

        :return: The full_account_number of this Account.  # noqa: E501
        :rtype: str
        """
        return self._full_account_number

    @full_account_number.setter
    def full_account_number(self, full_account_number):
        """Sets the full_account_number of this Account.

        Full account number of the account that is included only when include = fullAccountNumber is provided in the request. For student loan account the account number that will be used for ACH or fund transfer<br><br><b>Aggregated / Manual</b>: Both <br><b>Applicable containers</b>: bank, creditCard, investment, insurance, loan, reward, otherAssets, otherLiabilities <br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><b> Note : </b> fullAccountNumber is deprecated and is replaced with fullAccountNumberList in include parameter and response.</ul>  # noqa: E501

        :param full_account_number: The full_account_number of this Account.  # noqa: E501
        :type full_account_number: str
        """

        self._full_account_number = full_account_number

    @property
    def premium(self):
        """Gets the premium of this Account.  # noqa: E501


        :return: The premium of this Account.  # noqa: E501
        :rtype: Money
        """
        return self._premium

    @premium.setter
    def premium(self, premium):
        """Sets the premium of this Account.


        :param premium: The premium of this Account.  # noqa: E501
        :type premium: Money
        """

        self._premium = premium

    @property
    def aggregation_source(self):
        """Gets the aggregation_source of this Account.  # noqa: E501

        The source through which the account(s) are added in the system.<br><b>Valid Values</b>: SYSTEM, USER<br><b>Applicable containers</b>: All Containers<br><b>Aggregated / Manual</b>: Both <br><b>Endpoints</b>:<br><ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul><b>Applicable Values</b><br>  # noqa: E501

        :return: The aggregation_source of this Account.  # noqa: E501
        :rtype: str
        """
        return self._aggregation_source

    @aggregation_source.setter
    def aggregation_source(self, aggregation_source):
        """Sets the aggregation_source of this Account.

        The source through which the account(s) are added in the system.<br><b>Valid Values</b>: SYSTEM, USER<br><b>Applicable containers</b>: All Containers<br><b>Aggregated / Manual</b>: Both <br><b>Endpoints</b>:<br><ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul><b>Applicable Values</b><br>  # noqa: E501

        :param aggregation_source: The aggregation_source of this Account.  # noqa: E501
        :type aggregation_source: str
        """
        allowed_values = ["SYSTEM", "USER"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and aggregation_source not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `aggregation_source` ({0}), must be one of {1}"  # noqa: E501
                .format(aggregation_source, allowed_values)
            )

        self._aggregation_source = aggregation_source

    @property
    def over_draft_limit(self):
        """Gets the over_draft_limit of this Account.  # noqa: E501


        :return: The over_draft_limit of this Account.  # noqa: E501
        :rtype: Money
        """
        return self._over_draft_limit

    @over_draft_limit.setter
    def over_draft_limit(self, over_draft_limit):
        """Sets the over_draft_limit of this Account.


        :param over_draft_limit: The over_draft_limit of this Account.  # noqa: E501
        :type over_draft_limit: Money
        """

        self._over_draft_limit = over_draft_limit

    @property
    def nickname(self):
        """Gets the nickname of this Account.  # noqa: E501

        The nickname of the account as provided by the consumer to identify an account. The account nickname can be used instead of the account name.<br><br><b>Aggregated / Manual</b>: Both <br><b>Applicable containers</b>: All containers<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>  # noqa: E501

        :return: The nickname of this Account.  # noqa: E501
        :rtype: str
        """
        return self._nickname

    @nickname.setter
    def nickname(self, nickname):
        """Sets the nickname of this Account.

        The nickname of the account as provided by the consumer to identify an account. The account nickname can be used instead of the account name.<br><br><b>Aggregated / Manual</b>: Both <br><b>Applicable containers</b>: All containers<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>  # noqa: E501

        :param nickname: The nickname of this Account.  # noqa: E501
        :type nickname: str
        """

        self._nickname = nickname

    @property
    def term(self):
        """Gets the term of this Account.  # noqa: E501

        The tenure for which the CD account is valid  or in case of loan, the number of years/months over which the loan amount  has to be repaid. <br><b>Additional Details:</b><br>  Bank: The Term field is only applicable for the account type CD.Loan: The period for which the loan agreement is in force. The period, before or at the end of which, the loan should either be repaid or renegotiated for another term.<br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: bank, loan<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>  # noqa: E501

        :return: The term of this Account.  # noqa: E501
        :rtype: str
        """
        return self._term

    @term.setter
    def term(self, term):
        """Sets the term of this Account.

        The tenure for which the CD account is valid  or in case of loan, the number of years/months over which the loan amount  has to be repaid. <br><b>Additional Details:</b><br>  Bank: The Term field is only applicable for the account type CD.Loan: The period for which the loan agreement is in force. The period, before or at the end of which, the loan should either be repaid or renegotiated for another term.<br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: bank, loan<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>  # noqa: E501

        :param term: The term of this Account.  # noqa: E501
        :type term: str
        """

        self._term = term

    @property
    def interest_rate(self):
        """Gets the interest_rate of this Account.  # noqa: E501

        <br><b>Bank:</b> The interest rate offered by a FI to its depositors on a bank account.<br><b>Loan:</b> Interest rate applied on the loan.<br><b>Additional Details:</b><br><b>Note:</b> The Interest Rate field is only applicable for the following account types: savings, checking, money market, and certificate of deposit.<br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: bank, loan<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>  # noqa: E501

        :return: The interest_rate of this Account.  # noqa: E501
        :rtype: float
        """
        return self._interest_rate

    @interest_rate.setter
    def interest_rate(self, interest_rate):
        """Sets the interest_rate of this Account.

        <br><b>Bank:</b> The interest rate offered by a FI to its depositors on a bank account.<br><b>Loan:</b> Interest rate applied on the loan.<br><b>Additional Details:</b><br><b>Note:</b> The Interest Rate field is only applicable for the following account types: savings, checking, money market, and certificate of deposit.<br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: bank, loan<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>  # noqa: E501

        :param interest_rate: The interest_rate of this Account.  # noqa: E501
        :type interest_rate: float
        """

        self._interest_rate = interest_rate

    @property
    def death_benefit(self):
        """Gets the death_benefit of this Account.  # noqa: E501


        :return: The death_benefit of this Account.  # noqa: E501
        :rtype: Money
        """
        return self._death_benefit

    @death_benefit.setter
    def death_benefit(self, death_benefit):
        """Sets the death_benefit of this Account.


        :param death_benefit: The death_benefit of this Account.  # noqa: E501
        :type death_benefit: Money
        """

        self._death_benefit = death_benefit

    @property
    def address(self):
        """Gets the address of this Account.  # noqa: E501


        :return: The address of this Account.  # noqa: E501
        :rtype: AccountAddress
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this Account.


        :param address: The address of this Account.  # noqa: E501
        :type address: AccountAddress
        """

        self._address = address

    @property
    def cash_value(self):
        """Gets the cash_value of this Account.  # noqa: E501


        :return: The cash_value of this Account.  # noqa: E501
        :rtype: Money
        """
        return self._cash_value

    @cash_value.setter
    def cash_value(self, cash_value):
        """Sets the cash_value of this Account.


        :param cash_value: The cash_value of this Account.  # noqa: E501
        :type cash_value: Money
        """

        self._cash_value = cash_value

    @property
    def holder(self):
        """Gets the holder of this Account.  # noqa: E501

        Holder details of the account.<br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: bank<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li></ul>  # noqa: E501

        :return: The holder of this Account.  # noqa: E501
        :rtype: list[AccountHolder]
        """
        return self._holder

    @holder.setter
    def holder(self, holder):
        """Sets the holder of this Account.

        Holder details of the account.<br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: bank<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li></ul>  # noqa: E501

        :param holder: The holder of this Account.  # noqa: E501
        :type holder: list[AccountHolder]
        """

        self._holder = holder

    @property
    def _401k_loan(self):
        """Gets the _401k_loan of this Account.  # noqa: E501


        :return: The _401k_loan of this Account.  # noqa: E501
        :rtype: Money
        """
        return self.__401k_loan

    @_401k_loan.setter
    def _401k_loan(self, _401k_loan):
        """Sets the _401k_loan of this Account.


        :param _401k_loan: The _401k_loan of this Account.  # noqa: E501
        :type _401k_loan: Money
        """

        self.__401k_loan = _401k_loan

    @property
    def home_value(self):
        """Gets the home_value of this Account.  # noqa: E501


        :return: The home_value of this Account.  # noqa: E501
        :rtype: Money
        """
        return self._home_value

    @home_value.setter
    def home_value(self, home_value):
        """Sets the home_value of this Account.


        :param home_value: The home_value of this Account.  # noqa: E501
        :type home_value: Money
        """

        self._home_value = home_value

    @property
    def account_number(self):
        """Gets the account_number of this Account.  # noqa: E501

        The account number as it appears on the site. (The POST accounts service response return this field as number)<br><b>Additional Details</b>:<b> Bank/ Loan/ Insurance/ Investment</b>:<br> The account number for the bank account as it appears at the site.<br><b>Credit Card</b>: The account number of the card account as it appears at the site,<br>i.e., the card number.The account number can be full or partial based on how it is displayed in the account summary page of the site.In most cases, the site does not display the full account number in the account summary page and additional navigation is required to aggregate it.<br><b>Applicable containers</b>: All Containers<br><b>Aggregated / Manual</b>: Both <br><b>Endpoints</b>:<br><ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>POST accounts</li><li>GET dataExtracts/userData</li></ul>  # noqa: E501

        :return: The account_number of this Account.  # noqa: E501
        :rtype: str
        """
        return self._account_number

    @account_number.setter
    def account_number(self, account_number):
        """Sets the account_number of this Account.

        The account number as it appears on the site. (The POST accounts service response return this field as number)<br><b>Additional Details</b>:<b> Bank/ Loan/ Insurance/ Investment</b>:<br> The account number for the bank account as it appears at the site.<br><b>Credit Card</b>: The account number of the card account as it appears at the site,<br>i.e., the card number.The account number can be full or partial based on how it is displayed in the account summary page of the site.In most cases, the site does not display the full account number in the account summary page and additional navigation is required to aggregate it.<br><b>Applicable containers</b>: All Containers<br><b>Aggregated / Manual</b>: Both <br><b>Endpoints</b>:<br><ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>POST accounts</li><li>GET dataExtracts/userData</li></ul>  # noqa: E501

        :param account_number: The account_number of this Account.  # noqa: E501
        :type account_number: str
        """

        self._account_number = account_number

    @property
    def created_date(self):
        """Gets the created_date of this Account.  # noqa: E501

        The date on which the account is created in the Yodlee system.<br><b>Additional Details:</b> It is the date when the user links or aggregates the account(s) that are held with the provider to the Yodlee system.<br><br><b>Aggregated / Manual</b>: Both <br><b>Applicable containers</b>: All containers<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>  # noqa: E501

        :return: The created_date of this Account.  # noqa: E501
        :rtype: str
        """
        return self._created_date

    @created_date.setter
    def created_date(self, created_date):
        """Sets the created_date of this Account.

        The date on which the account is created in the Yodlee system.<br><b>Additional Details:</b> It is the date when the user links or aggregates the account(s) that are held with the provider to the Yodlee system.<br><br><b>Aggregated / Manual</b>: Both <br><b>Applicable containers</b>: All containers<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>  # noqa: E501

        :param created_date: The created_date of this Account.  # noqa: E501
        :type created_date: str
        """

        self._created_date = created_date

    @property
    def interest_paid_ytd(self):
        """Gets the interest_paid_ytd of this Account.  # noqa: E501


        :return: The interest_paid_ytd of this Account.  # noqa: E501
        :rtype: Money
        """
        return self._interest_paid_ytd

    @interest_paid_ytd.setter
    def interest_paid_ytd(self, interest_paid_ytd):
        """Sets the interest_paid_ytd of this Account.


        :param interest_paid_ytd: The interest_paid_ytd of this Account.  # noqa: E501
        :type interest_paid_ytd: Money
        """

        self._interest_paid_ytd = interest_paid_ytd

    @property
    def provider_account_id(self):
        """Gets the provider_account_id of this Account.  # noqa: E501

        The primary key of the provider account resource.<br><br><b>Aggregated / Manual</b>: Both <br><b>Applicable containers</b>: All containers<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>  # noqa: E501

        :return: The provider_account_id of this Account.  # noqa: E501
        :rtype: int
        """
        return self._provider_account_id

    @provider_account_id.setter
    def provider_account_id(self, provider_account_id):
        """Sets the provider_account_id of this Account.

        The primary key of the provider account resource.<br><br><b>Aggregated / Manual</b>: Both <br><b>Applicable containers</b>: All containers<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>  # noqa: E501

        :param provider_account_id: The provider_account_id of this Account.  # noqa: E501
        :type provider_account_id: int
        """

        self._provider_account_id = provider_account_id

    @property
    def collateral(self):
        """Gets the collateral of this Account.  # noqa: E501

        Property or possession offered to support a loan that can be seized on a default.<br><b>Applicable containers</b>: loan<br><b>Aggregated / Manual</b>: Aggregated<br><b>Endpoints</b>:<br><ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>  # noqa: E501

        :return: The collateral of this Account.  # noqa: E501
        :rtype: str
        """
        return self._collateral

    @collateral.setter
    def collateral(self, collateral):
        """Sets the collateral of this Account.

        Property or possession offered to support a loan that can be seized on a default.<br><b>Applicable containers</b>: loan<br><b>Aggregated / Manual</b>: Aggregated<br><b>Endpoints</b>:<br><ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>  # noqa: E501

        :param collateral: The collateral of this Account.  # noqa: E501
        :type collateral: str
        """

        self._collateral = collateral

    @property
    def dataset(self):
        """Gets the dataset of this Account.  # noqa: E501

        Logical grouping of dataset attributes into datasets such as Basic Aggregation Data, Account Profile and Documents.<br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: All containers<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>  # noqa: E501

        :return: The dataset of this Account.  # noqa: E501
        :rtype: list[AccountDataset]
        """
        return self._dataset

    @dataset.setter
    def dataset(self, dataset):
        """Sets the dataset of this Account.

        Logical grouping of dataset attributes into datasets such as Basic Aggregation Data, Account Profile and Documents.<br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: All containers<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>  # noqa: E501

        :param dataset: The dataset of this Account.  # noqa: E501
        :type dataset: list[AccountDataset]
        """

        self._dataset = dataset

    @property
    def running_balance(self):
        """Gets the running_balance of this Account.  # noqa: E501


        :return: The running_balance of this Account.  # noqa: E501
        :rtype: Money
        """
        return self._running_balance

    @running_balance.setter
    def running_balance(self, running_balance):
        """Sets the running_balance of this Account.


        :param running_balance: The running_balance of this Account.  # noqa: E501
        :type running_balance: Money
        """

        self._running_balance = running_balance

    @property
    def source_id(self):
        """Gets the source_id of this Account.  # noqa: E501

        A unique ID that the provider site has assigned to the account. The source ID is only available for the HELD accounts.<br><br><b>Applicable containers</b>: bank, creditCard, investment, insurance, loan, reward<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>  # noqa: E501

        :return: The source_id of this Account.  # noqa: E501
        :rtype: str
        """
        return self._source_id

    @source_id.setter
    def source_id(self, source_id):
        """Sets the source_id of this Account.

        A unique ID that the provider site has assigned to the account. The source ID is only available for the HELD accounts.<br><br><b>Applicable containers</b>: bank, creditCard, investment, insurance, loan, reward<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>  # noqa: E501

        :param source_id: The source_id of this Account.  # noqa: E501
        :type source_id: str
        """

        self._source_id = source_id

    @property
    def due_date(self):
        """Gets the due_date of this Account.  # noqa: E501

        The date on which the due amount has to be paid. <br><b>Additional Details:</b><br><b>Credit Card:</b> The monthly date by when the minimum payment is due to be paid on the credit card account. <br><b>Loan:</b> The date on or before which the due amount should be paid.<br><b>Note:</b> The due date at the account-level can differ from the due date field at the statement-level, as the information in the aggregated card account data provides an up-to-date information to the consumer.<br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: creditCard, loan, insurance<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>  # noqa: E501

        :return: The due_date of this Account.  # noqa: E501
        :rtype: str
        """
        return self._due_date

    @due_date.setter
    def due_date(self, due_date):
        """Sets the due_date of this Account.

        The date on which the due amount has to be paid. <br><b>Additional Details:</b><br><b>Credit Card:</b> The monthly date by when the minimum payment is due to be paid on the credit card account. <br><b>Loan:</b> The date on or before which the due amount should be paid.<br><b>Note:</b> The due date at the account-level can differ from the due date field at the statement-level, as the information in the aggregated card account data provides an up-to-date information to the consumer.<br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: creditCard, loan, insurance<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>  # noqa: E501

        :param due_date: The due_date of this Account.  # noqa: E501
        :type due_date: str
        """

        self._due_date = due_date

    @property
    def frequency(self):
        """Gets the frequency of this Account.  # noqa: E501

        The frequency of the billing cycle of the account in case of card. The frequency in which premiums are paid in an insurance policy such as monthly, quarterly, and annually. The frequency in which due amounts are paid in a loan  account.<br><br><b>Aggregated / Manual</b>: Both <br><b>Applicable containers</b>: creditCard, insurance, loan<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul><b>Applicable Values</b><br>  # noqa: E501

        :return: The frequency of this Account.  # noqa: E501
        :rtype: str
        """
        return self._frequency

    @frequency.setter
    def frequency(self, frequency):
        """Sets the frequency of this Account.

        The frequency of the billing cycle of the account in case of card. The frequency in which premiums are paid in an insurance policy such as monthly, quarterly, and annually. The frequency in which due amounts are paid in a loan  account.<br><br><b>Aggregated / Manual</b>: Both <br><b>Applicable containers</b>: creditCard, insurance, loan<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul><b>Applicable Values</b><br>  # noqa: E501

        :param frequency: The frequency of this Account.  # noqa: E501
        :type frequency: str
        """
        allowed_values = ["DAILY", "ONE_TIME", "WEEKLY", "EVERY_2_WEEKS", "SEMI_MONTHLY", "MONTHLY", "QUARTERLY", "SEMI_ANNUALLY", "ANNUALLY", "EVERY_2_MONTHS", "EBILL", "FIRST_DAY_MONTHLY", "LAST_DAY_MONTHLY", "EVERY_4_WEEKS", "UNKNOWN", "OTHER"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and frequency not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `frequency` ({0}), must be one of {1}"  # noqa: E501
                .format(frequency, allowed_values)
            )

        self._frequency = frequency

    @property
    def maturity_amount(self):
        """Gets the maturity_amount of this Account.  # noqa: E501


        :return: The maturity_amount of this Account.  # noqa: E501
        :rtype: Money
        """
        return self._maturity_amount

    @maturity_amount.setter
    def maturity_amount(self, maturity_amount):
        """Sets the maturity_amount of this Account.


        :param maturity_amount: The maturity_amount of this Account.  # noqa: E501
        :type maturity_amount: Money
        """

        self._maturity_amount = maturity_amount

    @property
    def associated_provider_account_id(self):
        """Gets the associated_provider_account_id of this Account.  # noqa: E501

        The providerAccountIds that share the account with the primary providerAccountId that was created when the user had added the account for the first time.<br><b>Additional Details</b>: This attribute is returned in the response only if the account deduplication feature is enabled and the same account is mapped to more than one provider account IDs indicating the account is owned by more than one user, for example, joint accounts.<br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: All Containers<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>  # noqa: E501

        :return: The associated_provider_account_id of this Account.  # noqa: E501
        :rtype: list[int]
        """
        return self._associated_provider_account_id

    @associated_provider_account_id.setter
    def associated_provider_account_id(self, associated_provider_account_id):
        """Sets the associated_provider_account_id of this Account.

        The providerAccountIds that share the account with the primary providerAccountId that was created when the user had added the account for the first time.<br><b>Additional Details</b>: This attribute is returned in the response only if the account deduplication feature is enabled and the same account is mapped to more than one provider account IDs indicating the account is owned by more than one user, for example, joint accounts.<br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: All Containers<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>  # noqa: E501

        :param associated_provider_account_id: The associated_provider_account_id of this Account.  # noqa: E501
        :type associated_provider_account_id: list[int]
        """

        self._associated_provider_account_id = associated_provider_account_id

    @property
    def is_asset(self):
        """Gets the is_asset of this Account.  # noqa: E501

        The account to be considered as an asset or liability.<br><b>Applicable containers</b>: All Containers<br><b>Aggregated / Manual</b>: Both <br><b>Endpoints</b>:<br><ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>  # noqa: E501

        :return: The is_asset of this Account.  # noqa: E501
        :rtype: bool
        """
        return self._is_asset

    @is_asset.setter
    def is_asset(self, is_asset):
        """Sets the is_asset of this Account.

        The account to be considered as an asset or liability.<br><b>Applicable containers</b>: All Containers<br><b>Aggregated / Manual</b>: Both <br><b>Endpoints</b>:<br><ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>  # noqa: E501

        :param is_asset: The is_asset of this Account.  # noqa: E501
        :type is_asset: bool
        """

        self._is_asset = is_asset

    @property
    def principal_balance(self):
        """Gets the principal_balance of this Account.  # noqa: E501


        :return: The principal_balance of this Account.  # noqa: E501
        :rtype: Money
        """
        return self._principal_balance

    @principal_balance.setter
    def principal_balance(self, principal_balance):
        """Sets the principal_balance of this Account.


        :param principal_balance: The principal_balance of this Account.  # noqa: E501
        :type principal_balance: Money
        """

        self._principal_balance = principal_balance

    @property
    def total_cash_limit(self):
        """Gets the total_cash_limit of this Account.  # noqa: E501


        :return: The total_cash_limit of this Account.  # noqa: E501
        :rtype: Money
        """
        return self._total_cash_limit

    @total_cash_limit.setter
    def total_cash_limit(self, total_cash_limit):
        """Sets the total_cash_limit of this Account.


        :param total_cash_limit: The total_cash_limit of this Account.  # noqa: E501
        :type total_cash_limit: Money
        """

        self._total_cash_limit = total_cash_limit

    @property
    def maturity_date(self):
        """Gets the maturity_date of this Account.  # noqa: E501

        The date when a certificate of deposit (CD/FD) matures or the final payment date of a loan at which point the principal amount (including pending interest) is due to be paid.<br><b>Additional Details:</b> The date when a certificate of deposit (CD) matures, i.e., the money in the CD can be withdrawn without paying an early withdrawal penalty.The final payment date of a loan, i.e., the principal amount (including pending interest) is due to be paid.<br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: bank, loan<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>  # noqa: E501

        :return: The maturity_date of this Account.  # noqa: E501
        :rtype: str
        """
        return self._maturity_date

    @maturity_date.setter
    def maturity_date(self, maturity_date):
        """Sets the maturity_date of this Account.

        The date when a certificate of deposit (CD/FD) matures or the final payment date of a loan at which point the principal amount (including pending interest) is due to be paid.<br><b>Additional Details:</b> The date when a certificate of deposit (CD) matures, i.e., the money in the CD can be withdrawn without paying an early withdrawal penalty.The final payment date of a loan, i.e., the principal amount (including pending interest) is due to be paid.<br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: bank, loan<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>  # noqa: E501

        :param maturity_date: The maturity_date of this Account.  # noqa: E501
        :type maturity_date: str
        """

        self._maturity_date = maturity_date

    @property
    def minimum_amount_due(self):
        """Gets the minimum_amount_due of this Account.  # noqa: E501


        :return: The minimum_amount_due of this Account.  # noqa: E501
        :rtype: Money
        """
        return self._minimum_amount_due

    @minimum_amount_due.setter
    def minimum_amount_due(self, minimum_amount_due):
        """Sets the minimum_amount_due of this Account.


        :param minimum_amount_due: The minimum_amount_due of this Account.  # noqa: E501
        :type minimum_amount_due: Money
        """

        self._minimum_amount_due = minimum_amount_due

    @property
    def annual_percentage_yield(self):
        """Gets the annual_percentage_yield of this Account.  # noqa: E501

        Annual percentage yield (APY) is a normalized representation of an interest rate, based on a compounding period of one year. APY generally refers to the rate paid to a depositor by a financial institution on an account.<br><b>Applicable containers</b>: bank<br><b>Aggregated / Manual</b>: Aggregated<br><b>Endpoints</b>:<br><ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>  # noqa: E501

        :return: The annual_percentage_yield of this Account.  # noqa: E501
        :rtype: float
        """
        return self._annual_percentage_yield

    @annual_percentage_yield.setter
    def annual_percentage_yield(self, annual_percentage_yield):
        """Sets the annual_percentage_yield of this Account.

        Annual percentage yield (APY) is a normalized representation of an interest rate, based on a compounding period of one year. APY generally refers to the rate paid to a depositor by a financial institution on an account.<br><b>Applicable containers</b>: bank<br><b>Aggregated / Manual</b>: Aggregated<br><b>Endpoints</b>:<br><ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>  # noqa: E501

        :param annual_percentage_yield: The annual_percentage_yield of this Account.  # noqa: E501
        :type annual_percentage_yield: float
        """

        self._annual_percentage_yield = annual_percentage_yield

    @property
    def account_type(self):
        """Gets the account_type of this Account.  # noqa: E501

        The type of account that is aggregated, i.e., savings, checking, credit card, charge, HELOC, etc. The account type is derived based on the attributes of the account. <br><b>Valid Values:</b><br><b>Aggregated Account Type</b><br><b>bank</b><ul><li>CHECKING</li><li>SAVINGS</li><li>CD</li><li>PPF</li><li>RECURRING_DEPOSIT</li><li>FSA</li><li>MONEY_MARKET</li><li>IRA</li><li>PREPAID</li></ul><b>creditCard</b><ul><li>OTHER</li><li>CREDIT</li><li>STORE</li><li>CHARGE</li><li>OTHER</li></ul><b>investment (SN 1.0)</b><ul><li>BROKERAGE_MARGIN</li><li>HSA</li><li>IRA</li><li>BROKERAGE_CASH</li><li>401K</li><li>403B</li><li>TRUST</li><li>ANNUITY</li><li>SIMPLE</li><li>CUSTODIAL</li><li>BROKERAGE_CASH_OPTION</li><li>BROKERAGE_MARGIN_OPTION</li><li>INDIVIDUAL</li><li>CORPORATE</li><li>JTTIC</li><li>JTWROS</li><li>COMMUNITY_PROPERTY</li><li>JOINT_BY_ENTIRETY</li><li>CONSERVATORSHIP</li><li>ROTH</li><li>ROTH_CONVERSION</li><li>ROLLOVER</li><li>EDUCATIONAL</li><li>529_PLAN</li><li>457_DEFERRED_COMPENSATION</li><li>401A</li><li>PSP</li><li>MPP</li><li>STOCK_BASKET</li><li>LIVING_TRUST</li><li>REVOCABLE_TRUST</li><li>IRREVOCABLE_TRUST</li><li>CHARITABLE_REMAINDER</li><li>CHARITABLE_LEAD</li><li>CHARITABLE_GIFT_ACCOUNT</li><li>SEP</li><li>UTMA</li><li>UGMA</li><li>ESOPP</li><li>ADMINISTRATOR</li><li>EXECUTOR</li><li>PARTNERSHIP</li><li>SOLE_PROPRIETORSHIP</li><li>CHURCH</li><li>INVESTMENT_CLUB</li><li>RESTRICTED_STOCK_AWARD</li><li>CMA</li><li>EMPLOYEE_STOCK_PURCHASE_PLAN</li><li>PERFORMANCE_PLAN</li><li>BROKERAGE_LINK_ACCOUNT</li><li>MONEY_MARKET</li><li>SUPER_ANNUATION</li><li>REGISTERED_RETIREMENT_SAVINGS_PLAN</li><li>SPOUSAL_RETIREMENT_SAVINGS_PLAN</li><li>DEFERRED_PROFIT_SHARING_PLAN</li><li>NON_REGISTERED_SAVINGS_PLAN</li><li>REGISTERED_EDUCATION_SAVINGS_PLAN</li><li>GROUP_RETIREMENT_SAVINGS_PLAN</li><li>LOCKED_IN_RETIREMENT_SAVINGS_PLAN</li><li>RESTRICTED_LOCKED_IN_SAVINGS_PLAN</li><li>LOCKED_IN_RETIREMENT_ACCOUNT</li><li>REGISTERED_PENSION_PLAN</li><li>TAX_FREE_SAVINGS_ACCOUNT</li><li>LIFE_INCOME_FUND</li><li>REGISTERED_RETIREMENT_INCOME_FUND</li><li>SPOUSAL_RETIREMENT_INCOME_FUND</li><li>LOCKED_IN_REGISTERED_INVESTMENT_FUND</li><li>PRESCRIBED_REGISTERED_RETIREMENT_INCOME_FUND</li><li>GUARANTEED_INVESTMENT_CERTIFICATES</li><li>REGISTERED_DISABILITY_SAVINGS_PLAN</li><li>DIGITAL_WALLET</li><li>OTHER</li></ul><b>investment (SN 2.0)</b><ul><li>BROKERAGE_CASH</li><li>BROKERAGE_MARGIN</li><li>INDIVIDUAL_RETIREMENT_ACCOUNT_IRA</li><li>EMPLOYEE_RETIREMENT_ACCOUNT_401K</li><li>EMPLOYEE_RETIREMENT_SAVINGS_PLAN_403B</li><li>TRUST</li><li>ANNUITY</li><li>SIMPLE_IRA</li><li>CUSTODIAL_ACCOUNT</li><li>BROKERAGE_CASH_OPTION</li><li>BROKERAGE_MARGIN_OPTION</li><li>INDIVIDUAL</li><li>CORPORATE_INVESTMENT_ACCOUNT</li><li>JOINT_TENANTS_TENANCY_IN_COMMON_JTIC</li><li>JOINT_TENANTS_WITH_RIGHTS_OF_SURVIVORSHIP_JTWROS</li><li>JOINT_TENANTS_COMMUNITY_PROPERTY</li><li>JOINT_TENANTS_TENANTS_BY_ENTIRETY</li><li>CONSERVATOR</li><li>ROTH_IRA</li><li>ROTH_CONVERSION</li><li>ROLLOVER_IRA</li><li>EDUCATIONAL</li><li>EDUCATIONAL_SAVINGS_PLAN_529</li><li>DEFERRED_COMPENSATION_PLAN_457</li><li>MONEY_PURCHASE_RETIREMENT_PLAN_401A</li><li>PROFIT_SHARING_PLAN</li><li>MONEY_PURCHASE_PLAN</li><li>STOCK_BASKET_ACCOUNT</li><li>LIVING_TRUST</li><li>REVOCABLE_TRUST</li><li>IRREVOCABLE_TRUST</li><li>CHARITABLE_REMAINDER_TRUST</li><li>CHARITABLE_LEAD_TRUST</li><li>CHARITABLE_GIFT_ACCOUNT</li><li>SEP_IRA</li><li>UNIFORM_TRANSFER_TO_MINORS_ACT_UTMA</li><li>UNIFORM_GIFT_TO_MINORS_ACT_UGMA</li><li>EMPLOYEE_STOCK_OWNERSHIP_PLAN_ESOP</li><li>ADMINISTRATOR</li><li>EXECUTOR</li><li>PARTNERSHIP</li><li>PROPRIETORSHIP</li><li>CHURCH_ACCOUNT</li><li>INVESTMENT_CLUB</li><li>RESTRICTED_STOCK_AWARD</li><li>CASH_MANAGEMENT_ACCOUNT</li><li>EMPLOYEE_STOCK_PURCHASE_PLAN_ESPP</li><li>PERFORMANCE_PLAN</li><li>BROKERAGE_LINK_ACCOUNT</li><li>MONEY_MARKET_ACCOUNT</li><li>SUPERANNUATION</li><li>REGISTERED_RETIREMENT_SAVINGS_PLAN_RRSP</li><li>SPOUSAL_RETIREMENT_SAVINGS_PLAN_SRSP</li><li>DEFERRED_PROFIT_SHARING_PLAN_DPSP</li><li>NON_REGISTERED_SAVINGS_PLAN_NRSP</li><li>REGISTERED_EDUCATION_SAVINGS_PLAN_RESP</li><li>GROUP_RETIREMENT_SAVINGS_PLAN_GRSP</li><li>LOCKED_IN_RETIREMENT_SAVINGS_PLAN_LRSP</li><li>RESTRICTED_LOCKED_IN_SAVINGS_PLAN_RLSP</li><li>LOCKED_IN_RETIREMENT_ACCOUNT_LIRA</li><li>REGISTERED_PENSION_PLAN_RPP</li><li>TAX_FREE_SAVINGS_ACCOUNT_TFSA</li><li>LIFE_INCOME_FUND_LIF</li><li>REGISTERED_RETIREMENT_INCOME_FUND_RIF</li><li>SPOUSAL_RETIREMENT_INCOME_FUND_SRIF</li><li>LOCKED_IN_REGISTERED_INVESTMENT_FUND_LRIF</li><li>PRESCRIBED_REGISTERED_RETIREMENT_INCOME_FUND_PRIF</li><li>GUARANTEED_INVESTMENT_CERTIFICATES_GIC</li><li>REGISTERED_DISABILITY_SAVINGS_PLAN_RDSP</li><li>DEFINED_CONTRIBUTION_PLAN</li><li>DEFINED_BENEFIT_PLAN</li><li>EMPLOYEE_STOCK_OPTION_PLAN</li><li>NONQUALIFIED_DEFERRED_COMPENSATION_PLAN_409A</li><li>KEOGH_PLAN</li><li>EMPLOYEE_RETIREMENT_ACCOUNT_ROTH_401K</li><li>DEFERRED_CONTINGENT_CAPITAL_PLAN_DCCP</li><li>EMPLOYEE_BENEFIT_PLAN</li><li>EMPLOYEE_SAVINGS_PLAN</li><li>HEALTH_SAVINGS_ACCOUNT_HSA</li><li>COVERDELL_EDUCATION_SAVINGS_ACCOUNT_ESA</li><li>TESTAMENTARY_TRUST</li><li>ESTATE</li><li>GRANTOR_RETAINED_ANNUITY_TRUST_GRAT</li><li>ADVISORY_ACCOUNT</li><li>NON_PROFIT_ORGANIZATION_501C</li><li>HEALTH_REIMBURSEMENT_ARRANGEMENT_HRA</li><li>INDIVIDUAL_SAVINGS_ACCOUNT_ISA</li><li>CASH_ISA</li><li>STOCKS_AND_SHARES_ISA</li><li>INNOVATIVE_FINANCE_ISA</li><li>JUNIOR_ISA</li><li>EMPLOYEES_PROVIDENT_FUND_ORGANIZATION_EPFO</li><li>PUBLIC_PROVIDENT_FUND_PPF</li><li>EMPLOYEES_PENSION_SCHEME_EPS</li><li>NATIONAL_PENSION_SYSTEM_NPS</li><li>INDEXED_ANNUITY</li><li>ANNUITIZED_ANNUITY</li><li>VARIABLE_ANNUITY</li><li>ROTH_403B</li><li>SPOUSAL_IRA</li><li>SPOUSAL_ROTH_IRA</li><li>SARSEP_IRA</li><li>SUBSTANTIALLY_EQUAL_PERIODIC_PAYMENTS_SEPP</li><li>OFFSHORE_TRUST</li><li>IRREVOCABLE_LIFE_INSURANCE_TRUST</li><li>INTERNATIONAL_TRUST</li><li>LIFE_INTEREST_TRUST</li><li>EMPLOYEE_BENEFIT_TRUST</li><li>PRECIOUS_METAL_ACCOUNT</li><li>INVESTMENT_LOAN_ACCOUNT</li><li>GRANTOR_RETAINED_INCOME_TRUST</li><li>PENSION_PLAN</li><li>DIGITAL_WALLET</li><li>OTHER</li></ul><b>loan</b><ul><li>MORTGAGE</li><li>INSTALLMENT_LOAN</li><li>PERSONAL_LOAN</li><li>HOME_EQUITY_LINE_OF_CREDIT</li><li>LINE_OF_CREDIT</li><li>AUTO_LOAN</li><li>STUDENT_LOAN</li><li>HOME_LOAN</li></ul><b>insurance</b><ul><li>AUTO_INSURANCE</li><li>HEALTH_INSURANCE</li><li>HOME_INSURANCE</li><li>LIFE_INSURANCE</li><li>ANNUITY</li><li>TRAVEL_INSURANCE</li><li>INSURANCE</li></ul><b>realEstate</b><ul> <li>REAL_ESTATE</li></ul><b>reward</b><ul><li>REWARD_POINTS</li></ul><b>Manual Account Type</b><br><b>bank</b><ul><li>CHECKING</li><li>SAVINGS</li><li>CD</li><li>PREPAID</li></ul><b>credit</b><ul>  <li>CREDIT</li></ul><b>loan</b><ul>  <li>PERSONAL_LOAN</li><li>HOME_LOAN</li></ul><b>insurance</b><ul><li>INSURANCE</li><li>ANNUITY</li></ul><b>investment</b><ul><li>BROKERAGE_CASH</li></ul><br><br><b>Aggregated / Manual</b>: Both <br><b>Applicable containers</b>: All containers<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>  # noqa: E501

        :return: The account_type of this Account.  # noqa: E501
        :rtype: str
        """
        return self._account_type

    @account_type.setter
    def account_type(self, account_type):
        """Sets the account_type of this Account.

        The type of account that is aggregated, i.e., savings, checking, credit card, charge, HELOC, etc. The account type is derived based on the attributes of the account. <br><b>Valid Values:</b><br><b>Aggregated Account Type</b><br><b>bank</b><ul><li>CHECKING</li><li>SAVINGS</li><li>CD</li><li>PPF</li><li>RECURRING_DEPOSIT</li><li>FSA</li><li>MONEY_MARKET</li><li>IRA</li><li>PREPAID</li></ul><b>creditCard</b><ul><li>OTHER</li><li>CREDIT</li><li>STORE</li><li>CHARGE</li><li>OTHER</li></ul><b>investment (SN 1.0)</b><ul><li>BROKERAGE_MARGIN</li><li>HSA</li><li>IRA</li><li>BROKERAGE_CASH</li><li>401K</li><li>403B</li><li>TRUST</li><li>ANNUITY</li><li>SIMPLE</li><li>CUSTODIAL</li><li>BROKERAGE_CASH_OPTION</li><li>BROKERAGE_MARGIN_OPTION</li><li>INDIVIDUAL</li><li>CORPORATE</li><li>JTTIC</li><li>JTWROS</li><li>COMMUNITY_PROPERTY</li><li>JOINT_BY_ENTIRETY</li><li>CONSERVATORSHIP</li><li>ROTH</li><li>ROTH_CONVERSION</li><li>ROLLOVER</li><li>EDUCATIONAL</li><li>529_PLAN</li><li>457_DEFERRED_COMPENSATION</li><li>401A</li><li>PSP</li><li>MPP</li><li>STOCK_BASKET</li><li>LIVING_TRUST</li><li>REVOCABLE_TRUST</li><li>IRREVOCABLE_TRUST</li><li>CHARITABLE_REMAINDER</li><li>CHARITABLE_LEAD</li><li>CHARITABLE_GIFT_ACCOUNT</li><li>SEP</li><li>UTMA</li><li>UGMA</li><li>ESOPP</li><li>ADMINISTRATOR</li><li>EXECUTOR</li><li>PARTNERSHIP</li><li>SOLE_PROPRIETORSHIP</li><li>CHURCH</li><li>INVESTMENT_CLUB</li><li>RESTRICTED_STOCK_AWARD</li><li>CMA</li><li>EMPLOYEE_STOCK_PURCHASE_PLAN</li><li>PERFORMANCE_PLAN</li><li>BROKERAGE_LINK_ACCOUNT</li><li>MONEY_MARKET</li><li>SUPER_ANNUATION</li><li>REGISTERED_RETIREMENT_SAVINGS_PLAN</li><li>SPOUSAL_RETIREMENT_SAVINGS_PLAN</li><li>DEFERRED_PROFIT_SHARING_PLAN</li><li>NON_REGISTERED_SAVINGS_PLAN</li><li>REGISTERED_EDUCATION_SAVINGS_PLAN</li><li>GROUP_RETIREMENT_SAVINGS_PLAN</li><li>LOCKED_IN_RETIREMENT_SAVINGS_PLAN</li><li>RESTRICTED_LOCKED_IN_SAVINGS_PLAN</li><li>LOCKED_IN_RETIREMENT_ACCOUNT</li><li>REGISTERED_PENSION_PLAN</li><li>TAX_FREE_SAVINGS_ACCOUNT</li><li>LIFE_INCOME_FUND</li><li>REGISTERED_RETIREMENT_INCOME_FUND</li><li>SPOUSAL_RETIREMENT_INCOME_FUND</li><li>LOCKED_IN_REGISTERED_INVESTMENT_FUND</li><li>PRESCRIBED_REGISTERED_RETIREMENT_INCOME_FUND</li><li>GUARANTEED_INVESTMENT_CERTIFICATES</li><li>REGISTERED_DISABILITY_SAVINGS_PLAN</li><li>DIGITAL_WALLET</li><li>OTHER</li></ul><b>investment (SN 2.0)</b><ul><li>BROKERAGE_CASH</li><li>BROKERAGE_MARGIN</li><li>INDIVIDUAL_RETIREMENT_ACCOUNT_IRA</li><li>EMPLOYEE_RETIREMENT_ACCOUNT_401K</li><li>EMPLOYEE_RETIREMENT_SAVINGS_PLAN_403B</li><li>TRUST</li><li>ANNUITY</li><li>SIMPLE_IRA</li><li>CUSTODIAL_ACCOUNT</li><li>BROKERAGE_CASH_OPTION</li><li>BROKERAGE_MARGIN_OPTION</li><li>INDIVIDUAL</li><li>CORPORATE_INVESTMENT_ACCOUNT</li><li>JOINT_TENANTS_TENANCY_IN_COMMON_JTIC</li><li>JOINT_TENANTS_WITH_RIGHTS_OF_SURVIVORSHIP_JTWROS</li><li>JOINT_TENANTS_COMMUNITY_PROPERTY</li><li>JOINT_TENANTS_TENANTS_BY_ENTIRETY</li><li>CONSERVATOR</li><li>ROTH_IRA</li><li>ROTH_CONVERSION</li><li>ROLLOVER_IRA</li><li>EDUCATIONAL</li><li>EDUCATIONAL_SAVINGS_PLAN_529</li><li>DEFERRED_COMPENSATION_PLAN_457</li><li>MONEY_PURCHASE_RETIREMENT_PLAN_401A</li><li>PROFIT_SHARING_PLAN</li><li>MONEY_PURCHASE_PLAN</li><li>STOCK_BASKET_ACCOUNT</li><li>LIVING_TRUST</li><li>REVOCABLE_TRUST</li><li>IRREVOCABLE_TRUST</li><li>CHARITABLE_REMAINDER_TRUST</li><li>CHARITABLE_LEAD_TRUST</li><li>CHARITABLE_GIFT_ACCOUNT</li><li>SEP_IRA</li><li>UNIFORM_TRANSFER_TO_MINORS_ACT_UTMA</li><li>UNIFORM_GIFT_TO_MINORS_ACT_UGMA</li><li>EMPLOYEE_STOCK_OWNERSHIP_PLAN_ESOP</li><li>ADMINISTRATOR</li><li>EXECUTOR</li><li>PARTNERSHIP</li><li>PROPRIETORSHIP</li><li>CHURCH_ACCOUNT</li><li>INVESTMENT_CLUB</li><li>RESTRICTED_STOCK_AWARD</li><li>CASH_MANAGEMENT_ACCOUNT</li><li>EMPLOYEE_STOCK_PURCHASE_PLAN_ESPP</li><li>PERFORMANCE_PLAN</li><li>BROKERAGE_LINK_ACCOUNT</li><li>MONEY_MARKET_ACCOUNT</li><li>SUPERANNUATION</li><li>REGISTERED_RETIREMENT_SAVINGS_PLAN_RRSP</li><li>SPOUSAL_RETIREMENT_SAVINGS_PLAN_SRSP</li><li>DEFERRED_PROFIT_SHARING_PLAN_DPSP</li><li>NON_REGISTERED_SAVINGS_PLAN_NRSP</li><li>REGISTERED_EDUCATION_SAVINGS_PLAN_RESP</li><li>GROUP_RETIREMENT_SAVINGS_PLAN_GRSP</li><li>LOCKED_IN_RETIREMENT_SAVINGS_PLAN_LRSP</li><li>RESTRICTED_LOCKED_IN_SAVINGS_PLAN_RLSP</li><li>LOCKED_IN_RETIREMENT_ACCOUNT_LIRA</li><li>REGISTERED_PENSION_PLAN_RPP</li><li>TAX_FREE_SAVINGS_ACCOUNT_TFSA</li><li>LIFE_INCOME_FUND_LIF</li><li>REGISTERED_RETIREMENT_INCOME_FUND_RIF</li><li>SPOUSAL_RETIREMENT_INCOME_FUND_SRIF</li><li>LOCKED_IN_REGISTERED_INVESTMENT_FUND_LRIF</li><li>PRESCRIBED_REGISTERED_RETIREMENT_INCOME_FUND_PRIF</li><li>GUARANTEED_INVESTMENT_CERTIFICATES_GIC</li><li>REGISTERED_DISABILITY_SAVINGS_PLAN_RDSP</li><li>DEFINED_CONTRIBUTION_PLAN</li><li>DEFINED_BENEFIT_PLAN</li><li>EMPLOYEE_STOCK_OPTION_PLAN</li><li>NONQUALIFIED_DEFERRED_COMPENSATION_PLAN_409A</li><li>KEOGH_PLAN</li><li>EMPLOYEE_RETIREMENT_ACCOUNT_ROTH_401K</li><li>DEFERRED_CONTINGENT_CAPITAL_PLAN_DCCP</li><li>EMPLOYEE_BENEFIT_PLAN</li><li>EMPLOYEE_SAVINGS_PLAN</li><li>HEALTH_SAVINGS_ACCOUNT_HSA</li><li>COVERDELL_EDUCATION_SAVINGS_ACCOUNT_ESA</li><li>TESTAMENTARY_TRUST</li><li>ESTATE</li><li>GRANTOR_RETAINED_ANNUITY_TRUST_GRAT</li><li>ADVISORY_ACCOUNT</li><li>NON_PROFIT_ORGANIZATION_501C</li><li>HEALTH_REIMBURSEMENT_ARRANGEMENT_HRA</li><li>INDIVIDUAL_SAVINGS_ACCOUNT_ISA</li><li>CASH_ISA</li><li>STOCKS_AND_SHARES_ISA</li><li>INNOVATIVE_FINANCE_ISA</li><li>JUNIOR_ISA</li><li>EMPLOYEES_PROVIDENT_FUND_ORGANIZATION_EPFO</li><li>PUBLIC_PROVIDENT_FUND_PPF</li><li>EMPLOYEES_PENSION_SCHEME_EPS</li><li>NATIONAL_PENSION_SYSTEM_NPS</li><li>INDEXED_ANNUITY</li><li>ANNUITIZED_ANNUITY</li><li>VARIABLE_ANNUITY</li><li>ROTH_403B</li><li>SPOUSAL_IRA</li><li>SPOUSAL_ROTH_IRA</li><li>SARSEP_IRA</li><li>SUBSTANTIALLY_EQUAL_PERIODIC_PAYMENTS_SEPP</li><li>OFFSHORE_TRUST</li><li>IRREVOCABLE_LIFE_INSURANCE_TRUST</li><li>INTERNATIONAL_TRUST</li><li>LIFE_INTEREST_TRUST</li><li>EMPLOYEE_BENEFIT_TRUST</li><li>PRECIOUS_METAL_ACCOUNT</li><li>INVESTMENT_LOAN_ACCOUNT</li><li>GRANTOR_RETAINED_INCOME_TRUST</li><li>PENSION_PLAN</li><li>DIGITAL_WALLET</li><li>OTHER</li></ul><b>loan</b><ul><li>MORTGAGE</li><li>INSTALLMENT_LOAN</li><li>PERSONAL_LOAN</li><li>HOME_EQUITY_LINE_OF_CREDIT</li><li>LINE_OF_CREDIT</li><li>AUTO_LOAN</li><li>STUDENT_LOAN</li><li>HOME_LOAN</li></ul><b>insurance</b><ul><li>AUTO_INSURANCE</li><li>HEALTH_INSURANCE</li><li>HOME_INSURANCE</li><li>LIFE_INSURANCE</li><li>ANNUITY</li><li>TRAVEL_INSURANCE</li><li>INSURANCE</li></ul><b>realEstate</b><ul> <li>REAL_ESTATE</li></ul><b>reward</b><ul><li>REWARD_POINTS</li></ul><b>Manual Account Type</b><br><b>bank</b><ul><li>CHECKING</li><li>SAVINGS</li><li>CD</li><li>PREPAID</li></ul><b>credit</b><ul>  <li>CREDIT</li></ul><b>loan</b><ul>  <li>PERSONAL_LOAN</li><li>HOME_LOAN</li></ul><b>insurance</b><ul><li>INSURANCE</li><li>ANNUITY</li></ul><b>investment</b><ul><li>BROKERAGE_CASH</li></ul><br><br><b>Aggregated / Manual</b>: Both <br><b>Applicable containers</b>: All containers<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>  # noqa: E501

        :param account_type: The account_type of this Account.  # noqa: E501
        :type account_type: str
        """

        self._account_type = account_type

    @property
    def origination_date(self):
        """Gets the origination_date of this Account.  # noqa: E501

        The date on which the loan is disbursed.<br><br><b>Aggregated / Manual</b>: Both <br><b>Applicable containers</b>: loan<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>  # noqa: E501

        :return: The origination_date of this Account.  # noqa: E501
        :rtype: str
        """
        return self._origination_date

    @origination_date.setter
    def origination_date(self, origination_date):
        """Sets the origination_date of this Account.

        The date on which the loan is disbursed.<br><br><b>Aggregated / Manual</b>: Both <br><b>Applicable containers</b>: loan<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>  # noqa: E501

        :param origination_date: The origination_date of this Account.  # noqa: E501
        :type origination_date: str
        """

        self._origination_date = origination_date

    @property
    def total_vested_balance(self):
        """Gets the total_vested_balance of this Account.  # noqa: E501


        :return: The total_vested_balance of this Account.  # noqa: E501
        :rtype: Money
        """
        return self._total_vested_balance

    @total_vested_balance.setter
    def total_vested_balance(self, total_vested_balance):
        """Sets the total_vested_balance of this Account.


        :param total_vested_balance: The total_vested_balance of this Account.  # noqa: E501
        :type total_vested_balance: Money
        """

        self._total_vested_balance = total_vested_balance

    @property
    def reward_balance(self):
        """Gets the reward_balance of this Account.  # noqa: E501

        Information of different reward balances associated with the account.<br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: reward<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>  # noqa: E501

        :return: The reward_balance of this Account.  # noqa: E501
        :rtype: list[RewardBalance]
        """
        return self._reward_balance

    @reward_balance.setter
    def reward_balance(self, reward_balance):
        """Sets the reward_balance of this Account.

        Information of different reward balances associated with the account.<br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: reward<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>  # noqa: E501

        :param reward_balance: The reward_balance of this Account.  # noqa: E501
        :type reward_balance: list[RewardBalance]
        """

        self._reward_balance = reward_balance

    @property
    def source_account_status(self):
        """Gets the source_account_status of this Account.  # noqa: E501

        Indicates the status of the loan account. <br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: loan<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul><b>Applicable Values:</b><br>  # noqa: E501

        :return: The source_account_status of this Account.  # noqa: E501
        :rtype: str
        """
        return self._source_account_status

    @source_account_status.setter
    def source_account_status(self, source_account_status):
        """Sets the source_account_status of this Account.

        Indicates the status of the loan account. <br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: loan<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul><b>Applicable Values:</b><br>  # noqa: E501

        :param source_account_status: The source_account_status of this Account.  # noqa: E501
        :type source_account_status: str
        """
        allowed_values = ["IN_REPAYMENT", "DEFAULTED", "IN_SCHOOL", "IN_GRACE_PERIOD", "DELINQUENCY", "DEFERMENT", "FORBEARANCE"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and source_account_status not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `source_account_status` ({0}), must be one of {1}"  # noqa: E501
                .format(source_account_status, allowed_values)
            )

        self._source_account_status = source_account_status

    @property
    def linked_account_ids(self):
        """Gets the linked_account_ids of this Account.  # noqa: E501

        List of Loan accountId(s) to which the real-estate account is linked<br><br><b>Aggregated / Manual</b>: Both <br><b>Applicable containers</b>: realEstate<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>  # noqa: E501

        :return: The linked_account_ids of this Account.  # noqa: E501
        :rtype: list[int]
        """
        return self._linked_account_ids

    @linked_account_ids.setter
    def linked_account_ids(self, linked_account_ids):
        """Sets the linked_account_ids of this Account.

        List of Loan accountId(s) to which the real-estate account is linked<br><br><b>Aggregated / Manual</b>: Both <br><b>Applicable containers</b>: realEstate<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>  # noqa: E501

        :param linked_account_ids: The linked_account_ids of this Account.  # noqa: E501
        :type linked_account_ids: list[int]
        """

        self._linked_account_ids = linked_account_ids

    @property
    def derived_apr(self):
        """Gets the derived_apr of this Account.  # noqa: E501

        Derived APR will be an estimated purchase APR based on consumers credit card transactions and credit card purchase.<br><b>Aggregated / Manual / Derived</b>: Derived<br><b>Applicable containers</b>: creditCard<br><b>Endpoints</b>:<br><ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>  # noqa: E501

        :return: The derived_apr of this Account.  # noqa: E501
        :rtype: float
        """
        return self._derived_apr

    @derived_apr.setter
    def derived_apr(self, derived_apr):
        """Sets the derived_apr of this Account.

        Derived APR will be an estimated purchase APR based on consumers credit card transactions and credit card purchase.<br><b>Aggregated / Manual / Derived</b>: Derived<br><b>Applicable containers</b>: creditCard<br><b>Endpoints</b>:<br><ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>  # noqa: E501

        :param derived_apr: The derived_apr of this Account.  # noqa: E501
        :type derived_apr: float
        """

        self._derived_apr = derived_apr

    @property
    def policy_effective_date(self):
        """Gets the policy_effective_date of this Account.  # noqa: E501

        The date on which the insurance policy coverage commences.<br><b>Applicable containers</b>: insurance<br><b>Aggregated / Manual</b>: Aggregated<br><b>Endpoints</b>:<br><ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>  # noqa: E501

        :return: The policy_effective_date of this Account.  # noqa: E501
        :rtype: str
        """
        return self._policy_effective_date

    @policy_effective_date.setter
    def policy_effective_date(self, policy_effective_date):
        """Sets the policy_effective_date of this Account.

        The date on which the insurance policy coverage commences.<br><b>Applicable containers</b>: insurance<br><b>Aggregated / Manual</b>: Aggregated<br><b>Endpoints</b>:<br><ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>  # noqa: E501

        :param policy_effective_date: The policy_effective_date of this Account.  # noqa: E501
        :type policy_effective_date: str
        """

        self._policy_effective_date = policy_effective_date

    @property
    def total_unvested_balance(self):
        """Gets the total_unvested_balance of this Account.  # noqa: E501


        :return: The total_unvested_balance of this Account.  # noqa: E501
        :rtype: Money
        """
        return self._total_unvested_balance

    @total_unvested_balance.setter
    def total_unvested_balance(self, total_unvested_balance):
        """Sets the total_unvested_balance of this Account.


        :param total_unvested_balance: The total_unvested_balance of this Account.  # noqa: E501
        :type total_unvested_balance: Money
        """

        self._total_unvested_balance = total_unvested_balance

    @property
    def annuity_balance(self):
        """Gets the annuity_balance of this Account.  # noqa: E501


        :return: The annuity_balance of this Account.  # noqa: E501
        :rtype: Money
        """
        return self._annuity_balance

    @annuity_balance.setter
    def annuity_balance(self, annuity_balance):
        """Sets the annuity_balance of this Account.


        :param annuity_balance: The annuity_balance of this Account.  # noqa: E501
        :type annuity_balance: Money
        """

        self._annuity_balance = annuity_balance

    @property
    def account_name(self):
        """Gets the account_name of this Account.  # noqa: E501

        The account name as it appears at the site.<br>(The POST accounts service response return this field as name)<br><b>Applicable containers</b>: All Containers<br><b>Aggregated / Manual</b>: Both <br><b>Endpoints</b>:<br><ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>  # noqa: E501

        :return: The account_name of this Account.  # noqa: E501
        :rtype: str
        """
        return self._account_name

    @account_name.setter
    def account_name(self, account_name):
        """Sets the account_name of this Account.

        The account name as it appears at the site.<br>(The POST accounts service response return this field as name)<br><b>Applicable containers</b>: All Containers<br><b>Aggregated / Manual</b>: Both <br><b>Endpoints</b>:<br><ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>  # noqa: E501

        :param account_name: The account_name of this Account.  # noqa: E501
        :type account_name: str
        """

        self._account_name = account_name

    @property
    def total_credit_limit(self):
        """Gets the total_credit_limit of this Account.  # noqa: E501


        :return: The total_credit_limit of this Account.  # noqa: E501
        :rtype: Money
        """
        return self._total_credit_limit

    @total_credit_limit.setter
    def total_credit_limit(self, total_credit_limit):
        """Sets the total_credit_limit of this Account.


        :param total_credit_limit: The total_credit_limit of this Account.  # noqa: E501
        :type total_credit_limit: Money
        """

        self._total_credit_limit = total_credit_limit

    @property
    def policy_status(self):
        """Gets the policy_status of this Account.  # noqa: E501

        The status of the policy.<br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: insurance<br><b>Endpoints</b>:<br><ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul><b>Applicable Values</b><br>  # noqa: E501

        :return: The policy_status of this Account.  # noqa: E501
        :rtype: str
        """
        return self._policy_status

    @policy_status.setter
    def policy_status(self, policy_status):
        """Sets the policy_status of this Account.

        The status of the policy.<br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: insurance<br><b>Endpoints</b>:<br><ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul><b>Applicable Values</b><br>  # noqa: E501

        :param policy_status: The policy_status of this Account.  # noqa: E501
        :type policy_status: str
        """
        allowed_values = ["ACTIVE", "IN_ACTIVE", "OTHER"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and policy_status not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `policy_status` ({0}), must be one of {1}"  # noqa: E501
                .format(policy_status, allowed_values)
            )

        self._policy_status = policy_status

    @property
    def short_balance(self):
        """Gets the short_balance of this Account.  # noqa: E501


        :return: The short_balance of this Account.  # noqa: E501
        :rtype: Money
        """
        return self._short_balance

    @short_balance.setter
    def short_balance(self, short_balance):
        """Sets the short_balance of this Account.


        :param short_balance: The short_balance of this Account.  # noqa: E501
        :type short_balance: Money
        """

        self._short_balance = short_balance

    @property
    def lender(self):
        """Gets the lender of this Account.  # noqa: E501

        The financial institution that provides the loan.<br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: loan<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>  # noqa: E501

        :return: The lender of this Account.  # noqa: E501
        :rtype: str
        """
        return self._lender

    @lender.setter
    def lender(self, lender):
        """Sets the lender of this Account.

        The financial institution that provides the loan.<br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: loan<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>  # noqa: E501

        :param lender: The lender of this Account.  # noqa: E501
        :type lender: str
        """

        self._lender = lender

    @property
    def last_employee_contribution_amount(self):
        """Gets the last_employee_contribution_amount of this Account.  # noqa: E501


        :return: The last_employee_contribution_amount of this Account.  # noqa: E501
        :rtype: Money
        """
        return self._last_employee_contribution_amount

    @last_employee_contribution_amount.setter
    def last_employee_contribution_amount(self, last_employee_contribution_amount):
        """Sets the last_employee_contribution_amount of this Account.


        :param last_employee_contribution_amount: The last_employee_contribution_amount of this Account.  # noqa: E501
        :type last_employee_contribution_amount: Money
        """

        self._last_employee_contribution_amount = last_employee_contribution_amount

    @property
    def provider_id(self):
        """Gets the provider_id of this Account.  # noqa: E501

        Identifier of the provider site. The primary key of provider resource. <br><br><b>Aggregated / Manual</b>: Both <br><b>Applicable containers</b>: All containers<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>  # noqa: E501

        :return: The provider_id of this Account.  # noqa: E501
        :rtype: str
        """
        return self._provider_id

    @provider_id.setter
    def provider_id(self, provider_id):
        """Sets the provider_id of this Account.

        Identifier of the provider site. The primary key of provider resource. <br><br><b>Aggregated / Manual</b>: Both <br><b>Applicable containers</b>: All containers<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>  # noqa: E501

        :param provider_id: The provider_id of this Account.  # noqa: E501
        :type provider_id: str
        """

        self._provider_id = provider_id

    @property
    def last_payment_date(self):
        """Gets the last_payment_date of this Account.  # noqa: E501

        The date on which the payment for the previous or current billing cycle is done.<br><b>Additional Details:</b> If the payment is already done for the current billing cycle, then the field indicates the payment date of the current billing cycle. If payment is yet to be done for the current billing cycle, then the field indicates the date on which the payment was made for any of the previous billing cycles. The last payment date at the account-level can differ from the last payment date at the statement-level, as the information in the aggregated card account data provides an up-to-date information to the consumer.<br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: creditCard, loan, insurance<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>  # noqa: E501

        :return: The last_payment_date of this Account.  # noqa: E501
        :rtype: str
        """
        return self._last_payment_date

    @last_payment_date.setter
    def last_payment_date(self, last_payment_date):
        """Sets the last_payment_date of this Account.

        The date on which the payment for the previous or current billing cycle is done.<br><b>Additional Details:</b> If the payment is already done for the current billing cycle, then the field indicates the payment date of the current billing cycle. If payment is yet to be done for the current billing cycle, then the field indicates the date on which the payment was made for any of the previous billing cycles. The last payment date at the account-level can differ from the last payment date at the statement-level, as the information in the aggregated card account data provides an up-to-date information to the consumer.<br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: creditCard, loan, insurance<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>  # noqa: E501

        :param last_payment_date: The last_payment_date of this Account.  # noqa: E501
        :type last_payment_date: str
        """

        self._last_payment_date = last_payment_date

    @property
    def primary_reward_unit(self):
        """Gets the primary_reward_unit of this Account.  # noqa: E501

        Primary reward unit for this reward program. E.g. miles, points, etc.<br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: reward<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>  # noqa: E501

        :return: The primary_reward_unit of this Account.  # noqa: E501
        :rtype: str
        """
        return self._primary_reward_unit

    @primary_reward_unit.setter
    def primary_reward_unit(self, primary_reward_unit):
        """Sets the primary_reward_unit of this Account.

        Primary reward unit for this reward program. E.g. miles, points, etc.<br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: reward<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>  # noqa: E501

        :param primary_reward_unit: The primary_reward_unit of this Account.  # noqa: E501
        :type primary_reward_unit: str
        """

        self._primary_reward_unit = primary_reward_unit

    @property
    def last_payment_amount(self):
        """Gets the last_payment_amount of this Account.  # noqa: E501


        :return: The last_payment_amount of this Account.  # noqa: E501
        :rtype: Money
        """
        return self._last_payment_amount

    @last_payment_amount.setter
    def last_payment_amount(self, last_payment_amount):
        """Sets the last_payment_amount of this Account.


        :param last_payment_amount: The last_payment_amount of this Account.  # noqa: E501
        :type last_payment_amount: Money
        """

        self._last_payment_amount = last_payment_amount

    @property
    def remaining_balance(self):
        """Gets the remaining_balance of this Account.  # noqa: E501


        :return: The remaining_balance of this Account.  # noqa: E501
        :rtype: Money
        """
        return self._remaining_balance

    @remaining_balance.setter
    def remaining_balance(self, remaining_balance):
        """Sets the remaining_balance of this Account.


        :param remaining_balance: The remaining_balance of this Account.  # noqa: E501
        :type remaining_balance: Money
        """

        self._remaining_balance = remaining_balance

    @property
    def user_classification(self):
        """Gets the user_classification of this Account.  # noqa: E501

        <b>Applicable containers</b>: reward, bank, creditCard, investment, loan, insurance, realEstate, otherLiabilities<br><b>Endpoints</b>:<ul><li>GET accounts </li><li>GET accounts/{accountId}</li><li>POST accounts</ul><li>GET dataExtracts/userData</li><b>Applicable Values</b><br>  # noqa: E501

        :return: The user_classification of this Account.  # noqa: E501
        :rtype: str
        """
        return self._user_classification

    @user_classification.setter
    def user_classification(self, user_classification):
        """Sets the user_classification of this Account.

        <b>Applicable containers</b>: reward, bank, creditCard, investment, loan, insurance, realEstate, otherLiabilities<br><b>Endpoints</b>:<ul><li>GET accounts </li><li>GET accounts/{accountId}</li><li>POST accounts</ul><li>GET dataExtracts/userData</li><b>Applicable Values</b><br>  # noqa: E501

        :param user_classification: The user_classification of this Account.  # noqa: E501
        :type user_classification: str
        """
        allowed_values = ["BUSINESS", "PERSONAL"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and user_classification not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `user_classification` ({0}), must be one of {1}"  # noqa: E501
                .format(user_classification, allowed_values)
            )

        self._user_classification = user_classification

    @property
    def bank_transfer_code(self):
        """Gets the bank_transfer_code of this Account.  # noqa: E501

        Bank and branch identification information.<br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: bank, investment, loan<br><b>Endpoints</b>:<br><ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>  # noqa: E501

        :return: The bank_transfer_code of this Account.  # noqa: E501
        :rtype: list[BankTransferCode]
        """
        return self._bank_transfer_code

    @bank_transfer_code.setter
    def bank_transfer_code(self, bank_transfer_code):
        """Sets the bank_transfer_code of this Account.

        Bank and branch identification information.<br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: bank, investment, loan<br><b>Endpoints</b>:<br><ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>  # noqa: E501

        :param bank_transfer_code: The bank_transfer_code of this Account.  # noqa: E501
        :type bank_transfer_code: list[BankTransferCode]
        """

        self._bank_transfer_code = bank_transfer_code

    @property
    def expiration_date(self):
        """Gets the expiration_date of this Account.  # noqa: E501

        The date on which the insurance policy expires or matures.<br><b>Additional Details:</b> The due date at the account-level can differ from the due date field at the statement-level, as the information in the aggregated card account data provides an up-to-date information to the consumer.<br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: insurance<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>  # noqa: E501

        :return: The expiration_date of this Account.  # noqa: E501
        :rtype: str
        """
        return self._expiration_date

    @expiration_date.setter
    def expiration_date(self, expiration_date):
        """Sets the expiration_date of this Account.

        The date on which the insurance policy expires or matures.<br><b>Additional Details:</b> The due date at the account-level can differ from the due date field at the statement-level, as the information in the aggregated card account data provides an up-to-date information to the consumer.<br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: insurance<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>  # noqa: E501

        :param expiration_date: The expiration_date of this Account.  # noqa: E501
        :type expiration_date: str
        """

        self._expiration_date = expiration_date

    @property
    def coverage(self):
        """Gets the coverage of this Account.  # noqa: E501

        The coverage-related details of the account.<br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: insurance,investment<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>  # noqa: E501

        :return: The coverage of this Account.  # noqa: E501
        :rtype: list[Coverage]
        """
        return self._coverage

    @coverage.setter
    def coverage(self, coverage):
        """Sets the coverage of this Account.

        The coverage-related details of the account.<br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: insurance,investment<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>  # noqa: E501

        :param coverage: The coverage of this Account.  # noqa: E501
        :type coverage: list[Coverage]
        """

        self._coverage = coverage

    @property
    def cash_apr(self):
        """Gets the cash_apr of this Account.  # noqa: E501

        Annual percentage rate applied to cash withdrawals on the card.<br><br><b>Account Type</b>: Aggregated<br><b>Applicable containers</b>: creditCard<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>  # noqa: E501

        :return: The cash_apr of this Account.  # noqa: E501
        :rtype: float
        """
        return self._cash_apr

    @cash_apr.setter
    def cash_apr(self, cash_apr):
        """Sets the cash_apr of this Account.

        Annual percentage rate applied to cash withdrawals on the card.<br><br><b>Account Type</b>: Aggregated<br><b>Applicable containers</b>: creditCard<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>  # noqa: E501

        :param cash_apr: The cash_apr of this Account.  # noqa: E501
        :type cash_apr: float
        """

        self._cash_apr = cash_apr

    @property
    def auto_refresh(self):
        """Gets the auto_refresh of this Account.  # noqa: E501


        :return: The auto_refresh of this Account.  # noqa: E501
        :rtype: AutoRefresh
        """
        return self._auto_refresh

    @auto_refresh.setter
    def auto_refresh(self, auto_refresh):
        """Sets the auto_refresh of this Account.


        :param auto_refresh: The auto_refresh of this Account.  # noqa: E501
        :type auto_refresh: AutoRefresh
        """

        self._auto_refresh = auto_refresh

    @property
    def oauth_migration_status(self):
        """Gets the oauth_migration_status of this Account.  # noqa: E501

        Indicates the migration status of the account from screen-scraping provider to the Open Banking provider. <br><br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>  # noqa: E501

        :return: The oauth_migration_status of this Account.  # noqa: E501
        :rtype: str
        """
        return self._oauth_migration_status

    @oauth_migration_status.setter
    def oauth_migration_status(self, oauth_migration_status):
        """Sets the oauth_migration_status of this Account.

        Indicates the migration status of the account from screen-scraping provider to the Open Banking provider. <br><br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>  # noqa: E501

        :param oauth_migration_status: The oauth_migration_status of this Account.  # noqa: E501
        :type oauth_migration_status: str
        """
        allowed_values = ["IN_PROGRESS", "TO_BE_MIGRATED", "COMPLETED", "MIGRATED"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and oauth_migration_status not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `oauth_migration_status` ({0}), must be one of {1}"  # noqa: E501
                .format(oauth_migration_status, allowed_values)
            )

        self._oauth_migration_status = oauth_migration_status

    @property
    def displayed_name(self):
        """Gets the displayed_name of this Account.  # noqa: E501

        The name or identification of the account owner, as it appears at the FI site. <br><b>Note:</b> The account holder name can be full or partial based on how it is displayed in the account summary page of the FI site. In most cases, the FI site does not display the full account holder name in the account summary page.<br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: bank, creditCard, investment, insurance, loan, reward<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>  # noqa: E501

        :return: The displayed_name of this Account.  # noqa: E501
        :rtype: str
        """
        return self._displayed_name

    @displayed_name.setter
    def displayed_name(self, displayed_name):
        """Sets the displayed_name of this Account.

        The name or identification of the account owner, as it appears at the FI site. <br><b>Note:</b> The account holder name can be full or partial based on how it is displayed in the account summary page of the FI site. In most cases, the FI site does not display the full account holder name in the account summary page.<br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: bank, creditCard, investment, insurance, loan, reward<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>  # noqa: E501

        :param displayed_name: The displayed_name of this Account.  # noqa: E501
        :type displayed_name: str
        """

        self._displayed_name = displayed_name

    @property
    def full_account_number_list(self):
        """Gets the full_account_number_list of this Account.  # noqa: E501


        :return: The full_account_number_list of this Account.  # noqa: E501
        :rtype: FullAccountNumberList
        """
        return self._full_account_number_list

    @full_account_number_list.setter
    def full_account_number_list(self, full_account_number_list):
        """Sets the full_account_number_list of this Account.


        :param full_account_number_list: The full_account_number_list of this Account.  # noqa: E501
        :type full_account_number_list: FullAccountNumberList
        """

        self._full_account_number_list = full_account_number_list

    @property
    def amount_due(self):
        """Gets the amount_due of this Account.  # noqa: E501


        :return: The amount_due of this Account.  # noqa: E501
        :rtype: Money
        """
        return self._amount_due

    @amount_due.setter
    def amount_due(self, amount_due):
        """Sets the amount_due of this Account.


        :param amount_due: The amount_due of this Account.  # noqa: E501
        :type amount_due: Money
        """

        self._amount_due = amount_due

    @property
    def current_level(self):
        """Gets the current_level of this Account.  # noqa: E501

        Current level of the reward program the user is associated with. E.g. Silver, Jade etc.<br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: reward<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>  # noqa: E501

        :return: The current_level of this Account.  # noqa: E501
        :rtype: str
        """
        return self._current_level

    @current_level.setter
    def current_level(self, current_level):
        """Sets the current_level of this Account.

        Current level of the reward program the user is associated with. E.g. Silver, Jade etc.<br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: reward<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>  # noqa: E501

        :param current_level: The current_level of this Account.  # noqa: E501
        :type current_level: str
        """

        self._current_level = current_level

    @property
    def original_loan_amount(self):
        """Gets the original_loan_amount of this Account.  # noqa: E501


        :return: The original_loan_amount of this Account.  # noqa: E501
        :rtype: Money
        """
        return self._original_loan_amount

    @original_loan_amount.setter
    def original_loan_amount(self, original_loan_amount):
        """Sets the original_loan_amount of this Account.


        :param original_loan_amount: The original_loan_amount of this Account.  # noqa: E501
        :type original_loan_amount: Money
        """

        self._original_loan_amount = original_loan_amount

    @property
    def policy_to_date(self):
        """Gets the policy_to_date of this Account.  # noqa: E501

        The date to which the policy exists.<br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: insurance<br><b>Endpoints</b>:<br><ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>  # noqa: E501

        :return: The policy_to_date of this Account.  # noqa: E501
        :rtype: str
        """
        return self._policy_to_date

    @policy_to_date.setter
    def policy_to_date(self, policy_to_date):
        """Sets the policy_to_date of this Account.

        The date to which the policy exists.<br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: insurance<br><b>Endpoints</b>:<br><ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>  # noqa: E501

        :param policy_to_date: The policy_to_date of this Account.  # noqa: E501
        :type policy_to_date: str
        """

        self._policy_to_date = policy_to_date

    @property
    def loan_payoff_details(self):
        """Gets the loan_payoff_details of this Account.  # noqa: E501


        :return: The loan_payoff_details of this Account.  # noqa: E501
        :rtype: LoanPayoffDetails
        """
        return self._loan_payoff_details

    @loan_payoff_details.setter
    def loan_payoff_details(self, loan_payoff_details):
        """Sets the loan_payoff_details of this Account.


        :param loan_payoff_details: The loan_payoff_details of this Account.  # noqa: E501
        :type loan_payoff_details: LoanPayoffDetails
        """

        self._loan_payoff_details = loan_payoff_details

    @property
    def payment_profile(self):
        """Gets the payment_profile of this Account.  # noqa: E501


        :return: The payment_profile of this Account.  # noqa: E501
        :rtype: PaymentProfile
        """
        return self._payment_profile

    @payment_profile.setter
    def payment_profile(self, payment_profile):
        """Sets the payment_profile of this Account.


        :param payment_profile: The payment_profile of this Account.  # noqa: E501
        :type payment_profile: PaymentProfile
        """

        self._payment_profile = payment_profile

    @property
    def container(self):
        """Gets the container of this Account.  # noqa: E501

        The type of service. E.g., Bank, Credit Card, Investment, Insurance, etc.<br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: All containers<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul><b>Applicable Values</b><br>  # noqa: E501

        :return: The container of this Account.  # noqa: E501
        :rtype: str
        """
        return self._container

    @container.setter
    def container(self, container):
        """Sets the container of this Account.

        The type of service. E.g., Bank, Credit Card, Investment, Insurance, etc.<br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: All containers<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul><b>Applicable Values</b><br>  # noqa: E501

        :param container: The container of this Account.  # noqa: E501
        :type container: str
        """
        allowed_values = ["bank", "creditCard", "investment", "insurance", "loan", "reward", "bill", "realEstate", "otherAssets", "otherLiabilities"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and container not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `container` ({0}), must be one of {1}"  # noqa: E501
                .format(container, allowed_values)
            )

        self._container = container

    @property
    def last_employee_contribution_date(self):
        """Gets the last_employee_contribution_date of this Account.  # noqa: E501

        The date on which the last employee contribution was made to the 401k account.<br><b>Note:</b> The last employee contribution date field is derived from the transaction data and not aggregated from the FI site. The field is only applicable to the 401k account type.<br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: investment<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>  # noqa: E501

        :return: The last_employee_contribution_date of this Account.  # noqa: E501
        :rtype: str
        """
        return self._last_employee_contribution_date

    @last_employee_contribution_date.setter
    def last_employee_contribution_date(self, last_employee_contribution_date):
        """Sets the last_employee_contribution_date of this Account.

        The date on which the last employee contribution was made to the 401k account.<br><b>Note:</b> The last employee contribution date field is derived from the transaction data and not aggregated from the FI site. The field is only applicable to the 401k account type.<br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: investment<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>  # noqa: E501

        :param last_employee_contribution_date: The last_employee_contribution_date of this Account.  # noqa: E501
        :type last_employee_contribution_date: str
        """

        self._last_employee_contribution_date = last_employee_contribution_date

    @property
    def last_payment(self):
        """Gets the last_payment of this Account.  # noqa: E501


        :return: The last_payment of this Account.  # noqa: E501
        :rtype: Money
        """
        return self._last_payment

    @last_payment.setter
    def last_payment(self, last_payment):
        """Sets the last_payment of this Account.


        :param last_payment: The last_payment of this Account.  # noqa: E501
        :type last_payment: Money
        """

        self._last_payment = last_payment

    @property
    def recurring_payment(self):
        """Gets the recurring_payment of this Account.  # noqa: E501


        :return: The recurring_payment of this Account.  # noqa: E501
        :rtype: Money
        """
        return self._recurring_payment

    @recurring_payment.setter
    def recurring_payment(self, recurring_payment):
        """Sets the recurring_payment of this Account.


        :param recurring_payment: The recurring_payment of this Account.  # noqa: E501
        :type recurring_payment: Money
        """

        self._recurring_payment = recurring_payment

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Account):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Account):
            return True

        return self.to_dict() != other.to_dict()
