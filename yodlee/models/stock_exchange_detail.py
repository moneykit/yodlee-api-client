# coding: utf-8

"""
    Yodlee Core APIs

    This file describes the Yodlee Platform APIs using the swagger notation. You can use this swagger file to generate client side SDKs to the Yodlee Platform APIs for many different programming languages. Yodlee API v1.1 - Overview</a>.<br><br>You will have to set the header before making the API call. The following headers apply to all the APIs:<ul><li>Authorization: This header holds the access token</li> <li> Api-Version: 1.1</li></ul><b>Note</b>: If there are any API-specific headers, they are mentioned explicitly in the respective API's description.  # noqa: E501

    The version of the OpenAPI document: 1.1.0
    Contact: developer@yodlee.com
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from yodlee.configuration import Configuration


class StockExchangeDetail(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'symbol': 'str',
        'country_code': 'str',
        'currency_code': 'str',
        'exchange_code': 'str'
    }

    attribute_map = {
        'symbol': 'symbol',
        'country_code': 'countryCode',
        'currency_code': 'currencyCode',
        'exchange_code': 'exchangeCode'
    }

    def __init__(self, symbol=None, country_code=None, currency_code=None, exchange_code=None, local_vars_configuration=None):  # noqa: E501
        """StockExchangeDetail - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._symbol = None
        self._country_code = None
        self._currency_code = None
        self._exchange_code = None
        self.discriminator = None

        if symbol is not None:
            self.symbol = symbol
        if country_code is not None:
            self.country_code = country_code
        if currency_code is not None:
            self.currency_code = currency_code
        if exchange_code is not None:
            self.exchange_code = exchange_code

    @property
    def symbol(self):
        """Gets the symbol of this StockExchangeDetail.  # noqa: E501

        Ticker symbol representing particular securities listed on an exchange.<br><br><b>Applicable containers</b>: investment, insurance<br>  # noqa: E501

        :return: The symbol of this StockExchangeDetail.  # noqa: E501
        :rtype: str
        """
        return self._symbol

    @symbol.setter
    def symbol(self, symbol):
        """Sets the symbol of this StockExchangeDetail.

        Ticker symbol representing particular securities listed on an exchange.<br><br><b>Applicable containers</b>: investment, insurance<br>  # noqa: E501

        :param symbol: The symbol of this StockExchangeDetail.  # noqa: E501
        :type symbol: str
        """

        self._symbol = symbol

    @property
    def country_code(self):
        """Gets the country_code of this StockExchangeDetail.  # noqa: E501

        Country codes are geocodes developed to represent countries and dependent areas.<br><br><b>Applicable containers</b>: investment, insurance<br>  # noqa: E501

        :return: The country_code of this StockExchangeDetail.  # noqa: E501
        :rtype: str
        """
        return self._country_code

    @country_code.setter
    def country_code(self, country_code):
        """Sets the country_code of this StockExchangeDetail.

        Country codes are geocodes developed to represent countries and dependent areas.<br><br><b>Applicable containers</b>: investment, insurance<br>  # noqa: E501

        :param country_code: The country_code of this StockExchangeDetail.  # noqa: E501
        :type country_code: str
        """

        self._country_code = country_code

    @property
    def currency_code(self):
        """Gets the currency_code of this StockExchangeDetail.  # noqa: E501

        ISO codes of currency.<br><br><b>Applicable containers</b>: investment, insurance<br>  # noqa: E501

        :return: The currency_code of this StockExchangeDetail.  # noqa: E501
        :rtype: str
        """
        return self._currency_code

    @currency_code.setter
    def currency_code(self, currency_code):
        """Sets the currency_code of this StockExchangeDetail.

        ISO codes of currency.<br><br><b>Applicable containers</b>: investment, insurance<br>  # noqa: E501

        :param currency_code: The currency_code of this StockExchangeDetail.  # noqa: E501
        :type currency_code: str
        """

        self._currency_code = currency_code

    @property
    def exchange_code(self):
        """Gets the exchange_code of this StockExchangeDetail.  # noqa: E501

        An Exchange code is a four-character code used to identify stock markets and other trading exchanges within global trading.<br><br><b>Applicable containers</b>: investment, insurance<br>  # noqa: E501

        :return: The exchange_code of this StockExchangeDetail.  # noqa: E501
        :rtype: str
        """
        return self._exchange_code

    @exchange_code.setter
    def exchange_code(self, exchange_code):
        """Sets the exchange_code of this StockExchangeDetail.

        An Exchange code is a four-character code used to identify stock markets and other trading exchanges within global trading.<br><br><b>Applicable containers</b>: investment, insurance<br>  # noqa: E501

        :param exchange_code: The exchange_code of this StockExchangeDetail.  # noqa: E501
        :type exchange_code: str
        """

        self._exchange_code = exchange_code

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, StockExchangeDetail):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, StockExchangeDetail):
            return True

        return self.to_dict() != other.to_dict()
