# coding: utf-8

"""
    Yodlee Core APIs

    This file describes the Yodlee Platform APIs using the swagger notation. You can use this swagger file to generate client side SDKs to the Yodlee Platform APIs for many different programming languages. Yodlee API v1.1 - Overview</a>.<br><br>You will have to set the header before making the API call. The following headers apply to all the APIs:<ul><li>Authorization: This header holds the access token</li> <li> Api-Version: 1.1</li></ul><b>Note</b>: If there are any API-specific headers, they are mentioned explicitly in the respective API's description.  # noqa: E501

    The version of the OpenAPI document: 1.1.0
    Contact: developer@yodlee.com
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from yodlee.configuration import Configuration


class LoanPayoffDetails(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'pay_by_date': 'str',
        'payoff_amount': 'Money',
        'outstanding_balance': 'Money'
    }

    attribute_map = {
        'pay_by_date': 'payByDate',
        'payoff_amount': 'payoffAmount',
        'outstanding_balance': 'outstandingBalance'
    }

    def __init__(self, pay_by_date=None, payoff_amount=None, outstanding_balance=None, local_vars_configuration=None):  # noqa: E501
        """LoanPayoffDetails - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._pay_by_date = None
        self._payoff_amount = None
        self._outstanding_balance = None
        self.discriminator = None

        if pay_by_date is not None:
            self.pay_by_date = pay_by_date
        if payoff_amount is not None:
            self.payoff_amount = payoff_amount
        if outstanding_balance is not None:
            self.outstanding_balance = outstanding_balance

    @property
    def pay_by_date(self):
        """Gets the pay_by_date of this LoanPayoffDetails.  # noqa: E501

        The date by which the payoff amount should be paid.<br><br><b>Account Type</b>: Aggregated<br><b>Applicable containers</b>: loan<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li></ul>  # noqa: E501

        :return: The pay_by_date of this LoanPayoffDetails.  # noqa: E501
        :rtype: str
        """
        return self._pay_by_date

    @pay_by_date.setter
    def pay_by_date(self, pay_by_date):
        """Sets the pay_by_date of this LoanPayoffDetails.

        The date by which the payoff amount should be paid.<br><br><b>Account Type</b>: Aggregated<br><b>Applicable containers</b>: loan<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li></ul>  # noqa: E501

        :param pay_by_date: The pay_by_date of this LoanPayoffDetails.  # noqa: E501
        :type pay_by_date: str
        """

        self._pay_by_date = pay_by_date

    @property
    def payoff_amount(self):
        """Gets the payoff_amount of this LoanPayoffDetails.  # noqa: E501


        :return: The payoff_amount of this LoanPayoffDetails.  # noqa: E501
        :rtype: Money
        """
        return self._payoff_amount

    @payoff_amount.setter
    def payoff_amount(self, payoff_amount):
        """Sets the payoff_amount of this LoanPayoffDetails.


        :param payoff_amount: The payoff_amount of this LoanPayoffDetails.  # noqa: E501
        :type payoff_amount: Money
        """

        self._payoff_amount = payoff_amount

    @property
    def outstanding_balance(self):
        """Gets the outstanding_balance of this LoanPayoffDetails.  # noqa: E501


        :return: The outstanding_balance of this LoanPayoffDetails.  # noqa: E501
        :rtype: Money
        """
        return self._outstanding_balance

    @outstanding_balance.setter
    def outstanding_balance(self, outstanding_balance):
        """Sets the outstanding_balance of this LoanPayoffDetails.


        :param outstanding_balance: The outstanding_balance of this LoanPayoffDetails.  # noqa: E501
        :type outstanding_balance: Money
        """

        self._outstanding_balance = outstanding_balance

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LoanPayoffDetails):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, LoanPayoffDetails):
            return True

        return self.to_dict() != other.to_dict()
