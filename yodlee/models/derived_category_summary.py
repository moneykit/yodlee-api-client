# coding: utf-8

"""
    Yodlee Core APIs

    This file describes the Yodlee Platform APIs using the swagger notation. You can use this swagger file to generate client side SDKs to the Yodlee Platform APIs for many different programming languages. Yodlee API v1.1 - Overview</a>.<br><br>You will have to set the header before making the API call. The following headers apply to all the APIs:<ul><li>Authorization: This header holds the access token</li> <li> Api-Version: 1.1</li></ul><b>Note</b>: If there are any API-specific headers, they are mentioned explicitly in the respective API's description.  # noqa: E501

    The version of the OpenAPI document: 1.1.0
    Contact: developer@yodlee.com
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from yodlee.configuration import Configuration


class DerivedCategorySummary(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'credit_total': 'Money',
        'details': 'list[DerivedCategorySummaryDetails]',
        'links': 'DerivedTransactionsLinks',
        'category_name': 'str',
        'category_id': 'int',
        'debit_total': 'Money'
    }

    attribute_map = {
        'credit_total': 'creditTotal',
        'details': 'details',
        'links': 'links',
        'category_name': 'categoryName',
        'category_id': 'categoryId',
        'debit_total': 'debitTotal'
    }

    def __init__(self, credit_total=None, details=None, links=None, category_name=None, category_id=None, debit_total=None, local_vars_configuration=None):  # noqa: E501
        """DerivedCategorySummary - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._credit_total = None
        self._details = None
        self._links = None
        self._category_name = None
        self._category_id = None
        self._debit_total = None
        self.discriminator = None

        if credit_total is not None:
            self.credit_total = credit_total
        if details is not None:
            self.details = details
        if links is not None:
            self.links = links
        if category_name is not None:
            self.category_name = category_name
        if category_id is not None:
            self.category_id = category_id
        if debit_total is not None:
            self.debit_total = debit_total

    @property
    def credit_total(self):
        """Gets the credit_total of this DerivedCategorySummary.  # noqa: E501


        :return: The credit_total of this DerivedCategorySummary.  # noqa: E501
        :rtype: Money
        """
        return self._credit_total

    @credit_total.setter
    def credit_total(self, credit_total):
        """Sets the credit_total of this DerivedCategorySummary.


        :param credit_total: The credit_total of this DerivedCategorySummary.  # noqa: E501
        :type credit_total: Money
        """

        self._credit_total = credit_total

    @property
    def details(self):
        """Gets the details of this DerivedCategorySummary.  # noqa: E501

        Credit and debit summary per date.<br><br><b>Applicable containers</b>: creditCard, bank, investment<br>  # noqa: E501

        :return: The details of this DerivedCategorySummary.  # noqa: E501
        :rtype: list[DerivedCategorySummaryDetails]
        """
        return self._details

    @details.setter
    def details(self, details):
        """Sets the details of this DerivedCategorySummary.

        Credit and debit summary per date.<br><br><b>Applicable containers</b>: creditCard, bank, investment<br>  # noqa: E501

        :param details: The details of this DerivedCategorySummary.  # noqa: E501
        :type details: list[DerivedCategorySummaryDetails]
        """

        self._details = details

    @property
    def links(self):
        """Gets the links of this DerivedCategorySummary.  # noqa: E501


        :return: The links of this DerivedCategorySummary.  # noqa: E501
        :rtype: DerivedTransactionsLinks
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this DerivedCategorySummary.


        :param links: The links of this DerivedCategorySummary.  # noqa: E501
        :type links: DerivedTransactionsLinks
        """

        self._links = links

    @property
    def category_name(self):
        """Gets the category_name of this DerivedCategorySummary.  # noqa: E501

        The name of the category.<br><br><b>Applicable containers</b>: creditCard, bank, investment<br>  # noqa: E501

        :return: The category_name of this DerivedCategorySummary.  # noqa: E501
        :rtype: str
        """
        return self._category_name

    @category_name.setter
    def category_name(self, category_name):
        """Sets the category_name of this DerivedCategorySummary.

        The name of the category.<br><br><b>Applicable containers</b>: creditCard, bank, investment<br>  # noqa: E501

        :param category_name: The category_name of this DerivedCategorySummary.  # noqa: E501
        :type category_name: str
        """

        self._category_name = category_name

    @property
    def category_id(self):
        """Gets the category_id of this DerivedCategorySummary.  # noqa: E501

        Id of the category. This information is provided by transactions/categories service.<br><br><b>Applicable containers</b>: creditCard, bank, investment<br>  # noqa: E501

        :return: The category_id of this DerivedCategorySummary.  # noqa: E501
        :rtype: int
        """
        return self._category_id

    @category_id.setter
    def category_id(self, category_id):
        """Sets the category_id of this DerivedCategorySummary.

        Id of the category. This information is provided by transactions/categories service.<br><br><b>Applicable containers</b>: creditCard, bank, investment<br>  # noqa: E501

        :param category_id: The category_id of this DerivedCategorySummary.  # noqa: E501
        :type category_id: int
        """

        self._category_id = category_id

    @property
    def debit_total(self):
        """Gets the debit_total of this DerivedCategorySummary.  # noqa: E501


        :return: The debit_total of this DerivedCategorySummary.  # noqa: E501
        :rtype: Money
        """
        return self._debit_total

    @debit_total.setter
    def debit_total(self, debit_total):
        """Sets the debit_total of this DerivedCategorySummary.


        :param debit_total: The debit_total of this DerivedCategorySummary.  # noqa: E501
        :type debit_total: Money
        """

        self._debit_total = debit_total

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DerivedCategorySummary):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DerivedCategorySummary):
            return True

        return self.to_dict() != other.to_dict()
