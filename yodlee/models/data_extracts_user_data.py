# coding: utf-8

"""
    Yodlee Core APIs

    This file describes the Yodlee Platform APIs using the swagger notation. You can use this swagger file to generate client side SDKs to the Yodlee Platform APIs for many different programming languages. Yodlee API v1.1 - Overview</a>.<br><br>You will have to set the header before making the API call. The following headers apply to all the APIs:<ul><li>Authorization: This header holds the access token</li> <li> Api-Version: 1.1</li></ul><b>Note</b>: If there are any API-specific headers, they are mentioned explicitly in the respective API's description.  # noqa: E501

    The version of the OpenAPI document: 1.1.0
    Contact: developer@yodlee.com
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from yodlee.configuration import Configuration


class DataExtractsUserData(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'holding': 'list[DataExtractsHolding]',
        'total_transactions_count': 'int',
        'user': 'DataExtractsUser',
        'account': 'list[DataExtractsAccount]',
        'transaction': 'list[DataExtractsTransaction]',
        'provider_account': 'list[DataExtractsProviderAccount]'
    }

    attribute_map = {
        'holding': 'holding',
        'total_transactions_count': 'totalTransactionsCount',
        'user': 'user',
        'account': 'account',
        'transaction': 'transaction',
        'provider_account': 'providerAccount'
    }

    def __init__(self, holding=None, total_transactions_count=None, user=None, account=None, transaction=None, provider_account=None, local_vars_configuration=None):  # noqa: E501
        """DataExtractsUserData - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._holding = None
        self._total_transactions_count = None
        self._user = None
        self._account = None
        self._transaction = None
        self._provider_account = None
        self.discriminator = None

        if holding is not None:
            self.holding = holding
        if total_transactions_count is not None:
            self.total_transactions_count = total_transactions_count
        if user is not None:
            self.user = user
        if account is not None:
            self.account = account
        if transaction is not None:
            self.transaction = transaction
        if provider_account is not None:
            self.provider_account = provider_account

    @property
    def holding(self):
        """Gets the holding of this DataExtractsUserData.  # noqa: E501


        :return: The holding of this DataExtractsUserData.  # noqa: E501
        :rtype: list[DataExtractsHolding]
        """
        return self._holding

    @holding.setter
    def holding(self, holding):
        """Sets the holding of this DataExtractsUserData.


        :param holding: The holding of this DataExtractsUserData.  # noqa: E501
        :type holding: list[DataExtractsHolding]
        """

        self._holding = holding

    @property
    def total_transactions_count(self):
        """Gets the total_transactions_count of this DataExtractsUserData.  # noqa: E501


        :return: The total_transactions_count of this DataExtractsUserData.  # noqa: E501
        :rtype: int
        """
        return self._total_transactions_count

    @total_transactions_count.setter
    def total_transactions_count(self, total_transactions_count):
        """Sets the total_transactions_count of this DataExtractsUserData.


        :param total_transactions_count: The total_transactions_count of this DataExtractsUserData.  # noqa: E501
        :type total_transactions_count: int
        """

        self._total_transactions_count = total_transactions_count

    @property
    def user(self):
        """Gets the user of this DataExtractsUserData.  # noqa: E501


        :return: The user of this DataExtractsUserData.  # noqa: E501
        :rtype: DataExtractsUser
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this DataExtractsUserData.


        :param user: The user of this DataExtractsUserData.  # noqa: E501
        :type user: DataExtractsUser
        """

        self._user = user

    @property
    def account(self):
        """Gets the account of this DataExtractsUserData.  # noqa: E501


        :return: The account of this DataExtractsUserData.  # noqa: E501
        :rtype: list[DataExtractsAccount]
        """
        return self._account

    @account.setter
    def account(self, account):
        """Sets the account of this DataExtractsUserData.


        :param account: The account of this DataExtractsUserData.  # noqa: E501
        :type account: list[DataExtractsAccount]
        """

        self._account = account

    @property
    def transaction(self):
        """Gets the transaction of this DataExtractsUserData.  # noqa: E501


        :return: The transaction of this DataExtractsUserData.  # noqa: E501
        :rtype: list[DataExtractsTransaction]
        """
        return self._transaction

    @transaction.setter
    def transaction(self, transaction):
        """Sets the transaction of this DataExtractsUserData.


        :param transaction: The transaction of this DataExtractsUserData.  # noqa: E501
        :type transaction: list[DataExtractsTransaction]
        """

        self._transaction = transaction

    @property
    def provider_account(self):
        """Gets the provider_account of this DataExtractsUserData.  # noqa: E501


        :return: The provider_account of this DataExtractsUserData.  # noqa: E501
        :rtype: list[DataExtractsProviderAccount]
        """
        return self._provider_account

    @provider_account.setter
    def provider_account(self, provider_account):
        """Sets the provider_account of this DataExtractsUserData.


        :param provider_account: The provider_account of this DataExtractsUserData.  # noqa: E501
        :type provider_account: list[DataExtractsProviderAccount]
        """

        self._provider_account = provider_account

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DataExtractsUserData):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DataExtractsUserData):
            return True

        return self.to_dict() != other.to_dict()
